
motor_micromouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00001a9e  00001b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000710  0080010e  0080010e  00001be0  2**0
                  ALLOC
  3 .stab         00003270  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171b  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 08 	call	0x1110	; 0x1110 <main>
      8a:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <right_wall>:
 */
#include"walls.h"


	uint8 right_wall(void){
			if(s7 == 1 || s8 == 1 ){
      92:	80 91 1d 01 	lds	r24, 0x011D
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	29 f0       	breq	.+10     	; 0xa4 <right_wall+0x12>
      9a:	80 91 19 01 	lds	r24, 0x0119
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	09 f4       	brne	.+2      	; 0xa6 <right_wall+0x14>
      a4:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else {
				return 0;
			}
		}
      a6:	89 2f       	mov	r24, r25
      a8:	08 95       	ret

000000aa <left_wall>:
		uint8 left_wall(void){
			if(s1 ==1 || s2 ==1){
      aa:	80 91 17 01 	lds	r24, 0x0117
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	29 f0       	breq	.+10     	; 0xbc <left_wall+0x12>
      b2:	80 91 1b 01 	lds	r24, 0x011B
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f4       	brne	.+2      	; 0xbe <left_wall+0x14>
      bc:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else{
				return 0;
			}
		}
      be:	89 2f       	mov	r24, r25
      c0:	08 95       	ret

000000c2 <front_wall>:
		uint8 front_wall(void){

			if(s4 == 1 || s5 == 1){
      c2:	80 91 18 01 	lds	r24, 0x0118
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	29 f0       	breq	.+10     	; 0xd4 <front_wall+0x12>
      ca:	80 91 1a 01 	lds	r24, 0x011A
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	09 f4       	brne	.+2      	; 0xd6 <front_wall+0x14>
      d4:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else{
				return 0;
			}
		}
      d6:	89 2f       	mov	r24, r25
      d8:	08 95       	ret

000000da <PWM_Timer0_Start>:
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
      da:	bb 9a       	sbi	0x17, 3	; 23

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS02) | (1 << CS00);
      dc:	9d e6       	ldi	r25, 0x6D	; 109
      de:	93 bf       	out	0x33, r25	; 51
    // CS02 and CS00 -> Prescaler = 1024

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	bc 01       	movw	r22, r24
      e8:	cd 01       	movw	r24, r26
      ea:	2f ef       	ldi	r18, 0xFF	; 255
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	50 e0       	ldi	r21, 0x00	; 0
      f2:	0e 94 cf 09 	call	0x139e	; 0x139e <__mulsi3>
      f6:	24 e6       	ldi	r18, 0x64	; 100
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 01 0a 	call	0x1402	; 0x1402 <__udivmodsi4>
     102:	2c bf       	out	0x3c, r18	; 60
}
     104:	08 95       	ret

00000106 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     106:	68 30       	cpi	r22, 0x08	; 8
     108:	08 f0       	brcs	.+2      	; 0x10c <GPIO_setupPinDirection+0x6>
     10a:	70 c0       	rjmp	.+224    	; 0x1ec <GPIO_setupPinDirection+0xe6>
     10c:	84 30       	cpi	r24, 0x04	; 4
     10e:	08 f0       	brcs	.+2      	; 0x112 <GPIO_setupPinDirection+0xc>
     110:	6d c0       	rjmp	.+218    	; 0x1ec <GPIO_setupPinDirection+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	09 f1       	breq	.+66     	; 0x158 <GPIO_setupPinDirection+0x52>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	30 f0       	brcs	.+12     	; 0x126 <GPIO_setupPinDirection+0x20>
     11a:	82 30       	cpi	r24, 0x02	; 2
     11c:	b1 f1       	breq	.+108    	; 0x18a <GPIO_setupPinDirection+0x84>
     11e:	83 30       	cpi	r24, 0x03	; 3
     120:	09 f0       	breq	.+2      	; 0x124 <GPIO_setupPinDirection+0x1e>
     122:	64 c0       	rjmp	.+200    	; 0x1ec <GPIO_setupPinDirection+0xe6>
     124:	4b c0       	rjmp	.+150    	; 0x1bc <GPIO_setupPinDirection+0xb6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	59 f4       	brne	.+22     	; 0x140 <GPIO_setupPinDirection+0x3a>
			{
				SET_BIT(DDRA,pin_num);
     12a:	2a b3       	in	r18, 0x1a	; 26
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_setupPinDirection+0x30>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_setupPinDirection+0x2c>
     13a:	28 2b       	or	r18, r24
     13c:	2a bb       	out	0x1a, r18	; 26
     13e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     140:	2a b3       	in	r18, 0x1a	; 26
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_setupPinDirection+0x46>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_setupPinDirection+0x42>
     150:	80 95       	com	r24
     152:	82 23       	and	r24, r18
     154:	8a bb       	out	0x1a, r24	; 26
     156:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     158:	41 30       	cpi	r20, 0x01	; 1
     15a:	59 f4       	brne	.+22     	; 0x172 <GPIO_setupPinDirection+0x6c>
			{
				SET_BIT(DDRB,pin_num);
     15c:	27 b3       	in	r18, 0x17	; 23
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <GPIO_setupPinDirection+0x62>
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	6a 95       	dec	r22
     16a:	e2 f7       	brpl	.-8      	; 0x164 <GPIO_setupPinDirection+0x5e>
     16c:	28 2b       	or	r18, r24
     16e:	27 bb       	out	0x17, r18	; 23
     170:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     172:	27 b3       	in	r18, 0x17	; 23
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <GPIO_setupPinDirection+0x78>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <GPIO_setupPinDirection+0x74>
     182:	80 95       	com	r24
     184:	82 23       	and	r24, r18
     186:	87 bb       	out	0x17, r24	; 23
     188:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	59 f4       	brne	.+22     	; 0x1a4 <GPIO_setupPinDirection+0x9e>
			{
				SET_BIT(DDRC,pin_num);
     18e:	24 b3       	in	r18, 0x14	; 20
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 c0       	rjmp	.+4      	; 0x19a <GPIO_setupPinDirection+0x94>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	6a 95       	dec	r22
     19c:	e2 f7       	brpl	.-8      	; 0x196 <GPIO_setupPinDirection+0x90>
     19e:	28 2b       	or	r18, r24
     1a0:	24 bb       	out	0x14, r18	; 20
     1a2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     1a4:	24 b3       	in	r18, 0x14	; 20
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <GPIO_setupPinDirection+0xaa>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	6a 95       	dec	r22
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <GPIO_setupPinDirection+0xa6>
     1b4:	80 95       	com	r24
     1b6:	82 23       	and	r24, r18
     1b8:	84 bb       	out	0x14, r24	; 20
     1ba:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     1bc:	41 30       	cpi	r20, 0x01	; 1
     1be:	59 f4       	brne	.+22     	; 0x1d6 <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
     1c0:	21 b3       	in	r18, 0x11	; 17
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <GPIO_setupPinDirection+0xc6>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	6a 95       	dec	r22
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <GPIO_setupPinDirection+0xc2>
     1d0:	28 2b       	or	r18, r24
     1d2:	21 bb       	out	0x11, r18	; 17
     1d4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     1d6:	21 b3       	in	r18, 0x11	; 17
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_setupPinDirection+0xdc>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_setupPinDirection+0xd8>
     1e6:	80 95       	com	r24
     1e8:	82 23       	and	r24, r18
     1ea:	81 bb       	out	0x11, r24	; 17
     1ec:	08 95       	ret

000001ee <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     1ee:	68 30       	cpi	r22, 0x08	; 8
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <GPIO_writePin+0x6>
     1f2:	70 c0       	rjmp	.+224    	; 0x2d4 <GPIO_writePin+0xe6>
     1f4:	84 30       	cpi	r24, 0x04	; 4
     1f6:	08 f0       	brcs	.+2      	; 0x1fa <GPIO_writePin+0xc>
     1f8:	6d c0       	rjmp	.+218    	; 0x2d4 <GPIO_writePin+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	09 f1       	breq	.+66     	; 0x240 <GPIO_writePin+0x52>
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	30 f0       	brcs	.+12     	; 0x20e <GPIO_writePin+0x20>
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	b1 f1       	breq	.+108    	; 0x272 <GPIO_writePin+0x84>
     206:	83 30       	cpi	r24, 0x03	; 3
     208:	09 f0       	breq	.+2      	; 0x20c <GPIO_writePin+0x1e>
     20a:	64 c0       	rjmp	.+200    	; 0x2d4 <GPIO_writePin+0xe6>
     20c:	4b c0       	rjmp	.+150    	; 0x2a4 <GPIO_writePin+0xb6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     20e:	41 30       	cpi	r20, 0x01	; 1
     210:	59 f4       	brne	.+22     	; 0x228 <GPIO_writePin+0x3a>
			{
				SET_BIT(PORTA,pin_num);
     212:	2b b3       	in	r18, 0x1b	; 27
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	02 c0       	rjmp	.+4      	; 0x21e <GPIO_writePin+0x30>
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	6a 95       	dec	r22
     220:	e2 f7       	brpl	.-8      	; 0x21a <GPIO_writePin+0x2c>
     222:	28 2b       	or	r18, r24
     224:	2b bb       	out	0x1b, r18	; 27
     226:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     228:	2b b3       	in	r18, 0x1b	; 27
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <GPIO_writePin+0x46>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <GPIO_writePin+0x42>
     238:	80 95       	com	r24
     23a:	82 23       	and	r24, r18
     23c:	8b bb       	out	0x1b, r24	; 27
     23e:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     240:	41 30       	cpi	r20, 0x01	; 1
     242:	59 f4       	brne	.+22     	; 0x25a <GPIO_writePin+0x6c>
			{
				SET_BIT(PORTB,pin_num);
     244:	28 b3       	in	r18, 0x18	; 24
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <GPIO_writePin+0x62>
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	6a 95       	dec	r22
     252:	e2 f7       	brpl	.-8      	; 0x24c <GPIO_writePin+0x5e>
     254:	28 2b       	or	r18, r24
     256:	28 bb       	out	0x18, r18	; 24
     258:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     25a:	28 b3       	in	r18, 0x18	; 24
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	02 c0       	rjmp	.+4      	; 0x266 <GPIO_writePin+0x78>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	6a 95       	dec	r22
     268:	e2 f7       	brpl	.-8      	; 0x262 <GPIO_writePin+0x74>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	88 bb       	out	0x18, r24	; 24
     270:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     272:	41 30       	cpi	r20, 0x01	; 1
     274:	59 f4       	brne	.+22     	; 0x28c <GPIO_writePin+0x9e>
			{
				SET_BIT(PORTC,pin_num);
     276:	25 b3       	in	r18, 0x15	; 21
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <GPIO_writePin+0x94>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	6a 95       	dec	r22
     284:	e2 f7       	brpl	.-8      	; 0x27e <GPIO_writePin+0x90>
     286:	28 2b       	or	r18, r24
     288:	25 bb       	out	0x15, r18	; 21
     28a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     28c:	25 b3       	in	r18, 0x15	; 21
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	02 c0       	rjmp	.+4      	; 0x298 <GPIO_writePin+0xaa>
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	6a 95       	dec	r22
     29a:	e2 f7       	brpl	.-8      	; 0x294 <GPIO_writePin+0xa6>
     29c:	80 95       	com	r24
     29e:	82 23       	and	r24, r18
     2a0:	85 bb       	out	0x15, r24	; 21
     2a2:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     2a4:	41 30       	cpi	r20, 0x01	; 1
     2a6:	59 f4       	brne	.+22     	; 0x2be <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
     2a8:	22 b3       	in	r18, 0x12	; 18
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <GPIO_writePin+0xc6>
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <GPIO_writePin+0xc2>
     2b8:	28 2b       	or	r18, r24
     2ba:	22 bb       	out	0x12, r18	; 18
     2bc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     2be:	22 b3       	in	r18, 0x12	; 18
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_writePin+0xdc>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_writePin+0xd8>
     2ce:	80 95       	com	r24
     2d0:	82 23       	and	r24, r18
     2d2:	82 bb       	out	0x12, r24	; 18
     2d4:	08 95       	ret

000002d6 <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     2d6:	68 30       	cpi	r22, 0x08	; 8
     2d8:	d0 f4       	brcc	.+52     	; 0x30e <GPIO_readPin+0x38>
     2da:	84 30       	cpi	r24, 0x04	; 4
     2dc:	c0 f4       	brcc	.+48     	; 0x30e <GPIO_readPin+0x38>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	49 f0       	breq	.+18     	; 0x2f4 <GPIO_readPin+0x1e>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	28 f0       	brcs	.+10     	; 0x2f0 <GPIO_readPin+0x1a>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <GPIO_readPin+0x22>
     2ea:	83 30       	cpi	r24, 0x03	; 3
     2ec:	81 f4       	brne	.+32     	; 0x30e <GPIO_readPin+0x38>
     2ee:	06 c0       	rjmp	.+12     	; 0x2fc <GPIO_readPin+0x26>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     2f0:	89 b3       	in	r24, 0x19	; 25
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     2f4:	86 b3       	in	r24, 0x16	; 22
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     2f8:	83 b3       	in	r24, 0x13	; 19
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     2fc:	80 b3       	in	r24, 0x10	; 16
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <GPIO_readPin+0x30>
     302:	95 95       	asr	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <GPIO_readPin+0x2c>
     30a:	81 70       	andi	r24, 0x01	; 1
     30c:	08 95       	ret
     30e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     310:	08 95       	ret

00000312 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	80 f4       	brcc	.+32     	; 0x336 <GPIO_setupPortDirection+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	49 f0       	breq	.+18     	; 0x32c <GPIO_setupPortDirection+0x1a>
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	28 f0       	brcs	.+10     	; 0x328 <GPIO_setupPortDirection+0x16>
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	39 f0       	breq	.+14     	; 0x330 <GPIO_setupPortDirection+0x1e>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	41 f4       	brne	.+16     	; 0x336 <GPIO_setupPortDirection+0x24>
     326:	06 c0       	rjmp	.+12     	; 0x334 <GPIO_setupPortDirection+0x22>
		{
		case PORTA_ID:
			DDRA = direction;
     328:	6a bb       	out	0x1a, r22	; 26
     32a:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
     32c:	67 bb       	out	0x17, r22	; 23
     32e:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
     330:	64 bb       	out	0x14, r22	; 20
     332:	08 95       	ret
			break;
		case PORTD_ID:
			DDRD = direction;
     334:	61 bb       	out	0x11, r22	; 17
     336:	08 95       	ret

00000338 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	80 f4       	brcc	.+32     	; 0x35c <GPIO_writePort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	49 f0       	breq	.+18     	; 0x352 <GPIO_writePort+0x1a>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	28 f0       	brcs	.+10     	; 0x34e <GPIO_writePort+0x16>
     344:	82 30       	cpi	r24, 0x02	; 2
     346:	39 f0       	breq	.+14     	; 0x356 <GPIO_writePort+0x1e>
     348:	83 30       	cpi	r24, 0x03	; 3
     34a:	41 f4       	brne	.+16     	; 0x35c <GPIO_writePort+0x24>
     34c:	06 c0       	rjmp	.+12     	; 0x35a <GPIO_writePort+0x22>
		{
		case PORTA_ID:
			PORTA = value;
     34e:	6b bb       	out	0x1b, r22	; 27
     350:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
     352:	68 bb       	out	0x18, r22	; 24
     354:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
     356:	65 bb       	out	0x15, r22	; 21
     358:	08 95       	ret
			break;
		case PORTD_ID:
			PORTD = value;
     35a:	62 bb       	out	0x12, r22	; 18
     35c:	08 95       	ret

0000035e <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     35e:	84 30       	cpi	r24, 0x04	; 4
     360:	88 f4       	brcc	.+34     	; 0x384 <GPIO_readPort+0x26>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	49 f0       	breq	.+18     	; 0x378 <GPIO_readPort+0x1a>
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	28 f0       	brcs	.+10     	; 0x374 <GPIO_readPort+0x16>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	39 f0       	breq	.+14     	; 0x37c <GPIO_readPort+0x1e>
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	49 f4       	brne	.+18     	; 0x384 <GPIO_readPort+0x26>
     372:	06 c0       	rjmp	.+12     	; 0x380 <GPIO_readPort+0x22>
		{
		case PORTA_ID:
			value = PINA;
     374:	89 b3       	in	r24, 0x19	; 25
     376:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
     378:	86 b3       	in	r24, 0x16	; 22
     37a:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
     37c:	83 b3       	in	r24, 0x13	; 19
     37e:	08 95       	ret
			break;
		case PORTD_ID:
			value = PIND;
     380:	80 b3       	in	r24, 0x10	; 16
     382:	08 95       	ret
     384:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
     386:	08 95       	ret

00000388 <DC_RIGHT_INIT>:
#include "DC_Motor.h"

void DC_RIGHT_INIT(void)
{
    // Set IN1 and IN2 (motor right direction pins) as output
    DC_MOTOR_RIGHT_DDR |= (1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2);
     388:	87 b3       	in	r24, 0x17	; 23
     38a:	83 60       	ori	r24, 0x03	; 3
     38c:	87 bb       	out	0x17, r24	; 23

    // Set PWM pin (OC0 -> PB3) as output
    PWM_RIGHT_DDR |= (1 << PWM_RIGHT_PIN);
     38e:	bb 9a       	sbi	0x17, 3	; 23

    // Set Timer0 to Fast PWM mode, non-inverting
    TCCR0 = (1 << WGM00) | (1 << WGM01)   // Fast PWM Mode
     390:	8b e6       	ldi	r24, 0x6B	; 107
     392:	83 bf       	out	0x33, r24	; 51
           | (1 << COM01)|            // Non-Inverting Mode
		   (1<<CS01) | (1<<CS00);;   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     394:	88 b3       	in	r24, 0x18	; 24
     396:	8c 7f       	andi	r24, 0xFC	; 252
     398:	88 bb       	out	0x18, r24	; 24
    OCR0 = 0; // 0% duty cycle
     39a:	1c be       	out	0x3c, r1	; 60
}
     39c:	08 95       	ret

0000039e <DC_LEFT_INIT>:
void DC_LEFT_INIT(void){
    // Set IN3 and IN4 as output (خليهم مثلاً PC2 و PC3)
    DC_MOTOR_LEFT_DDR |= (1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2);
     39e:	81 b3       	in	r24, 0x11	; 17
     3a0:	80 66       	ori	r24, 0x60	; 96
     3a2:	81 bb       	out	0x11, r24	; 17

    // Set PWM pin (OC2 -> PD7) as output
    PWM_LEFT_DDR |= (1 << PWM_LEFT_PIN);
     3a4:	8f 9a       	sbi	0x11, 7	; 17

    // Set Timer2 to Fast PWM mode, non-inverting
    TCCR2 = (1 << WGM20) | (1 << WGM21)   // Fast PWM Mode
     3a6:	8c e6       	ldi	r24, 0x6C	; 108
     3a8:	85 bd       	out	0x25, r24	; 37
           | (1 << COM21)|                 // Non-Inverting Mode
		   (1<<CS22);   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     3aa:	82 b3       	in	r24, 0x12	; 18
     3ac:	8f 79       	andi	r24, 0x9F	; 159
     3ae:	82 bb       	out	0x12, r24	; 18
    OCR2 = 0; // 0% duty cycle
     3b0:	13 bc       	out	0x23, r1	; 35


}
     3b2:	08 95       	ret

000003b4 <DC_RIGHT>:

void DC_RIGHT(DcMotor_State state, uint8 speed)
{
     3b4:	28 2f       	mov	r18, r24
    if (speed > 100) speed = 100;

    // Convert % to 8-bit PWM value (0-255)
    OCR0 = (uint8)((speed * 255) / 100);
     3b6:	65 36       	cpi	r22, 0x65	; 101
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <DC_RIGHT+0x8>
     3ba:	64 e6       	ldi	r22, 0x64	; 100
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	68 9f       	mul	r22, r24
     3c0:	c0 01       	movw	r24, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	64 e6       	ldi	r22, 0x64	; 100
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divmodhi4>
     3cc:	6c bf       	out	0x3c, r22	; 60

    switch (state)
     3ce:	21 30       	cpi	r18, 0x01	; 1
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <DC_RIGHT+0x24>
     3d2:	22 30       	cpi	r18, 0x02	; 2
     3d4:	39 f4       	brne	.+14     	; 0x3e4 <DC_RIGHT+0x30>
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <DC_RIGHT+0x2a>
    {
        case CW:
            DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN1);
     3d8:	c0 9a       	sbi	0x18, 0	; 24
            DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN2);
     3da:	c1 98       	cbi	0x18, 1	; 24
     3dc:	08 95       	ret
            break;

        case A_CW:
            DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN2);
     3de:	c1 9a       	sbi	0x18, 1	; 24
            DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN1);
     3e0:	c0 98       	cbi	0x18, 0	; 24
     3e2:	08 95       	ret
            break;

        case STOP:
        default:
            DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     3e4:	88 b3       	in	r24, 0x18	; 24
     3e6:	8c 7f       	andi	r24, 0xFC	; 252
     3e8:	88 bb       	out	0x18, r24	; 24
     3ea:	08 95       	ret

000003ec <DC_LEFT>:
            break;
    }
}
void DC_LEFT(DcMotor_State state, uint8 speed)
{
     3ec:	28 2f       	mov	r18, r24
    if (speed > 100) speed = 100;

    // Convert % to 8-bit PWM value (0-255)
    OCR2 = (uint8)((speed * 255) / 100);
     3ee:	65 36       	cpi	r22, 0x65	; 101
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <DC_LEFT+0x8>
     3f2:	64 e6       	ldi	r22, 0x64	; 100
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	68 9f       	mul	r22, r24
     3f8:	c0 01       	movw	r24, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	64 e6       	ldi	r22, 0x64	; 100
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divmodhi4>
     404:	63 bd       	out	0x23, r22	; 35

    switch (state)
     406:	21 30       	cpi	r18, 0x01	; 1
     408:	19 f0       	breq	.+6      	; 0x410 <DC_LEFT+0x24>
     40a:	22 30       	cpi	r18, 0x02	; 2
     40c:	39 f4       	brne	.+14     	; 0x41c <DC_LEFT+0x30>
     40e:	03 c0       	rjmp	.+6      	; 0x416 <DC_LEFT+0x2a>
    {
        case CW:
            DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN1);
     410:	95 9a       	sbi	0x12, 5	; 18
            DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN2);
     412:	96 98       	cbi	0x12, 6	; 18
     414:	08 95       	ret
            break;
        case A_CW:
            DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN2);
     416:	96 9a       	sbi	0x12, 6	; 18
            DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN1);
     418:	95 98       	cbi	0x12, 5	; 18
     41a:	08 95       	ret
            break;
        case STOP:
        default:
            DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     41c:	82 b3       	in	r24, 0x12	; 18
     41e:	8f 79       	andi	r24, 0x9F	; 159
     420:	82 bb       	out	0x12, r24	; 18
     422:	08 95       	ret

00000424 <IR1_init>:
#include "IR_sensor.h"

// ==== INIT Functions ====
void IR1_init(void){ IR_DDR &= ~(1<<IR1_PIN); }
     424:	a0 98       	cbi	0x14, 0	; 20
     426:	08 95       	ret

00000428 <IR2_init>:
void IR2_init(void){ IR_DDR &= ~(1<<IR2_PIN); }
     428:	a1 98       	cbi	0x14, 1	; 20
     42a:	08 95       	ret

0000042c <IR3_init>:
void IR3_init(void){ IR_DDR &= ~(1<<IR3_PIN); }
     42c:	a2 98       	cbi	0x14, 2	; 20
     42e:	08 95       	ret

00000430 <IR6_init>:
void IR6_init(void){ IR_DDR &= ~(1<<IR6_PIN); }
     430:	a5 98       	cbi	0x14, 5	; 20
     432:	08 95       	ret

00000434 <IR7_init>:
void IR7_init(void){ IR_DDR &= ~(1<<IR7_PIN); }
     434:	a6 98       	cbi	0x14, 6	; 20
     436:	08 95       	ret

00000438 <IR8_init>:
void IR8_init(void){ IR_DDR &= ~(1<<IR8_PIN); }
     438:	a7 98       	cbi	0x14, 7	; 20
     43a:	08 95       	ret

0000043c <IR1_getState>:

// ==== GET STATE Functions ====
uint8 IR1_getState(void){ return (IR_PIN_REG & (1<<IR1_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     43c:	83 b3       	in	r24, 0x13	; 19
     43e:	81 70       	andi	r24, 0x01	; 1
     440:	08 95       	ret

00000442 <IR2_getState>:
uint8 IR2_getState(void){ return (IR_PIN_REG & (1<<IR2_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     442:	83 b3       	in	r24, 0x13	; 19
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	96 95       	lsr	r25
     448:	87 95       	ror	r24
     44a:	81 70       	andi	r24, 0x01	; 1
     44c:	08 95       	ret

0000044e <IR3_getState>:
uint8 IR3_getState(void){ return (IR_PIN_REG & (1<<IR3_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     44e:	83 b3       	in	r24, 0x13	; 19
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	81 70       	andi	r24, 0x01	; 1
     45c:	08 95       	ret

0000045e <IR6_getState>:
uint8 IR6_getState(void){ return (IR_PIN_REG & (1<<IR6_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     45e:	83 b3       	in	r24, 0x13	; 19
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	45 e0       	ldi	r20, 0x05	; 5
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	4a 95       	dec	r20
     46a:	e1 f7       	brne	.-8      	; 0x464 <IR6_getState+0x6>
     46c:	81 70       	andi	r24, 0x01	; 1
     46e:	08 95       	ret

00000470 <IR7_getState>:
uint8 IR7_getState(void){ return (IR_PIN_REG & (1<<IR7_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     470:	83 b3       	in	r24, 0x13	; 19
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	56 e0       	ldi	r21, 0x06	; 6
     476:	96 95       	lsr	r25
     478:	87 95       	ror	r24
     47a:	5a 95       	dec	r21
     47c:	e1 f7       	brne	.-8      	; 0x476 <IR7_getState+0x6>
     47e:	81 70       	andi	r24, 0x01	; 1
     480:	08 95       	ret

00000482 <IR8_getState>:
uint8 IR8_getState(void){ return (IR_PIN_REG & (1<<IR8_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     482:	83 b3       	in	r24, 0x13	; 19
     484:	88 1f       	adc	r24, r24
     486:	88 27       	eor	r24, r24
     488:	88 1f       	adc	r24, r24
     48a:	08 95       	ret

0000048c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a2:	e0 ea       	ldi	r30, 0xA0	; 160
     4a4:	ee 2e       	mov	r14, r30
     4a6:	ef e0       	ldi	r30, 0x0F	; 15
     4a8:	fe 2e       	mov	r15, r30
     4aa:	c7 01       	movw	r24, r14
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_displayCharacter+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     4ba:	c7 01       	movw	r24, r14
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_displayCharacter+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
     4c0:	0d 2d       	mov	r16, r13
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	a8 01       	movw	r20, r16
     4c6:	40 71       	andi	r20, 0x10	; 16
     4c8:	50 70       	andi	r21, 0x00	; 0
     4ca:	74 e0       	ldi	r23, 0x04	; 4
     4cc:	55 95       	asr	r21
     4ce:	47 95       	ror	r20
     4d0:	7a 95       	dec	r23
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <LCD_displayCharacter+0x40>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	63 e0       	ldi	r22, 0x03	; 3
     4d8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
     4dc:	a8 01       	movw	r20, r16
     4de:	40 72       	andi	r20, 0x20	; 32
     4e0:	50 70       	andi	r21, 0x00	; 0
     4e2:	65 e0       	ldi	r22, 0x05	; 5
     4e4:	55 95       	asr	r21
     4e6:	47 95       	ror	r20
     4e8:	6a 95       	dec	r22
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <LCD_displayCharacter+0x58>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	64 e0       	ldi	r22, 0x04	; 4
     4f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
     4f4:	a8 01       	movw	r20, r16
     4f6:	40 74       	andi	r20, 0x40	; 64
     4f8:	50 70       	andi	r21, 0x00	; 0
     4fa:	36 e0       	ldi	r19, 0x06	; 6
     4fc:	55 95       	asr	r21
     4fe:	47 95       	ror	r20
     500:	3a 95       	dec	r19
     502:	e1 f7       	brne	.-8      	; 0x4fc <LCD_displayCharacter+0x70>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	65 e0       	ldi	r22, 0x05	; 5
     508:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
     50c:	4d 2d       	mov	r20, r13
     50e:	44 1f       	adc	r20, r20
     510:	44 27       	eor	r20, r20
     512:	44 1f       	adc	r20, r20
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	66 e0       	ldi	r22, 0x06	; 6
     518:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     51c:	c7 01       	movw	r24, r14
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <LCD_displayCharacter+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     52c:	c7 01       	movw	r24, r14
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <LCD_displayCharacter+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     53c:	c7 01       	movw	r24, r14
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <LCD_displayCharacter+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	d8 22       	and	r13, r24
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	63 e0       	ldi	r22, 0x03	; 3
     54a:	4d 2d       	mov	r20, r13
     54c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
     550:	a8 01       	movw	r20, r16
     552:	42 70       	andi	r20, 0x02	; 2
     554:	50 70       	andi	r21, 0x00	; 0
     556:	55 95       	asr	r21
     558:	47 95       	ror	r20
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
     562:	a8 01       	movw	r20, r16
     564:	44 70       	andi	r20, 0x04	; 4
     566:	50 70       	andi	r21, 0x00	; 0
     568:	55 95       	asr	r21
     56a:	47 95       	ror	r20
     56c:	55 95       	asr	r21
     56e:	47 95       	ror	r20
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	65 e0       	ldi	r22, 0x05	; 5
     574:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
     578:	08 70       	andi	r16, 0x08	; 8
     57a:	10 70       	andi	r17, 0x00	; 0
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	15 95       	asr	r17
     580:	07 95       	ror	r16
     582:	8a 95       	dec	r24
     584:	e1 f7       	brne	.-8      	; 0x57e <LCD_displayCharacter+0xf2>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	66 e0       	ldi	r22, 0x06	; 6
     58a:	40 2f       	mov	r20, r16
     58c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     590:	c7 01       	movw	r24, r14
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <LCD_displayCharacter+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     5a0:	c7 01       	movw	r24, r14
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_displayCharacter+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	08 95       	ret

000005b2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <LCD_displayString+0x12>
	uint8 i = 0;
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
     5be:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_displayCharacter>
		i++;
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     5c4:	fe 01       	movw	r30, r28
     5c6:	e1 0f       	add	r30, r17
     5c8:	f1 1d       	adc	r31, r1
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	b9 f7       	brne	.-18     	; 0x5be <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	08 95       	ret

000005d8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	60 97       	sbiw	r28, 0x10	; 16
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     5f0:	8e 01       	movw	r16, r28
     5f2:	0f 5f       	subi	r16, 0xFF	; 255
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	b8 01       	movw	r22, r16
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 37 0a 	call	0x146e	; 0x146e <itoa>
   LCD_displayString(buff); /* Display the string */
     600:	c8 01       	movw	r24, r16
     602:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_displayString>
}
     606:	60 96       	adiw	r28, 0x10	; 16
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     632:	30 ea       	ldi	r19, 0xA0	; 160
     634:	e3 2e       	mov	r14, r19
     636:	3f e0       	ldi	r19, 0x0F	; 15
     638:	f3 2e       	mov	r15, r19
     63a:	c7 01       	movw	r24, r14
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_sendCommand+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     64a:	c7 01       	movw	r24, r14
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_sendCommand+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
     650:	0d 2d       	mov	r16, r13
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	a8 01       	movw	r20, r16
     656:	40 71       	andi	r20, 0x10	; 16
     658:	50 70       	andi	r21, 0x00	; 0
     65a:	24 e0       	ldi	r18, 0x04	; 4
     65c:	55 95       	asr	r21
     65e:	47 95       	ror	r20
     660:	2a 95       	dec	r18
     662:	e1 f7       	brne	.-8      	; 0x65c <LCD_sendCommand+0x40>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	63 e0       	ldi	r22, 0x03	; 3
     668:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
     66c:	a8 01       	movw	r20, r16
     66e:	40 72       	andi	r20, 0x20	; 32
     670:	50 70       	andi	r21, 0x00	; 0
     672:	95 e0       	ldi	r25, 0x05	; 5
     674:	55 95       	asr	r21
     676:	47 95       	ror	r20
     678:	9a 95       	dec	r25
     67a:	e1 f7       	brne	.-8      	; 0x674 <LCD_sendCommand+0x58>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	64 e0       	ldi	r22, 0x04	; 4
     680:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
     684:	a8 01       	movw	r20, r16
     686:	40 74       	andi	r20, 0x40	; 64
     688:	50 70       	andi	r21, 0x00	; 0
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	55 95       	asr	r21
     68e:	47 95       	ror	r20
     690:	8a 95       	dec	r24
     692:	e1 f7       	brne	.-8      	; 0x68c <LCD_sendCommand+0x70>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	65 e0       	ldi	r22, 0x05	; 5
     698:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
     69c:	4d 2d       	mov	r20, r13
     69e:	44 1f       	adc	r20, r20
     6a0:	44 27       	eor	r20, r20
     6a2:	44 1f       	adc	r20, r20
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	66 e0       	ldi	r22, 0x06	; 6
     6a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     6ac:	c7 01       	movw	r24, r14
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_sendCommand+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	62 e0       	ldi	r22, 0x02	; 2
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     6bc:	c7 01       	movw	r24, r14
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_sendCommand+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     6cc:	c7 01       	movw	r24, r14
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <LCD_sendCommand+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	d8 22       	and	r13, r24
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	63 e0       	ldi	r22, 0x03	; 3
     6da:	4d 2d       	mov	r20, r13
     6dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
     6e0:	a8 01       	movw	r20, r16
     6e2:	42 70       	andi	r20, 0x02	; 2
     6e4:	50 70       	andi	r21, 0x00	; 0
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	64 e0       	ldi	r22, 0x04	; 4
     6ee:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
     6f2:	a8 01       	movw	r20, r16
     6f4:	44 70       	andi	r20, 0x04	; 4
     6f6:	50 70       	andi	r21, 0x00	; 0
     6f8:	55 95       	asr	r21
     6fa:	47 95       	ror	r20
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	65 e0       	ldi	r22, 0x05	; 5
     704:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
     708:	08 70       	andi	r16, 0x08	; 8
     70a:	10 70       	andi	r17, 0x00	; 0
     70c:	f3 e0       	ldi	r31, 0x03	; 3
     70e:	15 95       	asr	r17
     710:	07 95       	ror	r16
     712:	fa 95       	dec	r31
     714:	e1 f7       	brne	.-8      	; 0x70e <LCD_sendCommand+0xf2>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	66 e0       	ldi	r22, 0x06	; 6
     71a:	40 2f       	mov	r20, r16
     71c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     720:	c7 01       	movw	r24, r14
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LCD_sendCommand+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPIO_writePin>
     730:	c7 01       	movw	r24, r14
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <LCD_sendCommand+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	08 95       	ret

00000742 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
}
     748:	08 95       	ret

0000074a <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	39 f0       	breq	.+14     	; 0x75c <LCD_moveCursor+0x12>
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	50 f0       	brcs	.+20     	; 0x766 <LCD_moveCursor+0x1c>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	29 f0       	breq	.+10     	; 0x760 <LCD_moveCursor+0x16>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	31 f4       	brne	.+12     	; 0x766 <LCD_moveCursor+0x1c>
     75a:	04 c0       	rjmp	.+8      	; 0x764 <LCD_moveCursor+0x1a>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
     75c:	60 5c       	subi	r22, 0xC0	; 192
     75e:	03 c0       	rjmp	.+6      	; 0x766 <LCD_moveCursor+0x1c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
     760:	60 5f       	subi	r22, 0xF0	; 240
     762:	01 c0       	rjmp	.+2      	; 0x766 <LCD_moveCursor+0x1c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
     764:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     766:	86 2f       	mov	r24, r22
     768:	80 68       	ori	r24, 0x80	; 128
     76a:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
}
     76e:	08 95       	ret

00000770 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     776:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_displayString>
}
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>
     79a:	88 ec       	ldi	r24, 0xC8	; 200
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	20 e9       	ldi	r18, 0x90	; 144
     7a0:	31 e0       	ldi	r19, 0x01	; 1
     7a2:	f9 01       	movw	r30, r18
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_init+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7aa:	d9 f7       	brne	.-10     	; 0x7a2 <LCD_init+0x1c>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	63 e0       	ldi	r22, 0x03	; 3
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	64 e0       	ldi	r22, 0x04	; 4
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	66 e0       	ldi	r22, 0x06	; 6
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
     7d4:	83 e3       	ldi	r24, 0x33	; 51
     7d6:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
     7da:	82 e3       	ldi	r24, 0x32	; 50
     7dc:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
     7e0:	88 e2       	ldi	r24, 0x28	; 40
     7e2:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     7e6:	8c e0       	ldi	r24, 0x0C	; 12
     7e8:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_sendCommand>
}
     7f2:	08 95       	ret

000007f4 <floodfill>:

    return updated;
}

// ---------- FloodFill (BFS distances from center cells) ----------
void floodfill(void) {
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	28 97       	sbiw	r28, 0x08	; 8
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	2e e2       	ldi	r18, 0x2E	; 46
     81e:	33 e0       	ldi	r19, 0x03	; 3
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            distance[x][y] = 255;
     824:	4f ef       	ldi	r20, 0xFF	; 255
     826:	0b c0       	rjmp	.+22     	; 0x83e <floodfill+0x4a>
     828:	41 93       	st	Z+, r20
}

// ---------- FloodFill (BFS distances from center cells) ----------
void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
     82a:	e2 17       	cp	r30, r18
     82c:	f3 07       	cpc	r31, r19
     82e:	e1 f7       	brne	.-8      	; 0x828 <floodfill+0x34>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	9f 01       	movw	r18, r30
     834:	20 5f       	subi	r18, 0xF0	; 240
     836:	3f 4f       	sbci	r19, 0xFF	; 255
    return updated;
}

// ---------- FloodFill (BFS distances from center cells) ----------
void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
     838:	80 31       	cpi	r24, 0x10	; 16
     83a:	91 05       	cpc	r25, r1
     83c:	49 f0       	breq	.+18     	; 0x850 <floodfill+0x5c>
     83e:	fc 01       	movw	r30, r24
     840:	b4 e0       	ldi	r27, 0x04	; 4
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ba 95       	dec	r27
     848:	e1 f7       	brne	.-8      	; 0x842 <floodfill+0x4e>
     84a:	e2 5e       	subi	r30, 0xE2	; 226
     84c:	fc 4f       	sbci	r31, 0xFC	; 252
     84e:	ec cf       	rjmp	.-40     	; 0x828 <floodfill+0x34>
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            distance[x][y] = 255;

    uint8 center_x[4] = {7,7,8,8};
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	99 83       	std	Y+1, r25	; 0x01
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	8b 83       	std	Y+3, r24	; 0x03
     85a:	8c 83       	std	Y+4, r24	; 0x04
    uint8 center_y[4] = {7,8,7,8};
     85c:	9d 83       	std	Y+5, r25	; 0x05
     85e:	8e 83       	std	Y+6, r24	; 0x06
     860:	9f 83       	std	Y+7, r25	; 0x07
     862:	88 87       	std	Y+8, r24	; 0x08
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
    uint16 front = 0, rear = 0;

    for (uint8 i = 0; i < 4; i++) {
        distance[center_x[i]][center_y[i]] = 0;
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	9e 01       	movw	r18, r28
     870:	2b 5f       	subi	r18, 0xFB	; 251
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	fb 01       	movw	r30, r22
     876:	e4 0f       	add	r30, r20
     878:	f5 1f       	adc	r31, r21
     87a:	80 81       	ld	r24, Z
     87c:	f9 01       	movw	r30, r18
     87e:	e4 0f       	add	r30, r20
     880:	f5 1f       	adc	r31, r21
     882:	90 81       	ld	r25, Z
     884:	e8 2f       	mov	r30, r24
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	a4 e0       	ldi	r26, 0x04	; 4
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	aa 95       	dec	r26
     890:	e1 f7       	brne	.-8      	; 0x88a <__stack+0x2b>
     892:	e9 0f       	add	r30, r25
     894:	f1 1d       	adc	r31, r1
     896:	e2 5e       	subi	r30, 0xE2	; 226
     898:	fc 4f       	sbci	r31, 0xFC	; 252
     89a:	10 82       	st	Z, r1
        queue_x[rear] = center_x[i];
     89c:	fa 01       	movw	r30, r20
     89e:	e2 5e       	subi	r30, 0xE2	; 226
     8a0:	fa 4f       	sbci	r31, 0xFA	; 250
     8a2:	80 83       	st	Z, r24
        queue_y[rear] = center_y[i];
     8a4:	fa 01       	movw	r30, r20
     8a6:	e2 5e       	subi	r30, 0xE2	; 226
     8a8:	fd 4f       	sbci	r31, 0xFD	; 253
     8aa:	90 83       	st	Z, r25
        rear++;
     8ac:	4f 5f       	subi	r20, 0xFF	; 255
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255

    uint8 center_x[4] = {7,7,8,8};
    uint8 center_y[4] = {7,8,7,8};
    uint16 front = 0, rear = 0;

    for (uint8 i = 0; i < 4; i++) {
     8b0:	44 30       	cpi	r20, 0x04	; 4
     8b2:	51 05       	cpc	r21, r1
     8b4:	f9 f6       	brne	.-66     	; 0x874 <__stack+0x15>
     8b6:	cc 24       	eor	r12, r12
     8b8:	dd 24       	eor	r13, r13
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
        uint8 x = queue_x[front];
     8ba:	f6 01       	movw	r30, r12
     8bc:	e2 5e       	subi	r30, 0xE2	; 226
     8be:	fa 4f       	sbci	r31, 0xFA	; 250
     8c0:	90 81       	ld	r25, Z
        uint8 y = queue_y[front];
     8c2:	f6 01       	movw	r30, r12
     8c4:	e2 5e       	subi	r30, 0xE2	; 226
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253
     8c8:	80 81       	ld	r24, Z
     8ca:	ee 24       	eor	r14, r14
     8cc:	ff 24       	eor	r15, r15
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     8ce:	89 2e       	mov	r8, r25
     8d0:	99 24       	eor	r9, r9
            int ny = y + dy[dir];
     8d2:	a8 2e       	mov	r10, r24
     8d4:	bb 24       	eor	r11, r11
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
                maze[nx][ny] == 0 && distance[nx][ny] == 255) {
                distance[nx][ny] = distance[x][y] + 1;
     8d6:	84 01       	movw	r16, r8
     8d8:	94 e0       	ldi	r25, 0x04	; 4
     8da:	00 0f       	add	r16, r16
     8dc:	11 1f       	adc	r17, r17
     8de:	9a 95       	dec	r25
     8e0:	e1 f7       	brne	.-8      	; 0x8da <__stack+0x7b>
     8e2:	0a 0d       	add	r16, r10
     8e4:	1b 1d       	adc	r17, r11
     8e6:	02 5e       	subi	r16, 0xE2	; 226
     8e8:	1c 4f       	sbci	r17, 0xFC	; 252
    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     8ea:	f7 01       	movw	r30, r14
     8ec:	ea 50       	subi	r30, 0x0A	; 10
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	a0 81       	ld	r26, Z
     8f2:	b1 81       	ldd	r27, Z+1	; 0x01
     8f4:	a8 0d       	add	r26, r8
     8f6:	b9 1d       	adc	r27, r9
            int ny = y + dy[dir];
     8f8:	f7 01       	movw	r30, r14
     8fa:	e2 50       	subi	r30, 0x02	; 2
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	01 90       	ld	r0, Z+
     900:	f0 81       	ld	r31, Z
     902:	e0 2d       	mov	r30, r0
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
     904:	a0 31       	cpi	r26, 0x10	; 16
     906:	b1 05       	cpc	r27, r1
     908:	58 f5       	brcc	.+86     	; 0x960 <__stack+0x101>
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
     90a:	b5 01       	movw	r22, r10
     90c:	6e 0f       	add	r22, r30
     90e:	7f 1f       	adc	r23, r31
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
     910:	77 fd       	sbrc	r23, 7
     912:	26 c0       	rjmp	.+76     	; 0x960 <__stack+0x101>
     914:	60 31       	cpi	r22, 0x10	; 16
     916:	71 05       	cpc	r23, r1
     918:	1c f5       	brge	.+70     	; 0x960 <__stack+0x101>
     91a:	9d 01       	movw	r18, r26
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	8a 95       	dec	r24
     924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0xbf>
     926:	26 0f       	add	r18, r22
     928:	37 1f       	adc	r19, r23
     92a:	f9 01       	movw	r30, r18
     92c:	e2 5e       	subi	r30, 0xE2	; 226
     92e:	fb 4f       	sbci	r31, 0xFB	; 251
     930:	80 81       	ld	r24, Z
     932:	88 23       	and	r24, r24
     934:	a9 f4       	brne	.+42     	; 0x960 <__stack+0x101>
     936:	22 5e       	subi	r18, 0xE2	; 226
     938:	3c 4f       	sbci	r19, 0xFC	; 252
     93a:	f9 01       	movw	r30, r18
     93c:	80 81       	ld	r24, Z
     93e:	8f 3f       	cpi	r24, 0xFF	; 255
     940:	79 f4       	brne	.+30     	; 0x960 <__stack+0x101>
                maze[nx][ny] == 0 && distance[nx][ny] == 255) {
                distance[nx][ny] = distance[x][y] + 1;
     942:	f8 01       	movw	r30, r16
     944:	80 81       	ld	r24, Z
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	f9 01       	movw	r30, r18
     94a:	80 83       	st	Z, r24
                queue_x[rear] = nx;
     94c:	fa 01       	movw	r30, r20
     94e:	e2 5e       	subi	r30, 0xE2	; 226
     950:	fa 4f       	sbci	r31, 0xFA	; 250
     952:	a0 83       	st	Z, r26
                queue_y[rear] = ny;
     954:	fa 01       	movw	r30, r20
     956:	e2 5e       	subi	r30, 0xE2	; 226
     958:	fd 4f       	sbci	r31, 0xFD	; 253
     95a:	60 83       	st	Z, r22
                rear++;
     95c:	4f 5f       	subi	r20, 0xFF	; 255
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	e8 0e       	add	r14, r24
     966:	f9 1e       	adc	r15, r25

    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
     968:	98 e0       	ldi	r25, 0x08	; 8
     96a:	e9 16       	cp	r14, r25
     96c:	f1 04       	cpc	r15, r1
     96e:	09 f0       	breq	.+2      	; 0x972 <__stack+0x113>
     970:	bc cf       	rjmp	.-136    	; 0x8ea <__stack+0x8b>
    }

    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
     972:	08 94       	sec
     974:	c1 1c       	adc	r12, r1
     976:	d1 1c       	adc	r13, r1
        queue_x[rear] = center_x[i];
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
     978:	c4 16       	cp	r12, r20
     97a:	d5 06       	cpc	r13, r21
     97c:	08 f4       	brcc	.+2      	; 0x980 <__stack+0x121>
     97e:	9d cf       	rjmp	.-198    	; 0x8ba <__stack+0x5b>
                queue_y[rear] = ny;
                rear++;
            }
        }
    }
}
     980:	28 96       	adiw	r28, 0x08	; 8
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	08 95       	ret

000009a6 <build_shortest_path>:
    pos_x += dx[heading];
    pos_y += dy[heading];
}

// ---------- بناء أقصر مسار من floodfill بعد الوصول للهدف ----------
void build_shortest_path(int goal_x, int goal_y) {
     9a6:	2f 92       	push	r2
     9a8:	3f 92       	push	r3
     9aa:	4f 92       	push	r4
     9ac:	5f 92       	push	r5
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	c2 50       	subi	r28, 0x02	; 2
     9ce:	d4 40       	sbci	r29, 0x04	; 4
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	cf 5f       	subi	r28, 0xFF	; 255
     9dc:	db 4f       	sbci	r29, 0xFB	; 251
     9de:	99 83       	std	Y+1, r25	; 0x01
     9e0:	88 83       	st	Y, r24
     9e2:	c1 50       	subi	r28, 0x01	; 1
     9e4:	d4 40       	sbci	r29, 0x04	; 4
     9e6:	1b 01       	movw	r2, r22
    path_len = 0;
     9e8:	10 92 15 01 	sts	0x0115, r1
     9ec:	10 92 14 01 	sts	0x0114, r1
    int cx = 0, cy = 0; // البداية
    int gx = goal_x, gy = goal_y;

    // Safety
    if (distance[gx][gy] == 255) return;
     9f0:	fc 01       	movw	r30, r24
     9f2:	a4 e0       	ldi	r26, 0x04	; 4
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	aa 95       	dec	r26
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <build_shortest_path+0x4e>
     9fc:	e6 0f       	add	r30, r22
     9fe:	f7 1f       	adc	r31, r23
     a00:	e2 5e       	subi	r30, 0xE2	; 226
     a02:	fc 4f       	sbci	r31, 0xFC	; 252
     a04:	80 81       	ld	r24, Z
     a06:	8f 3f       	cpi	r24, 0xFF	; 255
     a08:	09 f4       	brne	.+2      	; 0xa0c <build_shortest_path+0x66>
     a0a:	98 c0       	rjmp	.+304    	; 0xb3c <build_shortest_path+0x196>
     a0c:	4e 01       	movw	r8, r28
     a0e:	08 94       	sec
     a10:	81 1c       	adc	r8, r1
     a12:	91 1c       	adc	r9, r1
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	cf 2e       	mov	r12, r31
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	df 2e       	mov	r13, r31
     a1c:	cc 0e       	add	r12, r28
     a1e:	dd 1e       	adc	r13, r29
     a20:	24 01       	movw	r4, r8
     a22:	36 01       	movw	r6, r12
     a24:	ee 24       	eor	r14, r14
     a26:	ff 24       	eor	r15, r15
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	59 c0       	rjmp	.+178    	; 0xae4 <build_shortest_path+0x13e>
     a32:	bb 24       	eor	r11, r11
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
                if (distance[nx][ny] < distance[x][y]) {
     a38:	98 01       	movw	r18, r16
     a3a:	e4 e0       	ldi	r30, 0x04	; 4
     a3c:	22 0f       	add	r18, r18
     a3e:	33 1f       	adc	r19, r19
     a40:	ea 95       	dec	r30
     a42:	e1 f7       	brne	.-8      	; 0xa3c <build_shortest_path+0x96>
     a44:	26 0f       	add	r18, r22
     a46:	37 1f       	adc	r19, r23
     a48:	22 5e       	subi	r18, 0xE2	; 226
     a4a:	3c 4f       	sbci	r19, 0xFC	; 252
    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     a4c:	fa 01       	movw	r30, r20
     a4e:	ea 50       	subi	r30, 0x0A	; 10
     a50:	ff 4f       	sbci	r31, 0xFF	; 255
     a52:	a0 81       	ld	r26, Z
     a54:	b1 81       	ldd	r27, Z+1	; 0x01
     a56:	a0 0f       	add	r26, r16
     a58:	b1 1f       	adc	r27, r17
            int ny = y + dy[dir];
     a5a:	fa 01       	movw	r30, r20
     a5c:	e2 50       	subi	r30, 0x02	; 2
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	01 90       	ld	r0, Z+
     a62:	f0 81       	ld	r31, Z
     a64:	e0 2d       	mov	r30, r0
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     a66:	a0 31       	cpi	r26, 0x10	; 16
     a68:	b1 05       	cpc	r27, r1
     a6a:	a8 f4       	brcc	.+42     	; 0xa96 <build_shortest_path+0xf0>
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
     a6c:	e6 0f       	add	r30, r22
     a6e:	f7 1f       	adc	r31, r23
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     a70:	f7 fd       	sbrc	r31, 7
     a72:	11 c0       	rjmp	.+34     	; 0xa96 <build_shortest_path+0xf0>
     a74:	e0 31       	cpi	r30, 0x10	; 16
     a76:	f1 05       	cpc	r31, r1
     a78:	74 f4       	brge	.+28     	; 0xa96 <build_shortest_path+0xf0>
                if (distance[nx][ny] < distance[x][y]) {
     a7a:	94 e0       	ldi	r25, 0x04	; 4
     a7c:	aa 0f       	add	r26, r26
     a7e:	bb 1f       	adc	r27, r27
     a80:	9a 95       	dec	r25
     a82:	e1 f7       	brne	.-8      	; 0xa7c <build_shortest_path+0xd6>
     a84:	ae 0f       	add	r26, r30
     a86:	bf 1f       	adc	r27, r31
     a88:	a2 5e       	subi	r26, 0xE2	; 226
     a8a:	bc 4f       	sbci	r27, 0xFC	; 252
     a8c:	9c 91       	ld	r25, X
     a8e:	d9 01       	movw	r26, r18
     a90:	8c 91       	ld	r24, X
     a92:	98 17       	cp	r25, r24
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <build_shortest_path+0xfe>

    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
     a96:	b3 94       	inc	r11
     a98:	4e 5f       	subi	r20, 0xFE	; 254
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	b4 e0       	ldi	r27, 0x04	; 4
     a9e:	bb 16       	cp	r11, r27
     aa0:	a9 f6       	brne	.-86     	; 0xa4c <build_shortest_path+0xa6>
     aa2:	2e c0       	rjmp	.+92     	; 0xb00 <build_shortest_path+0x15a>
            }
        }
        if (next_dir == 0xFF) break; // لا يوجد طريق

        // خزّن النقطة التالية في المسار
        temp_path_x[temp_path_len] = x + dx[next_dir];
     aa4:	eb 2d       	mov	r30, r11
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	df 01       	movw	r26, r30
     aae:	aa 50       	subi	r26, 0x0A	; 10
     ab0:	bf 4f       	sbci	r27, 0xFF	; 255
     ab2:	8d 91       	ld	r24, X+
     ab4:	9c 91       	ld	r25, X
     ab6:	08 0f       	add	r16, r24
     ab8:	19 1f       	adc	r17, r25
     aba:	d2 01       	movw	r26, r4
     abc:	0d 93       	st	X+, r16
     abe:	1d 93       	st	X+, r17
     ac0:	2d 01       	movw	r4, r26
        temp_path_y[temp_path_len] = y + dy[next_dir];
     ac2:	e2 50       	subi	r30, 0x02	; 2
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	68 0f       	add	r22, r24
     acc:	79 1f       	adc	r23, r25
     ace:	f3 01       	movw	r30, r6
     ad0:	61 93       	st	Z+, r22
     ad2:	71 93       	st	Z+, r23
     ad4:	3f 01       	movw	r6, r30
        path_dir[temp_path_len] = next_dir;
     ad6:	f7 01       	movw	r30, r14
     ad8:	e2 5e       	subi	r30, 0xE2	; 226
     ada:	f9 4f       	sbci	r31, 0xF9	; 249
     adc:	b0 82       	st	Z, r11
        temp_path_len++;
     ade:	08 94       	sec
     ae0:	e1 1c       	adc	r14, r1
     ae2:	f1 1c       	adc	r15, r1
    int temp_path_y[MAX_PATH];
    int temp_path_len = 0;

    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
     ae4:	cf 5f       	subi	r28, 0xFF	; 255
     ae6:	db 4f       	sbci	r29, 0xFB	; 251
     ae8:	88 81       	ld	r24, Y
     aea:	99 81       	ldd	r25, Y+1	; 0x01
     aec:	c1 50       	subi	r28, 0x01	; 1
     aee:	d4 40       	sbci	r29, 0x04	; 4
     af0:	08 17       	cp	r16, r24
     af2:	19 07       	cpc	r17, r25
     af4:	09 f0       	breq	.+2      	; 0xaf8 <build_shortest_path+0x152>
     af6:	9d cf       	rjmp	.-198    	; 0xa32 <build_shortest_path+0x8c>
     af8:	62 15       	cp	r22, r2
     afa:	73 05       	cpc	r23, r3
     afc:	09 f0       	breq	.+2      	; 0xb00 <build_shortest_path+0x15a>
     afe:	99 cf       	rjmp	.-206    	; 0xa32 <build_shortest_path+0x8c>
        x += dx[next_dir];
        y += dy[next_dir];
    }

    // انسخ المؤقت للمصفوفة النهائية
    path_len = temp_path_len;
     b00:	f0 92 15 01 	sts	0x0115, r15
     b04:	e0 92 14 01 	sts	0x0114, r14
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <build_shortest_path+0x190>
    for (int i = 0; i < path_len; i++) {
        path_x[i] = temp_path_x[i];
     b0e:	f9 01       	movw	r30, r18
     b10:	e2 5e       	subi	r30, 0xE2	; 226
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	d4 01       	movw	r26, r8
     b16:	8c 91       	ld	r24, X
     b18:	80 83       	st	Z, r24
        path_y[i] = temp_path_y[i];
     b1a:	f9 01       	movw	r30, r18
     b1c:	e2 5e       	subi	r30, 0xE2	; 226
     b1e:	f8 4f       	sbci	r31, 0xF8	; 248
     b20:	d6 01       	movw	r26, r12
     b22:	8c 91       	ld	r24, X
     b24:	80 83       	st	Z, r24
        y += dy[next_dir];
    }

    // انسخ المؤقت للمصفوفة النهائية
    path_len = temp_path_len;
    for (int i = 0; i < path_len; i++) {
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	e2 e0       	ldi	r30, 0x02	; 2
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	8e 0e       	add	r8, r30
     b30:	9f 1e       	adc	r9, r31
     b32:	ce 0e       	add	r12, r30
     b34:	df 1e       	adc	r13, r31
     b36:	2e 15       	cp	r18, r14
     b38:	3f 05       	cpc	r19, r15
     b3a:	48 f3       	brcs	.-46     	; 0xb0e <build_shortest_path+0x168>
        path_x[i] = temp_path_x[i];
        path_y[i] = temp_path_y[i];
    }
}
     b3c:	ce 5f       	subi	r28, 0xFE	; 254
     b3e:	db 4f       	sbci	r29, 0xFB	; 251
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	9f 90       	pop	r9
     b5e:	8f 90       	pop	r8
     b60:	7f 90       	pop	r7
     b62:	6f 90       	pop	r6
     b64:	5f 90       	pop	r5
     b66:	4f 90       	pop	r4
     b68:	3f 90       	pop	r3
     b6a:	2f 90       	pop	r2
     b6c:	08 95       	ret

00000b6e <choose_next_direction>:
        }
    }
}

// ---------- أختيار الاتجاه الأفضل حسب FloodFill ----------
uint8 choose_next_direction(void) {
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
    uint8 best_dir = heading;
     b74:	10 91 13 01 	lds	r17, 0x0113
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
     b78:	c0 91 0f 01 	lds	r28, 0x010F
     b7c:	d0 91 10 01 	lds	r29, 0x0110
        int ny = pos_y + dy[dir];
     b80:	60 91 11 01 	lds	r22, 0x0111
     b84:	70 91 12 01 	lds	r23, 0x0112
     b88:	5f ef       	ldi	r21, 0xFF	; 255
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
// ---------- أختيار الاتجاه الأفضل حسب FloodFill ----------
uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
     b90:	f9 01       	movw	r30, r18
     b92:	ea 50       	subi	r30, 0x0A	; 10
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	8c 0f       	add	r24, r28
     b9c:	9d 1f       	adc	r25, r29
        int ny = pos_y + dy[dir];
     b9e:	f9 01       	movw	r30, r18
     ba0:	e2 50       	subi	r30, 0x02	; 2
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	01 90       	ld	r0, Z+
     ba6:	f0 81       	ld	r31, Z
     ba8:	e0 2d       	mov	r30, r0
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     baa:	80 31       	cpi	r24, 0x10	; 16
     bac:	91 05       	cpc	r25, r1
     bae:	e0 f4       	brcc	.+56     	; 0xbe8 <choose_next_direction+0x7a>
uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
        int ny = pos_y + dy[dir];
     bb0:	e6 0f       	add	r30, r22
     bb2:	f7 1f       	adc	r31, r23
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     bb4:	f7 fd       	sbrc	r31, 7
     bb6:	18 c0       	rjmp	.+48     	; 0xbe8 <choose_next_direction+0x7a>
     bb8:	e0 31       	cpi	r30, 0x10	; 16
     bba:	f1 05       	cpc	r31, r1
     bbc:	ac f4       	brge	.+42     	; 0xbe8 <choose_next_direction+0x7a>
            if (maze[nx][ny] == 0 && distance[nx][ny] < min_dist) {
     bbe:	dc 01       	movw	r26, r24
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	aa 0f       	add	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	8a 95       	dec	r24
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <choose_next_direction+0x54>
     bca:	ae 0f       	add	r26, r30
     bcc:	bf 1f       	adc	r27, r31
     bce:	fd 01       	movw	r30, r26
     bd0:	e2 5e       	subi	r30, 0xE2	; 226
     bd2:	fb 4f       	sbci	r31, 0xFB	; 251
     bd4:	80 81       	ld	r24, Z
     bd6:	88 23       	and	r24, r24
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <choose_next_direction+0x7a>
     bda:	a2 5e       	subi	r26, 0xE2	; 226
     bdc:	bc 4f       	sbci	r27, 0xFC	; 252
     bde:	ec 91       	ld	r30, X
     be0:	e5 17       	cp	r30, r21
     be2:	10 f4       	brcc	.+4      	; 0xbe8 <choose_next_direction+0x7a>
     be4:	14 2f       	mov	r17, r20
     be6:	01 c0       	rjmp	.+2      	; 0xbea <choose_next_direction+0x7c>
     be8:	e5 2f       	mov	r30, r21

// ---------- أختيار الاتجاه الأفضل حسب FloodFill ----------
uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	2e 5f       	subi	r18, 0xFE	; 254
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	44 30       	cpi	r20, 0x04	; 4
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <choose_next_direction+0x8a>
     bf4:	5e 2f       	mov	r21, r30
     bf6:	cc cf       	rjmp	.-104    	; 0xb90 <choose_next_direction+0x22>
            }
        }
    }

    // إذا لم نجد أي اتجاه صالح
    if (min_dist == 255) {
     bf8:	ef 3f       	cpi	r30, 0xFF	; 255
     bfa:	39 f4       	brne	.+14     	; 0xc0a <choose_next_direction+0x9c>
        LCD_clearScreen();
     bfc:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_clearScreen>
        LCD_displayString(" SYSTEM ERROR ");
     c00:	80 e6       	ldi	r24, 0x60	; 96
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_displayString>
     c08:	ff cf       	rjmp	.-2      	; 0xc08 <choose_next_direction+0x9a>
            // توقف الروبوت نهائيًا
        }
    }

    return best_dir;
}
     c0a:	81 2f       	mov	r24, r17
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	08 95       	ret

00000c14 <move_forward_one_cell>:
    _delay_ms(200);
}

void move_forward_one_cell(void) {
    // محركان للأمام لزمن محدد (عدّل _delay_ms إذا احتجت)
    DC_RIGHT(CW, 100);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	64 e6       	ldi	r22, 0x64	; 100
     c18:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
    DC_LEFT(CW, 100);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	64 e6       	ldi	r22, 0x64	; 100
     c20:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
     c24:	80 e1       	ldi	r24, 0x10	; 16
     c26:	97 e2       	ldi	r25, 0x27	; 39
     c28:	20 e9       	ldi	r18, 0x90	; 144
     c2a:	31 e0       	ldi	r19, 0x01	; 1
     c2c:	f9 01       	movw	r30, r18
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <move_forward_one_cell+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	d9 f7       	brne	.-10     	; 0xc2c <move_forward_one_cell+0x18>
    _delay_ms(1000); // زمن عبور خلية واحدة (اضبطه عملياً)
    DC_RIGHT(CW, 0);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
    DC_LEFT(CW, 0);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
     c46:	80 ed       	ldi	r24, 0xD0	; 208
     c48:	97 e0       	ldi	r25, 0x07	; 7
     c4a:	20 e9       	ldi	r18, 0x90	; 144
     c4c:	31 e0       	ldi	r19, 0x01	; 1
     c4e:	f9 01       	movw	r30, r18
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <move_forward_one_cell+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c56:	d9 f7       	brne	.-10     	; 0xc4e <move_forward_one_cell+0x3a>
    _delay_ms(200);

    // حدّث الاحداثيات
    pos_x += dx[heading];
     c58:	e0 91 13 01 	lds	r30, 0x0113
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	df 01       	movw	r26, r30
     c64:	aa 50       	subi	r26, 0x0A	; 10
     c66:	bf 4f       	sbci	r27, 0xFF	; 255
     c68:	80 91 0f 01 	lds	r24, 0x010F
     c6c:	90 91 10 01 	lds	r25, 0x0110
     c70:	2d 91       	ld	r18, X+
     c72:	3c 91       	ld	r19, X
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	90 93 10 01 	sts	0x0110, r25
     c7c:	80 93 0f 01 	sts	0x010F, r24
    pos_y += dy[heading];
     c80:	e2 50       	subi	r30, 0x02	; 2
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 91 11 01 	lds	r24, 0x0111
     c88:	90 91 12 01 	lds	r25, 0x0112
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	90 93 12 01 	sts	0x0112, r25
     c98:	80 93 11 01 	sts	0x0111, r24
}
     c9c:	08 95       	ret

00000c9e <rotate_to_dir>:


// ---------- تحريك الموتورات: دوران لمقصد معين + خطوة لقدّام ----------
void rotate_to_dir(uint8 target_dir) {
    // حساب الفرق (0 = already aligned, 1 = +90deg (right), 3 = -90deg (left), 2 = 180deg)
    uint8 diff = (target_dir + 4 - heading) % 4;
     c9e:	90 91 13 01 	lds	r25, 0x0113
     ca2:	24 e0       	ldi	r18, 0x04	; 4
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	29 1b       	sub	r18, r25
     ca8:	31 09       	sbc	r19, r1
     caa:	a9 01       	movw	r20, r18
     cac:	48 0f       	add	r20, r24
     cae:	51 1d       	adc	r21, r1
     cb0:	ca 01       	movw	r24, r20
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divmodhi4>
    if (diff == 0) return;
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <rotate_to_dir+0x22>
     cbe:	6b c0       	rjmp	.+214    	; 0xd96 <rotate_to_dir+0xf8>

    if (diff == 1) {
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	d9 f4       	brne	.+54     	; 0xcfa <rotate_to_dir+0x5c>
        // دور يمين
        DC_RIGHT(CW, 0);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
        DC_LEFT(CW, 100);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	64 e6       	ldi	r22, 0x64	; 100
     cce:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
        LCD_displayStringRowColumn(0,0," YEMEN ");
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	4f e6       	ldi	r20, 0x6F	; 111
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
     cde:	80 e1       	ldi	r24, 0x10	; 16
     ce0:	97 e2       	ldi	r25, 0x27	; 39
     ce2:	20 e9       	ldi	r18, 0x90	; 144
     ce4:	31 e0       	ldi	r19, 0x01	; 1
     ce6:	f9 01       	movw	r30, r18
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <rotate_to_dir+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	d9 f7       	brne	.-10     	; 0xce6 <rotate_to_dir+0x48>

        _delay_ms(1000); // زمن الدوران: عدّل حسب تجاربك
        heading = (heading + 1) % 4;
     cf0:	80 91 13 01 	lds	r24, 0x0113
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	39 c0       	rjmp	.+114    	; 0xd6c <rotate_to_dir+0xce>
    } else if (diff == 3) {
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	e1 f4       	brne	.+56     	; 0xd36 <rotate_to_dir+0x98>
        // دور شمال (left)
        DC_RIGHT(CW, 100);
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	64 e6       	ldi	r22, 0x64	; 100
     d02:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
        DC_LEFT(CW, 0);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
        LCD_displayStringRowColumn(0,0," SHMAL ");
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	47 e7       	ldi	r20, 0x77	; 119
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
     d1a:	80 e1       	ldi	r24, 0x10	; 16
     d1c:	97 e2       	ldi	r25, 0x27	; 39
     d1e:	20 e9       	ldi	r18, 0x90	; 144
     d20:	31 e0       	ldi	r19, 0x01	; 1
     d22:	f9 01       	movw	r30, r18
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <rotate_to_dir+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2a:	d9 f7       	brne	.-10     	; 0xd22 <rotate_to_dir+0x84>

        _delay_ms(1000);
        heading = (heading + 3) % 4;
     d2c:	80 91 13 01 	lds	r24, 0x0113
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	03 96       	adiw	r24, 0x03	; 3
     d34:	1b c0       	rjmp	.+54     	; 0xd6c <rotate_to_dir+0xce>
    } else { // diff == 2
        // دوران 180
        DC_RIGHT(CW, 100);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	64 e6       	ldi	r22, 0x64	; 100
     d3a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
        DC_LEFT(A_CW, 100);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	64 e6       	ldi	r22, 0x64	; 100
     d42:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
        LCD_displayStringRowColumn(0,0," BLF ");
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	4f e7       	ldi	r20, 0x7F	; 127
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
     d52:	80 e2       	ldi	r24, 0x20	; 32
     d54:	9e e4       	ldi	r25, 0x4E	; 78
     d56:	20 e9       	ldi	r18, 0x90	; 144
     d58:	31 e0       	ldi	r19, 0x01	; 1
     d5a:	f9 01       	movw	r30, r18
     d5c:	31 97       	sbiw	r30, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <rotate_to_dir+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	d9 f7       	brne	.-10     	; 0xd5a <rotate_to_dir+0xbc>

        _delay_ms(2000);
        heading = (heading + 2) % 4;
     d64:	80 91 13 01 	lds	r24, 0x0113
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 96       	adiw	r24, 0x02	; 2
     d6c:	83 70       	andi	r24, 0x03	; 3
     d6e:	90 70       	andi	r25, 0x00	; 0
     d70:	80 93 13 01 	sts	0x0113, r24
    }
    // اوقف الموتور بعد دوران
    DC_RIGHT(CW, 0);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
    DC_LEFT(CW, 0);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>
     d84:	80 ed       	ldi	r24, 0xD0	; 208
     d86:	97 e0       	ldi	r25, 0x07	; 7
     d88:	20 e9       	ldi	r18, 0x90	; 144
     d8a:	31 e0       	ldi	r19, 0x01	; 1
     d8c:	f9 01       	movw	r30, r18
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <rotate_to_dir+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	d9 f7       	brne	.-10     	; 0xd8c <rotate_to_dir+0xee>
     d96:	08 95       	ret

00000d98 <replay_path>:
        path_y[i] = temp_path_y[i];
    }
}

// ---------- إعادة التشغيل (REPLAY) باستخدام المسار المحسوب فقط ----------
void replay_path(void) {
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	1f 93       	push	r17
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	61 97       	sbiw	r28, 0x11	; 17
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
     dc2:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_clearScreen>
    LCD_displayString("REPLAYING...");
     dc6:	85 e8       	ldi	r24, 0x85	; 133
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_displayString>
     dce:	88 eb       	ldi	r24, 0xB8	; 184
     dd0:	9b e0       	ldi	r25, 0x0B	; 11
     dd2:	20 e9       	ldi	r18, 0x90	; 144
     dd4:	31 e0       	ldi	r19, 0x01	; 1
     dd6:	f9 01       	movw	r30, r18
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <replay_path+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dde:	d9 f7       	brne	.-10     	; 0xdd6 <replay_path+0x3e>
    _delay_ms(300);

    cli(); // أغلق الإنترابت
     de0:	f8 94       	cli

    // أعد وضع البداية
    pos_x = 0;
     de2:	10 92 10 01 	sts	0x0110, r1
     de6:	10 92 0f 01 	sts	0x010F, r1
    pos_y = 0;
     dea:	10 92 12 01 	sts	0x0112, r1
     dee:	10 92 11 01 	sts	0x0111, r1
    heading = 0;
     df2:	10 92 13 01 	sts	0x0113, r1
     df6:	ee 24       	eor	r14, r14
     df8:	ff 24       	eor	r15, r15
        uint8 dir = path_dir[i];
        rotate_to_dir(dir);
        move_forward_one_cell();

        char buf[17];
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
     dfa:	6e 01       	movw	r12, r28
     dfc:	08 94       	sec
     dfe:	c1 1c       	adc	r12, r1
     e00:	d1 1c       	adc	r13, r1
     e02:	41 e1       	ldi	r20, 0x11	; 17
     e04:	64 2e       	mov	r6, r20
     e06:	71 2c       	mov	r7, r1
     e08:	32 e9       	ldi	r19, 0x92	; 146
     e0a:	83 2e       	mov	r8, r19
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	93 2e       	mov	r9, r19
     e10:	20 e9       	ldi	r18, 0x90	; 144
     e12:	a2 2e       	mov	r10, r18
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	b2 2e       	mov	r11, r18
     e18:	45 c0       	rjmp	.+138    	; 0xea4 <replay_path+0x10c>
    pos_x = 0;
    pos_y = 0;
    heading = 0;

    for (uint16_t i = 0; i < path_len; i++) {
        uint8 dir = path_dir[i];
     e1a:	f7 01       	movw	r30, r14
     e1c:	e2 5e       	subi	r30, 0xE2	; 226
     e1e:	f9 4f       	sbci	r31, 0xF9	; 249
     e20:	10 81       	ld	r17, Z
        rotate_to_dir(dir);
     e22:	81 2f       	mov	r24, r17
     e24:	0e 94 4f 06 	call	0xc9e	; 0xc9e <rotate_to_dir>
        move_forward_one_cell();
     e28:	0e 94 0a 06 	call	0xc14	; 0xc14 <move_forward_one_cell>

        char buf[17];
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
     e2c:	8d b7       	in	r24, 0x3d	; 61
     e2e:	9e b7       	in	r25, 0x3e	; 62
     e30:	0c 97       	sbiw	r24, 0x0c	; 12
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	9e bf       	out	0x3e, r25	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	8d bf       	out	0x3d, r24	; 61
     e3c:	ed b7       	in	r30, 0x3d	; 61
     e3e:	fe b7       	in	r31, 0x3e	; 62
     e40:	31 96       	adiw	r30, 0x01	; 1
     e42:	ad b7       	in	r26, 0x3d	; 61
     e44:	be b7       	in	r27, 0x3e	; 62
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	dc 92       	st	X, r13
     e4a:	ce 92       	st	-X, r12
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	73 82       	std	Z+3, r7	; 0x03
     e50:	62 82       	std	Z+2, r6	; 0x02
     e52:	95 82       	std	Z+5, r9	; 0x05
     e54:	84 82       	std	Z+4, r8	; 0x04
     e56:	80 91 0f 01 	lds	r24, 0x010F
     e5a:	90 91 10 01 	lds	r25, 0x0110
     e5e:	97 83       	std	Z+7, r25	; 0x07
     e60:	86 83       	std	Z+6, r24	; 0x06
     e62:	80 91 11 01 	lds	r24, 0x0111
     e66:	90 91 12 01 	lds	r25, 0x0112
     e6a:	91 87       	std	Z+9, r25	; 0x09
     e6c:	80 87       	std	Z+8, r24	; 0x08
     e6e:	12 87       	std	Z+10, r17	; 0x0a
     e70:	13 86       	std	Z+11, r1	; 0x0b
     e72:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <snprintf>
        LCD_displayStringRowColumn(1, 0, buf);
     e76:	8d b7       	in	r24, 0x3d	; 61
     e78:	9e b7       	in	r25, 0x3e	; 62
     e7a:	0c 96       	adiw	r24, 0x0c	; 12
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	9e bf       	out	0x3e, r25	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	8d bf       	out	0x3d, r24	; 61
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	a6 01       	movw	r20, r12
     e8c:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	93 e0       	ldi	r25, 0x03	; 3
     e94:	f5 01       	movw	r30, r10
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <replay_path+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9c:	d9 f7       	brne	.-10     	; 0xe94 <replay_path+0xfc>
    // أعد وضع البداية
    pos_x = 0;
    pos_y = 0;
    heading = 0;

    for (uint16_t i = 0; i < path_len; i++) {
     e9e:	08 94       	sec
     ea0:	e1 1c       	adc	r14, r1
     ea2:	f1 1c       	adc	r15, r1
     ea4:	80 91 14 01 	lds	r24, 0x0114
     ea8:	90 91 15 01 	lds	r25, 0x0115
     eac:	e8 16       	cp	r14, r24
     eae:	f9 06       	cpc	r15, r25
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <replay_path+0x11c>
     eb2:	b3 cf       	rjmp	.-154    	; 0xe1a <replay_path+0x82>
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
        LCD_displayStringRowColumn(1, 0, buf);
        _delay_ms(80);
    }

    DC_RIGHT(CW,0);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DC_RIGHT>
    DC_LEFT(CW,0);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DC_LEFT>

    LCD_displayStringRowColumn(0,0," PATH DONE ");
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	43 ea       	ldi	r20, 0xA3	; 163
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
     ed0:	88 e8       	ldi	r24, 0x88	; 136
     ed2:	93 e1       	ldi	r25, 0x13	; 19
     ed4:	20 e9       	ldi	r18, 0x90	; 144
     ed6:	31 e0       	ldi	r19, 0x01	; 1
     ed8:	f9 01       	movw	r30, r18
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <replay_path+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	d9 f7       	brne	.-10     	; 0xed8 <replay_path+0x140>
    _delay_ms(500);

    sei(); // إعادة تفعيل الإنترابت
     ee2:	78 94       	sei
}
     ee4:	61 96       	adiw	r28, 0x11	; 17
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	1f 91       	pop	r17
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	08 95       	ret

00000f0c <__vector_1>:

// ---------- ISR لزرار الريبلاي (INT0 على PD2) ----------
ISR(INT0_vect) {
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	2f 93       	push	r18
     f18:	3f 93       	push	r19
     f1a:	4f 93       	push	r20
     f1c:	5f 93       	push	r21
     f1e:	6f 93       	push	r22
     f20:	7f 93       	push	r23
     f22:	8f 93       	push	r24
     f24:	9f 93       	push	r25
     f26:	af 93       	push	r26
     f28:	bf 93       	push	r27
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
    if (goal_reached) {
     f2e:	80 91 0e 01 	lds	r24, 0x010E
     f32:	88 23       	and	r24, r24
     f34:	11 f0       	breq	.+4      	; 0xf3a <__vector_1+0x2e>
        replay_path();
     f36:	0e 94 cc 06 	call	0xd98	; 0xd98 <replay_path>
    }
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <update_walls>:
uint8 path_y[MAX_PATH];
uint8 path_dir[MAX_PATH];  // 0=forward,1=right,2=left,3=back
uint16 path_len = 0;

// ---------- تبليغ الجدران من السنسورات ----------
uint8 update_walls(void) {
     f5c:	2f 92       	push	r2
     f5e:	3f 92       	push	r3
     f60:	4f 92       	push	r4
     f62:	5f 92       	push	r5
     f64:	6f 92       	push	r6
     f66:	7f 92       	push	r7
     f68:	8f 92       	push	r8
     f6a:	9f 92       	push	r9
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
     f80:	a0 91 13 01 	lds	r26, 0x0113
     f84:	2a 2f       	mov	r18, r26
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	f9 01       	movw	r30, r18
     f8a:	33 96       	adiw	r30, 0x03	; 3
     f8c:	e3 70       	andi	r30, 0x03	; 3
     f8e:	f0 70       	andi	r31, 0x00	; 0
    int right_dir = (heading + 1) % 4;
     f90:	d9 01       	movw	r26, r18
     f92:	11 96       	adiw	r26, 0x01	; 1
     f94:	a3 70       	andi	r26, 0x03	; 3
     f96:	b0 70       	andi	r27, 0x00	; 0
    int lx = pos_x + dx[left_dir];
     f98:	20 90 0f 01 	lds	r2, 0x010F
     f9c:	30 90 10 01 	lds	r3, 0x0110
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	cf 01       	movw	r24, r30
     fa6:	8a 50       	subi	r24, 0x0A	; 10
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	ec 01       	movw	r28, r24
     fac:	e8 80       	ld	r14, Y
     fae:	f9 80       	ldd	r15, Y+1	; 0x01
    int ly = pos_y + dy[left_dir];
     fb0:	00 91 11 01 	lds	r16, 0x0111
     fb4:	10 91 12 01 	lds	r17, 0x0112
     fb8:	e2 50       	subi	r30, 0x02	; 2
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	c0 80       	ld	r12, Z
     fbe:	d1 80       	ldd	r13, Z+1	; 0x01
    int rx = pos_x + dx[right_dir];
     fc0:	aa 0f       	add	r26, r26
     fc2:	bb 1f       	adc	r27, r27
     fc4:	fd 01       	movw	r30, r26
     fc6:	ea 50       	subi	r30, 0x0A	; 10
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	a0 80       	ld	r10, Z
     fcc:	b1 80       	ldd	r11, Z+1	; 0x01
    int ry = pos_y + dy[right_dir];
     fce:	a2 50       	subi	r26, 0x02	; 2
     fd0:	bf 4f       	sbci	r27, 0xFF	; 255
     fd2:	8d 90       	ld	r8, X+
     fd4:	9c 90       	ld	r9, X
    int fx = pos_x + dx[heading];
     fd6:	d9 01       	movw	r26, r18
     fd8:	aa 0f       	add	r26, r26
     fda:	bb 1f       	adc	r27, r27
     fdc:	fd 01       	movw	r30, r26
     fde:	ea 50       	subi	r30, 0x0A	; 10
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	60 80       	ld	r6, Z
     fe4:	71 80       	ldd	r7, Z+1	; 0x01
    int fy = pos_y + dy[heading];
     fe6:	a2 50       	subi	r26, 0x02	; 2
     fe8:	bf 4f       	sbci	r27, 0xFF	; 255
     fea:	4d 90       	ld	r4, X+
     fec:	5c 90       	ld	r5, X

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
     fee:	0e 94 1e 02 	call	0x43c	; 0x43c <IR1_getState>
     ff2:	88 23       	and	r24, r24
     ff4:	21 f4       	brne	.+8      	; 0xffe <update_walls+0xa2>
     ff6:	0e 94 21 02 	call	0x442	; 0x442 <IR2_getState>
     ffa:	88 23       	and	r24, r24
     ffc:	11 f1       	breq	.+68     	; 0x1042 <update_walls+0xe6>
uint8 update_walls(void) {
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
     ffe:	c7 01       	movw	r24, r14
    1000:	82 0d       	add	r24, r2
    1002:	93 1d       	adc	r25, r3
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
    1004:	97 fd       	sbrc	r25, 7
    1006:	1d c0       	rjmp	.+58     	; 0x1042 <update_walls+0xe6>
    1008:	80 31       	cpi	r24, 0x10	; 16
    100a:	91 05       	cpc	r25, r1
    100c:	d4 f4       	brge	.+52     	; 0x1042 <update_walls+0xe6>
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    100e:	f6 01       	movw	r30, r12
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
    1014:	f7 fd       	sbrc	r31, 7
    1016:	15 c0       	rjmp	.+42     	; 0x1042 <update_walls+0xe6>
    1018:	e0 31       	cpi	r30, 0x10	; 16
    101a:	f1 05       	cpc	r31, r1
    101c:	94 f4       	brge	.+36     	; 0x1042 <update_walls+0xe6>
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    101e:	dc 01       	movw	r26, r24
    1020:	74 e0       	ldi	r23, 0x04	; 4
    1022:	aa 0f       	add	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	7a 95       	dec	r23
    1028:	e1 f7       	brne	.-8      	; 0x1022 <update_walls+0xc6>
    102a:	ae 0f       	add	r26, r30
    102c:	bf 1f       	adc	r27, r31
    102e:	a2 5e       	subi	r26, 0xE2	; 226
    1030:	bb 4f       	sbci	r27, 0xFB	; 251
    1032:	8c 91       	ld	r24, X
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	29 f0       	breq	.+10     	; 0x1042 <update_walls+0xe6>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	8c 93       	st	X, r24
    103c:	ff 24       	eor	r15, r15
    103e:	f3 94       	inc	r15
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <update_walls+0xe8>
    1042:	ff 24       	eor	r15, r15
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
    1044:	0e 94 38 02 	call	0x470	; 0x470 <IR7_getState>
    1048:	88 23       	and	r24, r24
    104a:	21 f4       	brne	.+8      	; 0x1054 <update_walls+0xf8>
    104c:	0e 94 41 02 	call	0x482	; 0x482 <IR8_getState>
    1050:	88 23       	and	r24, r24
    1052:	09 f1       	breq	.+66     	; 0x1096 <update_walls+0x13a>

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    1054:	c5 01       	movw	r24, r10
    1056:	82 0d       	add	r24, r2
    1058:	93 1d       	adc	r25, r3
    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
    105a:	97 fd       	sbrc	r25, 7
    105c:	1c c0       	rjmp	.+56     	; 0x1096 <update_walls+0x13a>
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	91 05       	cpc	r25, r1
    1062:	cc f4       	brge	.+50     	; 0x1096 <update_walls+0x13a>
    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
    1064:	d4 01       	movw	r26, r8
    1066:	a0 0f       	add	r26, r16
    1068:	b1 1f       	adc	r27, r17
    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
    106a:	b7 fd       	sbrc	r27, 7
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <update_walls+0x13a>
    106e:	a0 31       	cpi	r26, 0x10	; 16
    1070:	b1 05       	cpc	r27, r1
    1072:	8c f4       	brge	.+34     	; 0x1096 <update_walls+0x13a>
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    1074:	fc 01       	movw	r30, r24
    1076:	64 e0       	ldi	r22, 0x04	; 4
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	6a 95       	dec	r22
    107e:	e1 f7       	brne	.-8      	; 0x1078 <update_walls+0x11c>
    1080:	ea 0f       	add	r30, r26
    1082:	fb 1f       	adc	r31, r27
    1084:	e2 5e       	subi	r30, 0xE2	; 226
    1086:	fb 4f       	sbci	r31, 0xFB	; 251
    1088:	80 81       	ld	r24, Z
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	21 f0       	breq	.+8      	; 0x1096 <update_walls+0x13a>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 83       	st	Z, r24
    1092:	ff 24       	eor	r15, r15
    1094:	f3 94       	inc	r15
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
    1096:	0e 94 27 02 	call	0x44e	; 0x44e <IR3_getState>
    109a:	88 23       	and	r24, r24
    109c:	21 f4       	brne	.+8      	; 0x10a6 <update_walls+0x14a>
    109e:	0e 94 2f 02 	call	0x45e	; 0x45e <IR6_getState>
    10a2:	88 23       	and	r24, r24
    10a4:	09 f1       	breq	.+66     	; 0x10e8 <update_walls+0x18c>
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    10a6:	c3 01       	movw	r24, r6
    10a8:	82 0d       	add	r24, r2
    10aa:	93 1d       	adc	r25, r3
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
    10ac:	97 fd       	sbrc	r25, 7
    10ae:	1c c0       	rjmp	.+56     	; 0x10e8 <update_walls+0x18c>
    10b0:	80 31       	cpi	r24, 0x10	; 16
    10b2:	91 05       	cpc	r25, r1
    10b4:	cc f4       	brge	.+50     	; 0x10e8 <update_walls+0x18c>
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];
    10b6:	d2 01       	movw	r26, r4
    10b8:	a0 0f       	add	r26, r16
    10ba:	b1 1f       	adc	r27, r17
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
    10bc:	b7 fd       	sbrc	r27, 7
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <update_walls+0x18c>
    10c0:	a0 31       	cpi	r26, 0x10	; 16
    10c2:	b1 05       	cpc	r27, r1
    10c4:	8c f4       	brge	.+34     	; 0x10e8 <update_walls+0x18c>
        if (maze[fx][fy] != 1) { maze[fx][fy] = 1; updated = 1; }
    10c6:	fc 01       	movw	r30, r24
    10c8:	54 e0       	ldi	r21, 0x04	; 4
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	5a 95       	dec	r21
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <update_walls+0x16e>
    10d2:	ea 0f       	add	r30, r26
    10d4:	fb 1f       	adc	r31, r27
    10d6:	e2 5e       	subi	r30, 0xE2	; 226
    10d8:	fb 4f       	sbci	r31, 0xFB	; 251
    10da:	80 81       	ld	r24, Z
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	21 f0       	breq	.+8      	; 0x10e8 <update_walls+0x18c>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24
    10e4:	ff 24       	eor	r15, r15
    10e6:	f3 94       	inc	r15
    }

    return updated;
}
    10e8:	8f 2d       	mov	r24, r15
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	7f 90       	pop	r7
    1104:	6f 90       	pop	r6
    1106:	5f 90       	pop	r5
    1108:	4f 90       	pop	r4
    110a:	3f 90       	pop	r3
    110c:	2f 90       	pop	r2
    110e:	08 95       	ret

00001110 <main>:
        replay_path();
    }
}

// ---------- الدالة الرئيسية ----------
int main(void) {
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	69 97       	sbiw	r28, 0x19	; 25
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    // تهيئة الـ HAL والمكونات
    LCD_init();
    1138:	0e 94 c3 03 	call	0x786	; 0x786 <LCD_init>
    IR1_init(); IR2_init(); IR3_init();
    113c:	0e 94 12 02 	call	0x424	; 0x424 <IR1_init>
    1140:	0e 94 14 02 	call	0x428	; 0x428 <IR2_init>
    1144:	0e 94 16 02 	call	0x42c	; 0x42c <IR3_init>
    IR6_init(); IR7_init(); IR8_init();
    1148:	0e 94 18 02 	call	0x430	; 0x430 <IR6_init>
    114c:	0e 94 1a 02 	call	0x434	; 0x434 <IR7_init>
    1150:	0e 94 1c 02 	call	0x438	; 0x438 <IR8_init>
    DC_RIGHT_INIT();
    1154:	0e 94 c4 01 	call	0x388	; 0x388 <DC_RIGHT_INIT>
    DC_LEFT_INIT();
    1158:	0e 94 cf 01 	call	0x39e	; 0x39e <DC_LEFT_INIT>

    // زرار interrupt على PD2 (INT0)
    DDRD &= ~(1<<PD2);   // input
    115c:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1<<PD2);   // pull-up
    115e:	92 9a       	sbi	0x12, 2	; 18

    // تهيئة INT0 على falling edge
    GICR |= (1<<INT0);
    1160:	8b b7       	in	r24, 0x3b	; 59
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8b bf       	out	0x3b, r24	; 59
    MCUCR |= (1<<ISC01);
    1166:	85 b7       	in	r24, 0x35	; 53
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1<<ISC00);
    116c:	85 b7       	in	r24, 0x35	; 53
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	85 bf       	out	0x35, r24	; 53
    sei(); // global interrupt enable
    1172:	78 94       	sei

    // رسالة بداية
    LCD_displayString("  EL-MAZARYTA");
    1174:	8f ea       	ldi	r24, 0xAF	; 175
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_displayString>
    117c:	80 e4       	ldi	r24, 0x40	; 64
    117e:	9f e1       	ldi	r25, 0x1F	; 31
    1180:	20 e9       	ldi	r18, 0x90	; 144
    1182:	31 e0       	ldi	r19, 0x01	; 1
    1184:	f9 01       	movw	r30, r18
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	d9 f7       	brne	.-10     	; 0x1184 <main+0x74>
    _delay_ms(800);
    LCD_clearScreen();
    118e:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_clearScreen>
    1192:	2e e2       	ldi	r18, 0x2E	; 46
    1194:	34 e0       	ldi	r19, 0x04	; 4
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <main+0xa2>

    // اعادة تهيئة المتاهة
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            maze[x][y] = 0;
    119c:	11 92       	st	Z+, r1
    _delay_ms(800);
    LCD_clearScreen();

    // اعادة تهيئة المتاهة
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
    119e:	e2 17       	cp	r30, r18
    11a0:	f3 07       	cpc	r31, r19
    11a2:	e1 f7       	brne	.-8      	; 0x119c <main+0x8c>
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	9f 01       	movw	r18, r30
    11a8:	20 5f       	subi	r18, 0xF0	; 240
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_displayString("  EL-MAZARYTA");
    _delay_ms(800);
    LCD_clearScreen();

    // اعادة تهيئة المتاهة
    for (uint8 x = 0; x < MAZE_SIZE; x++)
    11ac:	80 31       	cpi	r24, 0x10	; 16
    11ae:	91 05       	cpc	r25, r1
    11b0:	49 f0       	breq	.+18     	; 0x11c4 <main+0xb4>
    11b2:	fc 01       	movw	r30, r24
    11b4:	74 e0       	ldi	r23, 0x04	; 4
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	7a 95       	dec	r23
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <main+0xa6>
    11be:	e2 5e       	subi	r30, 0xE2	; 226
    11c0:	fb 4f       	sbci	r31, 0xFB	; 251
    11c2:	ec cf       	rjmp	.-40     	; 0x119c <main+0x8c>
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            maze[x][y] = 0;

    pos_x = 0; pos_y = 0; heading = 0;
    11c4:	10 92 10 01 	sts	0x0110, r1
    11c8:	10 92 0f 01 	sts	0x010F, r1
    11cc:	10 92 12 01 	sts	0x0112, r1
    11d0:	10 92 11 01 	sts	0x0111, r1
    11d4:	10 92 13 01 	sts	0x0113, r1
    floodfill(); // حساب اولي (قد لايكون دقيق قبل اكتشاف جدران)
    11d8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <floodfill>
            floodfill();
        }

        // عرض Debug على LCD
        char buf[17];
        char *hd[4] = {"X+","Y-","X-","Y+"};
    11dc:	7e 01       	movw	r14, r28
    11de:	08 94       	sec
    11e0:	e1 1c       	adc	r14, r1
    11e2:	f1 1c       	adc	r15, r1
        snprintf(buf, 17, "X:%2d Y:%2d %s", pos_x, pos_y, hd[heading]);
    11e4:	8e 01       	movw	r16, r28
    11e6:	07 5f       	subi	r16, 0xF7	; 247
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	61 e1       	ldi	r22, 0x11	; 17
    11ec:	86 2e       	mov	r8, r22
    11ee:	91 2c       	mov	r9, r1
    11f0:	5d eb       	ldi	r21, 0xBD	; 189
    11f2:	a5 2e       	mov	r10, r21
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	b5 2e       	mov	r11, r21
    11f8:	40 e9       	ldi	r20, 0x90	; 144
    11fa:	c4 2e       	mov	r12, r20
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	d4 2e       	mov	r13, r20
    pos_x = 0; pos_y = 0; heading = 0;
    floodfill(); // حساب اولي (قد لايكون دقيق قبل اكتشاف جدران)

    // حلقة الاستكشاف (sensing + planning via floodfill)
    while (1) {
        uint8 changed = update_walls();
    1200:	0e 94 ae 07 	call	0xf5c	; 0xf5c <update_walls>
        if (changed) {
    1204:	88 23       	and	r24, r24
    1206:	11 f0       	breq	.+4      	; 0x120c <main+0xfc>
            floodfill(); // إذا تغيرت الجدران — أعِد حساب المسافات
    1208:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <floodfill>
        }

        // حدد الاتجاه التالي باستخدام الفلودفل
        uint8 next_dir = choose_next_direction();
    120c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <choose_next_direction>

        // لو next_dir = current heading فهذا يعني امشي قدّام
        rotate_to_dir(next_dir);
    1210:	0e 94 4f 06 	call	0xc9e	; 0xc9e <rotate_to_dir>
        // قبل المشي تأكد إن الخلية الامامية ليست جدار (استجابة فورية للسنسور)
        // نحسب الخلية الامامية
        int fx = pos_x + dx[heading];
    1214:	e0 91 13 01 	lds	r30, 0x0113
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	df 01       	movw	r26, r30
    1220:	aa 50       	subi	r26, 0x0A	; 10
    1222:	bf 4f       	sbci	r27, 0xFF	; 255
    1224:	0d 90       	ld	r0, X+
    1226:	bc 91       	ld	r27, X
    1228:	a0 2d       	mov	r26, r0
    122a:	80 91 0f 01 	lds	r24, 0x010F
    122e:	90 91 10 01 	lds	r25, 0x0110
    1232:	a8 0f       	add	r26, r24
    1234:	b9 1f       	adc	r27, r25
        int fy = pos_y + dy[heading];
    1236:	80 91 11 01 	lds	r24, 0x0111
    123a:	90 91 12 01 	lds	r25, 0x0112
    123e:	e2 50       	subi	r30, 0x02	; 2
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	01 90       	ld	r0, Z+
    1244:	f0 81       	ld	r31, Z
    1246:	e0 2d       	mov	r30, r0
        if (fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE && maze[fx][fy] == 0) {
    1248:	a0 31       	cpi	r26, 0x10	; 16
    124a:	b1 05       	cpc	r27, r1
    124c:	b0 f4       	brcc	.+44     	; 0x127a <main+0x16a>
        // لو next_dir = current heading فهذا يعني امشي قدّام
        rotate_to_dir(next_dir);
        // قبل المشي تأكد إن الخلية الامامية ليست جدار (استجابة فورية للسنسور)
        // نحسب الخلية الامامية
        int fx = pos_x + dx[heading];
        int fy = pos_y + dy[heading];
    124e:	e8 0f       	add	r30, r24
    1250:	f9 1f       	adc	r31, r25
        if (fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE && maze[fx][fy] == 0) {
    1252:	f7 fd       	sbrc	r31, 7
    1254:	12 c0       	rjmp	.+36     	; 0x127a <main+0x16a>
    1256:	e0 31       	cpi	r30, 0x10	; 16
    1258:	f1 05       	cpc	r31, r1
    125a:	7c f4       	brge	.+30     	; 0x127a <main+0x16a>
    125c:	24 e0       	ldi	r18, 0x04	; 4
    125e:	aa 0f       	add	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	2a 95       	dec	r18
    1264:	e1 f7       	brne	.-8      	; 0x125e <main+0x14e>
    1266:	ae 0f       	add	r26, r30
    1268:	bf 1f       	adc	r27, r31
    126a:	a2 5e       	subi	r26, 0xE2	; 226
    126c:	bb 4f       	sbci	r27, 0xFB	; 251
    126e:	8c 91       	ld	r24, X
    1270:	88 23       	and	r24, r24
    1272:	19 f4       	brne	.+6      	; 0x127a <main+0x16a>
            move_forward_one_cell();
    1274:	0e 94 0a 06 	call	0xc14	; 0xc14 <move_forward_one_cell>
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <main+0x172>
        } else {
            // لو أمامنا حيطه (ربما اكتشفته للتو) حدث الجدران وأعد الـ floodfill ثم استمر
            update_walls();
    127a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <update_walls>
            floodfill();
    127e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <floodfill>
        }

        // عرض Debug على LCD
        char buf[17];
        char *hd[4] = {"X+","Y-","X-","Y+"};
    1282:	d7 01       	movw	r26, r14
    1284:	e6 e0       	ldi	r30, 0x06	; 6
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	88 e0       	ldi	r24, 0x08	; 8
    128a:	01 90       	ld	r0, Z+
    128c:	0d 92       	st	X+, r0
    128e:	81 50       	subi	r24, 0x01	; 1
    1290:	e1 f7       	brne	.-8      	; 0x128a <main+0x17a>
        snprintf(buf, 17, "X:%2d Y:%2d %s", pos_x, pos_y, hd[heading]);
    1292:	8d b7       	in	r24, 0x3d	; 61
    1294:	9e b7       	in	r25, 0x3e	; 62
    1296:	0c 97       	sbiw	r24, 0x0c	; 12
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	9e bf       	out	0x3e, r25	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	8d bf       	out	0x3d, r24	; 61
    12a2:	ad b7       	in	r26, 0x3d	; 61
    12a4:	be b7       	in	r27, 0x3e	; 62
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	ed b7       	in	r30, 0x3d	; 61
    12aa:	fe b7       	in	r31, 0x3e	; 62
    12ac:	12 83       	std	Z+2, r17	; 0x02
    12ae:	01 83       	std	Z+1, r16	; 0x01
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	9c 92       	st	X, r9
    12b4:	8e 92       	st	-X, r8
    12b6:	12 97       	sbiw	r26, 0x02	; 2
    12b8:	15 96       	adiw	r26, 0x05	; 5
    12ba:	bc 92       	st	X, r11
    12bc:	ae 92       	st	-X, r10
    12be:	14 97       	sbiw	r26, 0x04	; 4
    12c0:	80 91 0f 01 	lds	r24, 0x010F
    12c4:	90 91 10 01 	lds	r25, 0x0110
    12c8:	17 96       	adiw	r26, 0x07	; 7
    12ca:	9c 93       	st	X, r25
    12cc:	8e 93       	st	-X, r24
    12ce:	16 97       	sbiw	r26, 0x06	; 6
    12d0:	80 91 11 01 	lds	r24, 0x0111
    12d4:	90 91 12 01 	lds	r25, 0x0112
    12d8:	19 96       	adiw	r26, 0x09	; 9
    12da:	9c 93       	st	X, r25
    12dc:	8e 93       	st	-X, r24
    12de:	18 97       	sbiw	r26, 0x08	; 8
    12e0:	e0 91 13 01 	lds	r30, 0x0113
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	ee 0d       	add	r30, r14
    12ec:	ff 1d       	adc	r31, r15
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	1b 96       	adiw	r26, 0x0b	; 11
    12f4:	9c 93       	st	X, r25
    12f6:	8e 93       	st	-X, r24
    12f8:	1a 97       	sbiw	r26, 0x0a	; 10
    12fa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <snprintf>
        LCD_displayStringRowColumn(1,0,buf);
    12fe:	8d b7       	in	r24, 0x3d	; 61
    1300:	9e b7       	in	r25, 0x3e	; 62
    1302:	0c 96       	adiw	r24, 0x0c	; 12
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	9e bf       	out	0x3e, r25	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	8d bf       	out	0x3d, r24	; 61
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	a8 01       	movw	r20, r16
    1314:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
    1318:	80 eb       	ldi	r24, 0xB0	; 176
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	f6 01       	movw	r30, r12
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x20e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	d9 f7       	brne	.-10     	; 0x131c <main+0x20c>

        _delay_ms(120);

        // شرط التوقف عند الهدف (المراكز 7,7 7,8 8,7 8,8)
        if (((pos_x == 7 || pos_x == 8) && (pos_y == 7 || pos_y == 8)) && maze[pos_x][pos_y] == 0) {
    1326:	20 91 0f 01 	lds	r18, 0x010F
    132a:	30 91 10 01 	lds	r19, 0x0110
    132e:	c9 01       	movw	r24, r18
    1330:	07 97       	sbiw	r24, 0x07	; 7
    1332:	02 97       	sbiw	r24, 0x02	; 2
    1334:	08 f0       	brcs	.+2      	; 0x1338 <main+0x228>
    1336:	64 cf       	rjmp	.-312    	; 0x1200 <main+0xf0>
    1338:	60 91 11 01 	lds	r22, 0x0111
    133c:	70 91 12 01 	lds	r23, 0x0112
    1340:	cb 01       	movw	r24, r22
    1342:	07 97       	sbiw	r24, 0x07	; 7
    1344:	02 97       	sbiw	r24, 0x02	; 2
    1346:	08 f0       	brcs	.+2      	; 0x134a <main+0x23a>
    1348:	5b cf       	rjmp	.-330    	; 0x1200 <main+0xf0>
    134a:	f9 01       	movw	r30, r18
    134c:	84 e0       	ldi	r24, 0x04	; 4
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	8a 95       	dec	r24
    1354:	e1 f7       	brne	.-8      	; 0x134e <main+0x23e>
    1356:	e6 0f       	add	r30, r22
    1358:	f7 1f       	adc	r31, r23
    135a:	e2 5e       	subi	r30, 0xE2	; 226
    135c:	fb 4f       	sbci	r31, 0xFB	; 251
    135e:	80 81       	ld	r24, Z
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <main+0x256>
    1364:	4d cf       	rjmp	.-358    	; 0x1200 <main+0xf0>
            // بعد الوصول — ابني المسار القصير بحسب floodfill
            build_shortest_path(pos_x, pos_y);
    1366:	c9 01       	movw	r24, r18
    1368:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <build_shortest_path>
            LCD_displayStringRowColumn(0,0,"      GOAL      ");
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	4c ec       	ldi	r20, 0xCC	; 204
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
            goal_reached = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 0e 01 	sts	0x010E, r24
    137e:	00 e9       	ldi	r16, 0x90	; 144
    1380:	11 e0       	ldi	r17, 0x01	; 1
    }

    // بعد الوصول — ننتظر ضغطة زر للريلاي عبر الـ INT0 (ISR يتعامل مع الأمر)
    while (1) {
        // ممكن تعرض حالة انتظار أو أي لوجيك آخر
        LCD_displayStringRowColumn(0,0,"PRESS REPLAY");
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	4d ed       	ldi	r20, 0xDD	; 221
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	0e 94 b8 03 	call	0x770	; 0x770 <LCD_displayStringRowColumn>
    138e:	88 e8       	ldi	r24, 0x88	; 136
    1390:	93 e1       	ldi	r25, 0x13	; 19
    1392:	f8 01       	movw	r30, r16
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <main+0x284>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	d9 f7       	brne	.-10     	; 0x1392 <main+0x282>
    139c:	f2 cf       	rjmp	.-28     	; 0x1382 <main+0x272>

0000139e <__mulsi3>:
    139e:	62 9f       	mul	r22, r18
    13a0:	d0 01       	movw	r26, r0
    13a2:	73 9f       	mul	r23, r19
    13a4:	f0 01       	movw	r30, r0
    13a6:	82 9f       	mul	r24, r18
    13a8:	e0 0d       	add	r30, r0
    13aa:	f1 1d       	adc	r31, r1
    13ac:	64 9f       	mul	r22, r20
    13ae:	e0 0d       	add	r30, r0
    13b0:	f1 1d       	adc	r31, r1
    13b2:	92 9f       	mul	r25, r18
    13b4:	f0 0d       	add	r31, r0
    13b6:	83 9f       	mul	r24, r19
    13b8:	f0 0d       	add	r31, r0
    13ba:	74 9f       	mul	r23, r20
    13bc:	f0 0d       	add	r31, r0
    13be:	65 9f       	mul	r22, r21
    13c0:	f0 0d       	add	r31, r0
    13c2:	99 27       	eor	r25, r25
    13c4:	72 9f       	mul	r23, r18
    13c6:	b0 0d       	add	r27, r0
    13c8:	e1 1d       	adc	r30, r1
    13ca:	f9 1f       	adc	r31, r25
    13cc:	63 9f       	mul	r22, r19
    13ce:	b0 0d       	add	r27, r0
    13d0:	e1 1d       	adc	r30, r1
    13d2:	f9 1f       	adc	r31, r25
    13d4:	bd 01       	movw	r22, r26
    13d6:	cf 01       	movw	r24, r30
    13d8:	11 24       	eor	r1, r1
    13da:	08 95       	ret

000013dc <__divmodhi4>:
    13dc:	97 fb       	bst	r25, 7
    13de:	09 2e       	mov	r0, r25
    13e0:	07 26       	eor	r0, r23
    13e2:	0a d0       	rcall	.+20     	; 0x13f8 <__divmodhi4_neg1>
    13e4:	77 fd       	sbrc	r23, 7
    13e6:	04 d0       	rcall	.+8      	; 0x13f0 <__divmodhi4_neg2>
    13e8:	2e d0       	rcall	.+92     	; 0x1446 <__udivmodhi4>
    13ea:	06 d0       	rcall	.+12     	; 0x13f8 <__divmodhi4_neg1>
    13ec:	00 20       	and	r0, r0
    13ee:	1a f4       	brpl	.+6      	; 0x13f6 <__divmodhi4_exit>

000013f0 <__divmodhi4_neg2>:
    13f0:	70 95       	com	r23
    13f2:	61 95       	neg	r22
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255

000013f6 <__divmodhi4_exit>:
    13f6:	08 95       	ret

000013f8 <__divmodhi4_neg1>:
    13f8:	f6 f7       	brtc	.-4      	; 0x13f6 <__divmodhi4_exit>
    13fa:	90 95       	com	r25
    13fc:	81 95       	neg	r24
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	08 95       	ret

00001402 <__udivmodsi4>:
    1402:	a1 e2       	ldi	r26, 0x21	; 33
    1404:	1a 2e       	mov	r1, r26
    1406:	aa 1b       	sub	r26, r26
    1408:	bb 1b       	sub	r27, r27
    140a:	fd 01       	movw	r30, r26
    140c:	0d c0       	rjmp	.+26     	; 0x1428 <__udivmodsi4_ep>

0000140e <__udivmodsi4_loop>:
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	ee 1f       	adc	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	a2 17       	cp	r26, r18
    1418:	b3 07       	cpc	r27, r19
    141a:	e4 07       	cpc	r30, r20
    141c:	f5 07       	cpc	r31, r21
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__udivmodsi4_ep>
    1420:	a2 1b       	sub	r26, r18
    1422:	b3 0b       	sbc	r27, r19
    1424:	e4 0b       	sbc	r30, r20
    1426:	f5 0b       	sbc	r31, r21

00001428 <__udivmodsi4_ep>:
    1428:	66 1f       	adc	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	88 1f       	adc	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	1a 94       	dec	r1
    1432:	69 f7       	brne	.-38     	; 0x140e <__udivmodsi4_loop>
    1434:	60 95       	com	r22
    1436:	70 95       	com	r23
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	9b 01       	movw	r18, r22
    143e:	ac 01       	movw	r20, r24
    1440:	bd 01       	movw	r22, r26
    1442:	cf 01       	movw	r24, r30
    1444:	08 95       	ret

00001446 <__udivmodhi4>:
    1446:	aa 1b       	sub	r26, r26
    1448:	bb 1b       	sub	r27, r27
    144a:	51 e1       	ldi	r21, 0x11	; 17
    144c:	07 c0       	rjmp	.+14     	; 0x145c <__udivmodhi4_ep>

0000144e <__udivmodhi4_loop>:
    144e:	aa 1f       	adc	r26, r26
    1450:	bb 1f       	adc	r27, r27
    1452:	a6 17       	cp	r26, r22
    1454:	b7 07       	cpc	r27, r23
    1456:	10 f0       	brcs	.+4      	; 0x145c <__udivmodhi4_ep>
    1458:	a6 1b       	sub	r26, r22
    145a:	b7 0b       	sbc	r27, r23

0000145c <__udivmodhi4_ep>:
    145c:	88 1f       	adc	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	5a 95       	dec	r21
    1462:	a9 f7       	brne	.-22     	; 0x144e <__udivmodhi4_loop>
    1464:	80 95       	com	r24
    1466:	90 95       	com	r25
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	08 95       	ret

0000146e <itoa>:
    146e:	fb 01       	movw	r30, r22
    1470:	9f 01       	movw	r18, r30
    1472:	e8 94       	clt
    1474:	42 30       	cpi	r20, 0x02	; 2
    1476:	c4 f0       	brlt	.+48     	; 0x14a8 <itoa+0x3a>
    1478:	45 32       	cpi	r20, 0x25	; 37
    147a:	b4 f4       	brge	.+44     	; 0x14a8 <itoa+0x3a>
    147c:	4a 30       	cpi	r20, 0x0A	; 10
    147e:	29 f4       	brne	.+10     	; 0x148a <itoa+0x1c>
    1480:	97 fb       	bst	r25, 7
    1482:	1e f4       	brtc	.+6      	; 0x148a <itoa+0x1c>
    1484:	90 95       	com	r25
    1486:	81 95       	neg	r24
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	64 2f       	mov	r22, r20
    148c:	77 27       	eor	r23, r23
    148e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__udivmodhi4>
    1492:	80 5d       	subi	r24, 0xD0	; 208
    1494:	8a 33       	cpi	r24, 0x3A	; 58
    1496:	0c f0       	brlt	.+2      	; 0x149a <itoa+0x2c>
    1498:	89 5d       	subi	r24, 0xD9	; 217
    149a:	81 93       	st	Z+, r24
    149c:	cb 01       	movw	r24, r22
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	a1 f7       	brne	.-24     	; 0x148a <itoa+0x1c>
    14a2:	16 f4       	brtc	.+4      	; 0x14a8 <itoa+0x3a>
    14a4:	5d e2       	ldi	r21, 0x2D	; 45
    14a6:	51 93       	st	Z+, r21
    14a8:	10 82       	st	Z, r1
    14aa:	c9 01       	movw	r24, r18
    14ac:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <strrev>

000014b0 <snprintf>:
    14b0:	ae e0       	ldi	r26, 0x0E	; 14
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ee e5       	ldi	r30, 0x5E	; 94
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__prologue_saves__+0x1c>
    14bc:	0d 89       	ldd	r16, Y+21	; 0x15
    14be:	1e 89       	ldd	r17, Y+22	; 0x16
    14c0:	8f 89       	ldd	r24, Y+23	; 0x17
    14c2:	98 8d       	ldd	r25, Y+24	; 0x18
    14c4:	97 ff       	sbrs	r25, 7
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <snprintf+0x1c>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e8       	ldi	r25, 0x80	; 128
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	1a 83       	std	Y+2, r17	; 0x02
    14d4:	09 83       	std	Y+1, r16	; 0x01
    14d6:	86 e0       	ldi	r24, 0x06	; 6
    14d8:	8c 83       	std	Y+4, r24	; 0x04
    14da:	9e 01       	movw	r18, r28
    14dc:	25 5e       	subi	r18, 0xE5	; 229
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	69 8d       	ldd	r22, Y+25	; 0x19
    14e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e8:	a9 01       	movw	r20, r18
    14ea:	0e 94 89 0a 	call	0x1512	; 0x1512 <vfprintf>
    14ee:	4d 81       	ldd	r20, Y+5	; 0x05
    14f0:	5e 81       	ldd	r21, Y+6	; 0x06
    14f2:	57 fd       	sbrc	r21, 7
    14f4:	0a c0       	rjmp	.+20     	; 0x150a <snprintf+0x5a>
    14f6:	2f 81       	ldd	r18, Y+7	; 0x07
    14f8:	38 85       	ldd	r19, Y+8	; 0x08
    14fa:	42 17       	cp	r20, r18
    14fc:	53 07       	cpc	r21, r19
    14fe:	0c f4       	brge	.+2      	; 0x1502 <snprintf+0x52>
    1500:	9a 01       	movw	r18, r20
    1502:	02 0f       	add	r16, r18
    1504:	13 1f       	adc	r17, r19
    1506:	f8 01       	movw	r30, r16
    1508:	10 82       	st	Z, r1
    150a:	2e 96       	adiw	r28, 0x0e	; 14
    150c:	e4 e0       	ldi	r30, 0x04	; 4
    150e:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__epilogue_restores__+0x1c>

00001512 <vfprintf>:
    1512:	ab e0       	ldi	r26, 0x0B	; 11
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__prologue_saves__>
    151e:	3c 01       	movw	r6, r24
    1520:	2b 01       	movw	r4, r22
    1522:	5a 01       	movw	r10, r20
    1524:	fc 01       	movw	r30, r24
    1526:	17 82       	std	Z+7, r1	; 0x07
    1528:	16 82       	std	Z+6, r1	; 0x06
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	81 fd       	sbrc	r24, 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x24>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	c6 c1       	rjmp	.+908    	; 0x18c2 <vfprintf+0x3b0>
    1536:	9a e0       	ldi	r25, 0x0A	; 10
    1538:	89 2e       	mov	r8, r25
    153a:	1e 01       	movw	r2, r28
    153c:	08 94       	sec
    153e:	21 1c       	adc	r2, r1
    1540:	31 1c       	adc	r3, r1
    1542:	f3 01       	movw	r30, r6
    1544:	23 81       	ldd	r18, Z+3	; 0x03
    1546:	f2 01       	movw	r30, r4
    1548:	23 fd       	sbrc	r18, 3
    154a:	85 91       	lpm	r24, Z+
    154c:	23 ff       	sbrs	r18, 3
    154e:	81 91       	ld	r24, Z+
    1550:	2f 01       	movw	r4, r30
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfprintf+0x46>
    1556:	b2 c1       	rjmp	.+868    	; 0x18bc <vfprintf+0x3aa>
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	39 f4       	brne	.+14     	; 0x156a <vfprintf+0x58>
    155c:	23 fd       	sbrc	r18, 3
    155e:	85 91       	lpm	r24, Z+
    1560:	23 ff       	sbrs	r18, 3
    1562:	81 91       	ld	r24, Z+
    1564:	2f 01       	movw	r4, r30
    1566:	85 32       	cpi	r24, 0x25	; 37
    1568:	29 f4       	brne	.+10     	; 0x1574 <vfprintf+0x62>
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b3 01       	movw	r22, r6
    156e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    1572:	e7 cf       	rjmp	.-50     	; 0x1542 <vfprintf+0x30>
    1574:	98 2f       	mov	r25, r24
    1576:	ff 24       	eor	r15, r15
    1578:	ee 24       	eor	r14, r14
    157a:	99 24       	eor	r9, r9
    157c:	ff e1       	ldi	r31, 0x1F	; 31
    157e:	ff 15       	cp	r31, r15
    1580:	d0 f0       	brcs	.+52     	; 0x15b6 <vfprintf+0xa4>
    1582:	9b 32       	cpi	r25, 0x2B	; 43
    1584:	69 f0       	breq	.+26     	; 0x15a0 <vfprintf+0x8e>
    1586:	9c 32       	cpi	r25, 0x2C	; 44
    1588:	28 f4       	brcc	.+10     	; 0x1594 <vfprintf+0x82>
    158a:	90 32       	cpi	r25, 0x20	; 32
    158c:	59 f0       	breq	.+22     	; 0x15a4 <vfprintf+0x92>
    158e:	93 32       	cpi	r25, 0x23	; 35
    1590:	91 f4       	brne	.+36     	; 0x15b6 <vfprintf+0xa4>
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <vfprintf+0x9e>
    1594:	9d 32       	cpi	r25, 0x2D	; 45
    1596:	49 f0       	breq	.+18     	; 0x15aa <vfprintf+0x98>
    1598:	90 33       	cpi	r25, 0x30	; 48
    159a:	69 f4       	brne	.+26     	; 0x15b6 <vfprintf+0xa4>
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	24 c0       	rjmp	.+72     	; 0x15e8 <vfprintf+0xd6>
    15a0:	52 e0       	ldi	r21, 0x02	; 2
    15a2:	f5 2a       	or	r15, r21
    15a4:	84 e0       	ldi	r24, 0x04	; 4
    15a6:	f8 2a       	or	r15, r24
    15a8:	28 c0       	rjmp	.+80     	; 0x15fa <vfprintf+0xe8>
    15aa:	98 e0       	ldi	r25, 0x08	; 8
    15ac:	f9 2a       	or	r15, r25
    15ae:	25 c0       	rjmp	.+74     	; 0x15fa <vfprintf+0xe8>
    15b0:	e0 e1       	ldi	r30, 0x10	; 16
    15b2:	fe 2a       	or	r15, r30
    15b4:	22 c0       	rjmp	.+68     	; 0x15fa <vfprintf+0xe8>
    15b6:	f7 fc       	sbrc	r15, 7
    15b8:	29 c0       	rjmp	.+82     	; 0x160c <vfprintf+0xfa>
    15ba:	89 2f       	mov	r24, r25
    15bc:	80 53       	subi	r24, 0x30	; 48
    15be:	8a 30       	cpi	r24, 0x0A	; 10
    15c0:	70 f4       	brcc	.+28     	; 0x15de <vfprintf+0xcc>
    15c2:	f6 fe       	sbrs	r15, 6
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <vfprintf+0xbe>
    15c6:	98 9c       	mul	r9, r8
    15c8:	90 2c       	mov	r9, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	98 0e       	add	r9, r24
    15ce:	15 c0       	rjmp	.+42     	; 0x15fa <vfprintf+0xe8>
    15d0:	e8 9c       	mul	r14, r8
    15d2:	e0 2c       	mov	r14, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	e8 0e       	add	r14, r24
    15d8:	f0 e2       	ldi	r31, 0x20	; 32
    15da:	ff 2a       	or	r15, r31
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <vfprintf+0xe8>
    15de:	9e 32       	cpi	r25, 0x2E	; 46
    15e0:	29 f4       	brne	.+10     	; 0x15ec <vfprintf+0xda>
    15e2:	f6 fc       	sbrc	r15, 6
    15e4:	6b c1       	rjmp	.+726    	; 0x18bc <vfprintf+0x3aa>
    15e6:	40 e4       	ldi	r20, 0x40	; 64
    15e8:	f4 2a       	or	r15, r20
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <vfprintf+0xe8>
    15ec:	9c 36       	cpi	r25, 0x6C	; 108
    15ee:	19 f4       	brne	.+6      	; 0x15f6 <vfprintf+0xe4>
    15f0:	50 e8       	ldi	r21, 0x80	; 128
    15f2:	f5 2a       	or	r15, r21
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0xe8>
    15f6:	98 36       	cpi	r25, 0x68	; 104
    15f8:	49 f4       	brne	.+18     	; 0x160c <vfprintf+0xfa>
    15fa:	f2 01       	movw	r30, r4
    15fc:	23 fd       	sbrc	r18, 3
    15fe:	95 91       	lpm	r25, Z+
    1600:	23 ff       	sbrs	r18, 3
    1602:	91 91       	ld	r25, Z+
    1604:	2f 01       	movw	r4, r30
    1606:	99 23       	and	r25, r25
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0xfa>
    160a:	b8 cf       	rjmp	.-144    	; 0x157c <vfprintf+0x6a>
    160c:	89 2f       	mov	r24, r25
    160e:	85 54       	subi	r24, 0x45	; 69
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	18 f0       	brcs	.+6      	; 0x161a <vfprintf+0x108>
    1614:	80 52       	subi	r24, 0x20	; 32
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	38 f4       	brcc	.+14     	; 0x1628 <vfprintf+0x116>
    161a:	44 e0       	ldi	r20, 0x04	; 4
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	a4 0e       	add	r10, r20
    1620:	b5 1e       	adc	r11, r21
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	59 83       	std	Y+1, r21	; 0x01
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <vfprintf+0x134>
    1628:	93 36       	cpi	r25, 0x63	; 99
    162a:	31 f0       	breq	.+12     	; 0x1638 <vfprintf+0x126>
    162c:	93 37       	cpi	r25, 0x73	; 115
    162e:	79 f0       	breq	.+30     	; 0x164e <vfprintf+0x13c>
    1630:	93 35       	cpi	r25, 0x53	; 83
    1632:	09 f0       	breq	.+2      	; 0x1636 <vfprintf+0x124>
    1634:	56 c0       	rjmp	.+172    	; 0x16e2 <vfprintf+0x1d0>
    1636:	20 c0       	rjmp	.+64     	; 0x1678 <vfprintf+0x166>
    1638:	f5 01       	movw	r30, r10
    163a:	80 81       	ld	r24, Z
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	42 e0       	ldi	r20, 0x02	; 2
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	a4 0e       	add	r10, r20
    1644:	b5 1e       	adc	r11, r21
    1646:	61 01       	movw	r12, r2
    1648:	01 e0       	ldi	r16, 0x01	; 1
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	12 c0       	rjmp	.+36     	; 0x1672 <vfprintf+0x160>
    164e:	f5 01       	movw	r30, r10
    1650:	c0 80       	ld	r12, Z
    1652:	d1 80       	ldd	r13, Z+1	; 0x01
    1654:	f6 fc       	sbrc	r15, 6
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x14c>
    1658:	6f ef       	ldi	r22, 0xFF	; 255
    165a:	7f ef       	ldi	r23, 0xFF	; 255
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x150>
    165e:	69 2d       	mov	r22, r9
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	42 e0       	ldi	r20, 0x02	; 2
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	a4 0e       	add	r10, r20
    1668:	b5 1e       	adc	r11, r21
    166a:	c6 01       	movw	r24, r12
    166c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <strnlen>
    1670:	8c 01       	movw	r16, r24
    1672:	5f e7       	ldi	r21, 0x7F	; 127
    1674:	f5 22       	and	r15, r21
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <vfprintf+0x18e>
    1678:	f5 01       	movw	r30, r10
    167a:	c0 80       	ld	r12, Z
    167c:	d1 80       	ldd	r13, Z+1	; 0x01
    167e:	f6 fc       	sbrc	r15, 6
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x176>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x17a>
    1688:	69 2d       	mov	r22, r9
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	42 e0       	ldi	r20, 0x02	; 2
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	a4 0e       	add	r10, r20
    1692:	b5 1e       	adc	r11, r21
    1694:	c6 01       	movw	r24, r12
    1696:	0e 94 66 0c 	call	0x18cc	; 0x18cc <strnlen_P>
    169a:	8c 01       	movw	r16, r24
    169c:	50 e8       	ldi	r21, 0x80	; 128
    169e:	f5 2a       	or	r15, r21
    16a0:	f3 fe       	sbrs	r15, 3
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <vfprintf+0x1a0>
    16a4:	1a c0       	rjmp	.+52     	; 0x16da <vfprintf+0x1c8>
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	b3 01       	movw	r22, r6
    16ac:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    16b0:	ea 94       	dec	r14
    16b2:	8e 2d       	mov	r24, r14
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	08 17       	cp	r16, r24
    16b8:	19 07       	cpc	r17, r25
    16ba:	a8 f3       	brcs	.-22     	; 0x16a6 <vfprintf+0x194>
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <vfprintf+0x1c8>
    16be:	f6 01       	movw	r30, r12
    16c0:	f7 fc       	sbrc	r15, 7
    16c2:	85 91       	lpm	r24, Z+
    16c4:	f7 fe       	sbrs	r15, 7
    16c6:	81 91       	ld	r24, Z+
    16c8:	6f 01       	movw	r12, r30
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    16d2:	e1 10       	cpse	r14, r1
    16d4:	ea 94       	dec	r14
    16d6:	01 50       	subi	r16, 0x01	; 1
    16d8:	10 40       	sbci	r17, 0x00	; 0
    16da:	01 15       	cp	r16, r1
    16dc:	11 05       	cpc	r17, r1
    16de:	79 f7       	brne	.-34     	; 0x16be <vfprintf+0x1ac>
    16e0:	ea c0       	rjmp	.+468    	; 0x18b6 <vfprintf+0x3a4>
    16e2:	94 36       	cpi	r25, 0x64	; 100
    16e4:	11 f0       	breq	.+4      	; 0x16ea <vfprintf+0x1d8>
    16e6:	99 36       	cpi	r25, 0x69	; 105
    16e8:	69 f5       	brne	.+90     	; 0x1744 <vfprintf+0x232>
    16ea:	f7 fe       	sbrs	r15, 7
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <vfprintf+0x1ec>
    16ee:	f5 01       	movw	r30, r10
    16f0:	20 81       	ld	r18, Z
    16f2:	31 81       	ldd	r19, Z+1	; 0x01
    16f4:	42 81       	ldd	r20, Z+2	; 0x02
    16f6:	53 81       	ldd	r21, Z+3	; 0x03
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0a c0       	rjmp	.+20     	; 0x1712 <vfprintf+0x200>
    16fe:	f5 01       	movw	r30, r10
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	9c 01       	movw	r18, r24
    1706:	44 27       	eor	r20, r20
    1708:	37 fd       	sbrc	r19, 7
    170a:	40 95       	com	r20
    170c:	54 2f       	mov	r21, r20
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a8 0e       	add	r10, r24
    1714:	b9 1e       	adc	r11, r25
    1716:	9f e6       	ldi	r25, 0x6F	; 111
    1718:	f9 22       	and	r15, r25
    171a:	57 ff       	sbrs	r21, 7
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <vfprintf+0x21e>
    171e:	50 95       	com	r21
    1720:	40 95       	com	r20
    1722:	30 95       	com	r19
    1724:	21 95       	neg	r18
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	4f 4f       	sbci	r20, 0xFF	; 255
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	e0 e8       	ldi	r30, 0x80	; 128
    172e:	fe 2a       	or	r15, r30
    1730:	ca 01       	movw	r24, r20
    1732:	b9 01       	movw	r22, r18
    1734:	a1 01       	movw	r20, r2
    1736:	2a e0       	ldi	r18, 0x0A	; 10
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__ultoa_invert>
    173e:	d8 2e       	mov	r13, r24
    1740:	d2 18       	sub	r13, r2
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <vfprintf+0x2b2>
    1744:	95 37       	cpi	r25, 0x75	; 117
    1746:	29 f4       	brne	.+10     	; 0x1752 <vfprintf+0x240>
    1748:	1f 2d       	mov	r17, r15
    174a:	1f 7e       	andi	r17, 0xEF	; 239
    174c:	2a e0       	ldi	r18, 0x0A	; 10
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	1d c0       	rjmp	.+58     	; 0x178c <vfprintf+0x27a>
    1752:	1f 2d       	mov	r17, r15
    1754:	19 7f       	andi	r17, 0xF9	; 249
    1756:	9f 36       	cpi	r25, 0x6F	; 111
    1758:	61 f0       	breq	.+24     	; 0x1772 <vfprintf+0x260>
    175a:	90 37       	cpi	r25, 0x70	; 112
    175c:	20 f4       	brcc	.+8      	; 0x1766 <vfprintf+0x254>
    175e:	98 35       	cpi	r25, 0x58	; 88
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x252>
    1762:	ac c0       	rjmp	.+344    	; 0x18bc <vfprintf+0x3aa>
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <vfprintf+0x272>
    1766:	90 37       	cpi	r25, 0x70	; 112
    1768:	39 f0       	breq	.+14     	; 0x1778 <vfprintf+0x266>
    176a:	98 37       	cpi	r25, 0x78	; 120
    176c:	09 f0       	breq	.+2      	; 0x1770 <vfprintf+0x25e>
    176e:	a6 c0       	rjmp	.+332    	; 0x18bc <vfprintf+0x3aa>
    1770:	04 c0       	rjmp	.+8      	; 0x177a <vfprintf+0x268>
    1772:	28 e0       	ldi	r18, 0x08	; 8
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	0a c0       	rjmp	.+20     	; 0x178c <vfprintf+0x27a>
    1778:	10 61       	ori	r17, 0x10	; 16
    177a:	14 fd       	sbrc	r17, 4
    177c:	14 60       	ori	r17, 0x04	; 4
    177e:	20 e1       	ldi	r18, 0x10	; 16
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	04 c0       	rjmp	.+8      	; 0x178c <vfprintf+0x27a>
    1784:	14 fd       	sbrc	r17, 4
    1786:	16 60       	ori	r17, 0x06	; 6
    1788:	20 e1       	ldi	r18, 0x10	; 16
    178a:	32 e0       	ldi	r19, 0x02	; 2
    178c:	17 ff       	sbrs	r17, 7
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <vfprintf+0x28e>
    1790:	f5 01       	movw	r30, r10
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	44 e0       	ldi	r20, 0x04	; 4
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <vfprintf+0x29e>
    17a0:	f5 01       	movw	r30, r10
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	bc 01       	movw	r22, r24
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	42 e0       	ldi	r20, 0x02	; 2
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	a4 0e       	add	r10, r20
    17b2:	b5 1e       	adc	r11, r21
    17b4:	a1 01       	movw	r20, r2
    17b6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__ultoa_invert>
    17ba:	d8 2e       	mov	r13, r24
    17bc:	d2 18       	sub	r13, r2
    17be:	8f e7       	ldi	r24, 0x7F	; 127
    17c0:	f8 2e       	mov	r15, r24
    17c2:	f1 22       	and	r15, r17
    17c4:	f6 fe       	sbrs	r15, 6
    17c6:	0b c0       	rjmp	.+22     	; 0x17de <vfprintf+0x2cc>
    17c8:	5e ef       	ldi	r21, 0xFE	; 254
    17ca:	f5 22       	and	r15, r21
    17cc:	d9 14       	cp	r13, r9
    17ce:	38 f4       	brcc	.+14     	; 0x17de <vfprintf+0x2cc>
    17d0:	f4 fe       	sbrs	r15, 4
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <vfprintf+0x2d0>
    17d4:	f2 fc       	sbrc	r15, 2
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <vfprintf+0x2d0>
    17d8:	8f ee       	ldi	r24, 0xEF	; 239
    17da:	f8 22       	and	r15, r24
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x2d0>
    17de:	1d 2d       	mov	r17, r13
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x2d2>
    17e2:	19 2d       	mov	r17, r9
    17e4:	f4 fe       	sbrs	r15, 4
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <vfprintf+0x2f0>
    17e8:	fe 01       	movw	r30, r28
    17ea:	ed 0d       	add	r30, r13
    17ec:	f1 1d       	adc	r31, r1
    17ee:	80 81       	ld	r24, Z
    17f0:	80 33       	cpi	r24, 0x30	; 48
    17f2:	19 f4       	brne	.+6      	; 0x17fa <vfprintf+0x2e8>
    17f4:	99 ee       	ldi	r25, 0xE9	; 233
    17f6:	f9 22       	and	r15, r25
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <vfprintf+0x2f8>
    17fa:	1f 5f       	subi	r17, 0xFF	; 255
    17fc:	f2 fe       	sbrs	r15, 2
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <vfprintf+0x2f8>
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <vfprintf+0x2f6>
    1802:	8f 2d       	mov	r24, r15
    1804:	86 78       	andi	r24, 0x86	; 134
    1806:	09 f0       	breq	.+2      	; 0x180a <vfprintf+0x2f8>
    1808:	1f 5f       	subi	r17, 0xFF	; 255
    180a:	0f 2d       	mov	r16, r15
    180c:	f3 fc       	sbrc	r15, 3
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <vfprintf+0x326>
    1810:	f0 fe       	sbrs	r15, 0
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <vfprintf+0x320>
    1814:	1e 15       	cp	r17, r14
    1816:	10 f0       	brcs	.+4      	; 0x181c <vfprintf+0x30a>
    1818:	9d 2c       	mov	r9, r13
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <vfprintf+0x320>
    181c:	9d 2c       	mov	r9, r13
    181e:	9e 0c       	add	r9, r14
    1820:	91 1a       	sub	r9, r17
    1822:	1e 2d       	mov	r17, r14
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x320>
    1826:	80 e2       	ldi	r24, 0x20	; 32
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	b3 01       	movw	r22, r6
    182c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    1830:	1f 5f       	subi	r17, 0xFF	; 255
    1832:	1e 15       	cp	r17, r14
    1834:	c0 f3       	brcs	.-16     	; 0x1826 <vfprintf+0x314>
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <vfprintf+0x32e>
    1838:	1e 15       	cp	r17, r14
    183a:	10 f4       	brcc	.+4      	; 0x1840 <vfprintf+0x32e>
    183c:	e1 1a       	sub	r14, r17
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <vfprintf+0x330>
    1840:	ee 24       	eor	r14, r14
    1842:	04 ff       	sbrs	r16, 4
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <vfprintf+0x352>
    1846:	80 e3       	ldi	r24, 0x30	; 48
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b3 01       	movw	r22, r6
    184c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    1850:	02 ff       	sbrs	r16, 2
    1852:	1d c0       	rjmp	.+58     	; 0x188e <vfprintf+0x37c>
    1854:	01 fd       	sbrc	r16, 1
    1856:	03 c0       	rjmp	.+6      	; 0x185e <vfprintf+0x34c>
    1858:	88 e7       	ldi	r24, 0x78	; 120
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e c0       	rjmp	.+28     	; 0x187a <vfprintf+0x368>
    185e:	88 e5       	ldi	r24, 0x58	; 88
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0b c0       	rjmp	.+22     	; 0x187a <vfprintf+0x368>
    1864:	80 2f       	mov	r24, r16
    1866:	86 78       	andi	r24, 0x86	; 134
    1868:	91 f0       	breq	.+36     	; 0x188e <vfprintf+0x37c>
    186a:	01 ff       	sbrs	r16, 1
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <vfprintf+0x360>
    186e:	8b e2       	ldi	r24, 0x2B	; 43
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <vfprintf+0x362>
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	f7 fc       	sbrc	r15, 7
    1876:	8d e2       	ldi	r24, 0x2D	; 45
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b3 01       	movw	r22, r6
    187c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x37c>
    1882:	80 e3       	ldi	r24, 0x30	; 48
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	b3 01       	movw	r22, r6
    1888:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    188c:	9a 94       	dec	r9
    188e:	d9 14       	cp	r13, r9
    1890:	c0 f3       	brcs	.-16     	; 0x1882 <vfprintf+0x370>
    1892:	da 94       	dec	r13
    1894:	f1 01       	movw	r30, r2
    1896:	ed 0d       	add	r30, r13
    1898:	f1 1d       	adc	r31, r1
    189a:	80 81       	ld	r24, Z
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b3 01       	movw	r22, r6
    18a0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    18a4:	dd 20       	and	r13, r13
    18a6:	a9 f7       	brne	.-22     	; 0x1892 <vfprintf+0x380>
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <vfprintf+0x3a4>
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	b3 01       	movw	r22, r6
    18b0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <fputc>
    18b4:	ea 94       	dec	r14
    18b6:	ee 20       	and	r14, r14
    18b8:	c1 f7       	brne	.-16     	; 0x18aa <vfprintf+0x398>
    18ba:	43 ce       	rjmp	.-890    	; 0x1542 <vfprintf+0x30>
    18bc:	f3 01       	movw	r30, r6
    18be:	66 81       	ldd	r22, Z+6	; 0x06
    18c0:	77 81       	ldd	r23, Z+7	; 0x07
    18c2:	cb 01       	movw	r24, r22
    18c4:	2b 96       	adiw	r28, 0x0b	; 11
    18c6:	e2 e1       	ldi	r30, 0x12	; 18
    18c8:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__epilogue_restores__>

000018cc <strnlen_P>:
    18cc:	fc 01       	movw	r30, r24
    18ce:	05 90       	lpm	r0, Z+
    18d0:	61 50       	subi	r22, 0x01	; 1
    18d2:	70 40       	sbci	r23, 0x00	; 0
    18d4:	01 10       	cpse	r0, r1
    18d6:	d8 f7       	brcc	.-10     	; 0x18ce <strnlen_P+0x2>
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	8e 0f       	add	r24, r30
    18de:	9f 1f       	adc	r25, r31
    18e0:	08 95       	ret

000018e2 <strnlen>:
    18e2:	fc 01       	movw	r30, r24
    18e4:	61 50       	subi	r22, 0x01	; 1
    18e6:	70 40       	sbci	r23, 0x00	; 0
    18e8:	01 90       	ld	r0, Z+
    18ea:	01 10       	cpse	r0, r1
    18ec:	d8 f7       	brcc	.-10     	; 0x18e4 <strnlen+0x2>
    18ee:	80 95       	com	r24
    18f0:	90 95       	com	r25
    18f2:	8e 0f       	add	r24, r30
    18f4:	9f 1f       	adc	r25, r31
    18f6:	08 95       	ret

000018f8 <strrev>:
    18f8:	dc 01       	movw	r26, r24
    18fa:	fc 01       	movw	r30, r24
    18fc:	67 2f       	mov	r22, r23
    18fe:	71 91       	ld	r23, Z+
    1900:	77 23       	and	r23, r23
    1902:	e1 f7       	brne	.-8      	; 0x18fc <strrev+0x4>
    1904:	32 97       	sbiw	r30, 0x02	; 2
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <strrev+0x18>
    1908:	7c 91       	ld	r23, X
    190a:	6d 93       	st	X+, r22
    190c:	70 83       	st	Z, r23
    190e:	62 91       	ld	r22, -Z
    1910:	ae 17       	cp	r26, r30
    1912:	bf 07       	cpc	r27, r31
    1914:	c8 f3       	brcs	.-14     	; 0x1908 <strrev+0x10>
    1916:	08 95       	ret

00001918 <fputc>:
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	8c 01       	movw	r16, r24
    1922:	eb 01       	movw	r28, r22
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	81 ff       	sbrs	r24, 1
    1928:	1b c0       	rjmp	.+54     	; 0x1960 <fputc+0x48>
    192a:	82 ff       	sbrs	r24, 2
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <fputc+0x30>
    192e:	2e 81       	ldd	r18, Y+6	; 0x06
    1930:	3f 81       	ldd	r19, Y+7	; 0x07
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	28 17       	cp	r18, r24
    1938:	39 07       	cpc	r19, r25
    193a:	64 f4       	brge	.+24     	; 0x1954 <fputc+0x3c>
    193c:	e8 81       	ld	r30, Y
    193e:	f9 81       	ldd	r31, Y+1	; 0x01
    1940:	01 93       	st	Z+, r16
    1942:	f9 83       	std	Y+1, r31	; 0x01
    1944:	e8 83       	st	Y, r30
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <fputc+0x3c>
    1948:	e8 85       	ldd	r30, Y+8	; 0x08
    194a:	f9 85       	ldd	r31, Y+9	; 0x09
    194c:	80 2f       	mov	r24, r16
    194e:	09 95       	icall
    1950:	89 2b       	or	r24, r25
    1952:	31 f4       	brne	.+12     	; 0x1960 <fputc+0x48>
    1954:	8e 81       	ldd	r24, Y+6	; 0x06
    1956:	9f 81       	ldd	r25, Y+7	; 0x07
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	9f 83       	std	Y+7, r25	; 0x07
    195c:	8e 83       	std	Y+6, r24	; 0x06
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <fputc+0x4c>
    1960:	0f ef       	ldi	r16, 0xFF	; 255
    1962:	1f ef       	ldi	r17, 0xFF	; 255
    1964:	c8 01       	movw	r24, r16
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <__ultoa_invert>:
    1970:	fa 01       	movw	r30, r20
    1972:	aa 27       	eor	r26, r26
    1974:	28 30       	cpi	r18, 0x08	; 8
    1976:	51 f1       	breq	.+84     	; 0x19cc <__ultoa_invert+0x5c>
    1978:	20 31       	cpi	r18, 0x10	; 16
    197a:	81 f1       	breq	.+96     	; 0x19dc <__ultoa_invert+0x6c>
    197c:	e8 94       	clt
    197e:	6f 93       	push	r22
    1980:	6e 7f       	andi	r22, 0xFE	; 254
    1982:	6e 5f       	subi	r22, 0xFE	; 254
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	af 4f       	sbci	r26, 0xFF	; 255
    198c:	b1 e0       	ldi	r27, 0x01	; 1
    198e:	3e d0       	rcall	.+124    	; 0x1a0c <__ultoa_invert+0x9c>
    1990:	b4 e0       	ldi	r27, 0x04	; 4
    1992:	3c d0       	rcall	.+120    	; 0x1a0c <__ultoa_invert+0x9c>
    1994:	67 0f       	add	r22, r23
    1996:	78 1f       	adc	r23, r24
    1998:	89 1f       	adc	r24, r25
    199a:	9a 1f       	adc	r25, r26
    199c:	a1 1d       	adc	r26, r1
    199e:	68 0f       	add	r22, r24
    19a0:	79 1f       	adc	r23, r25
    19a2:	8a 1f       	adc	r24, r26
    19a4:	91 1d       	adc	r25, r1
    19a6:	a1 1d       	adc	r26, r1
    19a8:	6a 0f       	add	r22, r26
    19aa:	71 1d       	adc	r23, r1
    19ac:	81 1d       	adc	r24, r1
    19ae:	91 1d       	adc	r25, r1
    19b0:	a1 1d       	adc	r26, r1
    19b2:	20 d0       	rcall	.+64     	; 0x19f4 <__ultoa_invert+0x84>
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <__ultoa_invert+0x48>
    19b6:	68 94       	set
    19b8:	3f 91       	pop	r19
    19ba:	2a e0       	ldi	r18, 0x0A	; 10
    19bc:	26 9f       	mul	r18, r22
    19be:	11 24       	eor	r1, r1
    19c0:	30 19       	sub	r19, r0
    19c2:	30 5d       	subi	r19, 0xD0	; 208
    19c4:	31 93       	st	Z+, r19
    19c6:	de f6       	brtc	.-74     	; 0x197e <__ultoa_invert+0xe>
    19c8:	cf 01       	movw	r24, r30
    19ca:	08 95       	ret
    19cc:	46 2f       	mov	r20, r22
    19ce:	47 70       	andi	r20, 0x07	; 7
    19d0:	40 5d       	subi	r20, 0xD0	; 208
    19d2:	41 93       	st	Z+, r20
    19d4:	b3 e0       	ldi	r27, 0x03	; 3
    19d6:	0f d0       	rcall	.+30     	; 0x19f6 <__ultoa_invert+0x86>
    19d8:	c9 f7       	brne	.-14     	; 0x19cc <__ultoa_invert+0x5c>
    19da:	f6 cf       	rjmp	.-20     	; 0x19c8 <__ultoa_invert+0x58>
    19dc:	46 2f       	mov	r20, r22
    19de:	4f 70       	andi	r20, 0x0F	; 15
    19e0:	40 5d       	subi	r20, 0xD0	; 208
    19e2:	4a 33       	cpi	r20, 0x3A	; 58
    19e4:	18 f0       	brcs	.+6      	; 0x19ec <__ultoa_invert+0x7c>
    19e6:	49 5d       	subi	r20, 0xD9	; 217
    19e8:	31 fd       	sbrc	r19, 1
    19ea:	40 52       	subi	r20, 0x20	; 32
    19ec:	41 93       	st	Z+, r20
    19ee:	02 d0       	rcall	.+4      	; 0x19f4 <__ultoa_invert+0x84>
    19f0:	a9 f7       	brne	.-22     	; 0x19dc <__ultoa_invert+0x6c>
    19f2:	ea cf       	rjmp	.-44     	; 0x19c8 <__ultoa_invert+0x58>
    19f4:	b4 e0       	ldi	r27, 0x04	; 4
    19f6:	a6 95       	lsr	r26
    19f8:	97 95       	ror	r25
    19fa:	87 95       	ror	r24
    19fc:	77 95       	ror	r23
    19fe:	67 95       	ror	r22
    1a00:	ba 95       	dec	r27
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__ultoa_invert+0x86>
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 05       	cpc	r22, r1
    1a08:	71 05       	cpc	r23, r1
    1a0a:	08 95       	ret
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	0a 2e       	mov	r0, r26
    1a12:	06 94       	lsr	r0
    1a14:	57 95       	ror	r21
    1a16:	47 95       	ror	r20
    1a18:	37 95       	ror	r19
    1a1a:	27 95       	ror	r18
    1a1c:	ba 95       	dec	r27
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__ultoa_invert+0xa2>
    1a20:	62 0f       	add	r22, r18
    1a22:	73 1f       	adc	r23, r19
    1a24:	84 1f       	adc	r24, r20
    1a26:	95 1f       	adc	r25, r21
    1a28:	a0 1d       	adc	r26, r0
    1a2a:	08 95       	ret

00001a2c <__prologue_saves__>:
    1a2c:	2f 92       	push	r2
    1a2e:	3f 92       	push	r3
    1a30:	4f 92       	push	r4
    1a32:	5f 92       	push	r5
    1a34:	6f 92       	push	r6
    1a36:	7f 92       	push	r7
    1a38:	8f 92       	push	r8
    1a3a:	9f 92       	push	r9
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	ca 1b       	sub	r28, r26
    1a56:	db 0b       	sbc	r29, r27
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	09 94       	ijmp

00001a64 <__epilogue_restores__>:
    1a64:	2a 88       	ldd	r2, Y+18	; 0x12
    1a66:	39 88       	ldd	r3, Y+17	; 0x11
    1a68:	48 88       	ldd	r4, Y+16	; 0x10
    1a6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a70:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a72:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a74:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a76:	b9 84       	ldd	r11, Y+9	; 0x09
    1a78:	c8 84       	ldd	r12, Y+8	; 0x08
    1a7a:	df 80       	ldd	r13, Y+7	; 0x07
    1a7c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a7e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a80:	0c 81       	ldd	r16, Y+4	; 0x04
    1a82:	1b 81       	ldd	r17, Y+3	; 0x03
    1a84:	aa 81       	ldd	r26, Y+2	; 0x02
    1a86:	b9 81       	ldd	r27, Y+1	; 0x01
    1a88:	ce 0f       	add	r28, r30
    1a8a:	d1 1d       	adc	r29, r1
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	ed 01       	movw	r28, r26
    1a98:	08 95       	ret

00001a9a <_exit>:
    1a9a:	f8 94       	cli

00001a9c <__stop_program>:
    1a9c:	ff cf       	rjmp	.-2      	; 0x1a9c <__stop_program>
