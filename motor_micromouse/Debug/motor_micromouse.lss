
motor_micromouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001cd6  00001d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000532  00800080  00800080  00001d8a  2**0
                  ALLOC
  3 .stab         00003318  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ead  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 09 	call	0x1368	; 0x1368 <main>
      8a:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <right_wall>:
 */
#include"walls.h"


	uint8 right_wall(void){
			if(s7 == 1 || s8 == 1 ){
      92:	80 91 ac 04 	lds	r24, 0x04AC
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	29 f0       	breq	.+10     	; 0xa4 <right_wall+0x12>
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	80 91 a8 04 	lds	r24, 0x04A8
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	09 f4       	brne	.+2      	; 0xa6 <right_wall+0x14>
      a4:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else {
				return 0;
			}
		}
      a6:	89 2f       	mov	r24, r25
      a8:	08 95       	ret

000000aa <left_wall>:
		uint8 left_wall(void){
			if(s1 ==1 || s2 ==1){
      aa:	80 91 a6 04 	lds	r24, 0x04A6
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	29 f0       	breq	.+10     	; 0xbc <left_wall+0x12>
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	80 91 aa 04 	lds	r24, 0x04AA
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	09 f4       	brne	.+2      	; 0xbe <left_wall+0x14>
      bc:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else{
				return 0;
			}
		}
      be:	89 2f       	mov	r24, r25
      c0:	08 95       	ret

000000c2 <front_wall>:
		uint8 front_wall(void){

			if(s4 == 1 || s5 == 1){
      c2:	80 91 a7 04 	lds	r24, 0x04A7
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	29 f0       	breq	.+10     	; 0xd4 <front_wall+0x12>
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	80 91 a9 04 	lds	r24, 0x04A9
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	09 f4       	brne	.+2      	; 0xd6 <front_wall+0x14>
      d4:	91 e0       	ldi	r25, 0x01	; 1
				return 1;
			}
			else{
				return 0;
			}
		}
      d6:	89 2f       	mov	r24, r25
      d8:	08 95       	ret

000000da <checkTravelArray>:
Heading pathArray[MAZE_WIDTH][MAZE_HEIGHT] = {{NORTH}};
// keeps track of all of the cells that the mouse has visited
uint8 travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
      da:	fb 01       	movw	r30, r22
      dc:	24 e0       	ldi	r18, 0x04	; 4
      de:	ee 0f       	add	r30, r30
      e0:	ff 1f       	adc	r31, r31
      e2:	2a 95       	dec	r18
      e4:	e1 f7       	brne	.-8      	; 0xde <checkTravelArray+0x4>
      e6:	e8 0f       	add	r30, r24
      e8:	f9 1f       	adc	r31, r25
      ea:	eb 55       	subi	r30, 0x5B	; 91
      ec:	fc 4f       	sbci	r31, 0xFC	; 252
      ee:	80 81       	ld	r24, Z
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret

000000f4 <updateTravelArray>:
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
      f4:	fb 01       	movw	r30, r22
      f6:	34 e0       	ldi	r19, 0x04	; 4
      f8:	ee 0f       	add	r30, r30
      fa:	ff 1f       	adc	r31, r31
      fc:	3a 95       	dec	r19
      fe:	e1 f7       	brne	.-8      	; 0xf8 <updateTravelArray+0x4>
     100:	e8 0f       	add	r30, r24
     102:	f9 1f       	adc	r31, r25
     104:	eb 55       	subi	r30, 0x5B	; 91
     106:	fc 4f       	sbci	r31, 0xFC	; 252
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	80 83       	st	Z, r24
     10c:	08 95       	ret

0000010e <updateFloodArray>:
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) {floodArray[c.x][c.y] = val;}
     10e:	fb 01       	movw	r30, r22
     110:	54 e0       	ldi	r21, 0x04	; 4
     112:	ee 0f       	add	r30, r30
     114:	ff 1f       	adc	r31, r31
     116:	5a 95       	dec	r21
     118:	e1 f7       	brne	.-8      	; 0x112 <updateFloodArray+0x4>
     11a:	e8 0f       	add	r30, r24
     11c:	f9 1f       	adc	r31, r25
     11e:	e3 55       	subi	r30, 0x53	; 83
     120:	fb 4f       	sbci	r31, 0xFB	; 251
     122:	40 83       	st	Z, r20
     124:	08 95       	ret

00000126 <getFloodArray>:
// given coordinate, gets the respective cell's floodfill value
uint8 getFloodArray(coord c) {return floodArray[c.x][c.y];}
     126:	fb 01       	movw	r30, r22
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	ee 0f       	add	r30, r30
     12c:	ff 1f       	adc	r31, r31
     12e:	6a 95       	dec	r22
     130:	e1 f7       	brne	.-8      	; 0x12a <getFloodArray+0x4>
     132:	e8 0f       	add	r30, r24
     134:	f9 1f       	adc	r31, r25
     136:	e3 55       	subi	r30, 0x53	; 83
     138:	fb 4f       	sbci	r31, 0xFB	; 251
     13a:	80 81       	ld	r24, Z
     13c:	08 95       	ret

0000013e <updatePathArray>:
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
     13e:	fb 01       	movw	r30, r22
     140:	74 e0       	ldi	r23, 0x04	; 4
     142:	ee 0f       	add	r30, r30
     144:	ff 1f       	adc	r31, r31
     146:	7a 95       	dec	r23
     148:	e1 f7       	brne	.-8      	; 0x142 <updatePathArray+0x4>
     14a:	e8 0f       	add	r30, r24
     14c:	f9 1f       	adc	r31, r25
     14e:	eb 55       	subi	r30, 0x5B	; 91
     150:	fd 4f       	sbci	r31, 0xFD	; 253
     152:	40 83       	st	Z, r20
     154:	08 95       	ret

00000156 <getPathArray>:
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) {return pathArray[c.x][c.y];}
     156:	fb 01       	movw	r30, r22
     158:	a4 e0       	ldi	r26, 0x04	; 4
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	aa 95       	dec	r26
     160:	e1 f7       	brne	.-8      	; 0x15a <getPathArray+0x4>
     162:	e8 0f       	add	r30, r24
     164:	f9 1f       	adc	r31, r25
     166:	eb 55       	subi	r30, 0x5B	; 91
     168:	fd 4f       	sbci	r31, 0xFD	; 253
     16a:	80 81       	ld	r24, Z
     16c:	08 95       	ret

0000016e <resetFloodArray>:

/* Floodfill Functions */

// resets the floodfill array to target the center as destination
void resetFloodArray()
{
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
        for (int y = 0; y < MAZE_HEIGHT; y++)
            floodArray[x][y] = -1;
     172:	4f ef       	ldi	r20, 0xFF	; 255
     174:	0a c0       	rjmp	.+20     	; 0x18a <resetFloodArray+0x1c>
     176:	41 93       	st	Z+, r20
// resets the floodfill array to target the center as destination
void resetFloodArray()
{
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
        for (int y = 0; y < MAZE_HEIGHT; y++)
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	80 31       	cpi	r24, 0x10	; 16
     17c:	91 05       	cpc	r25, r1
     17e:	d9 f7       	brne	.-10     	; 0x176 <resetFloodArray+0x8>

// resets the floodfill array to target the center as destination
void resetFloodArray()
{
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
     184:	20 31       	cpi	r18, 0x10	; 16
     186:	31 05       	cpc	r19, r1
     188:	59 f0       	breq	.+22     	; 0x1a0 <resetFloodArray+0x32>
     18a:	f9 01       	movw	r30, r18
     18c:	b4 e0       	ldi	r27, 0x04	; 4
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	ba 95       	dec	r27
     194:	e1 f7       	brne	.-8      	; 0x18e <resetFloodArray+0x20>
     196:	e3 55       	subi	r30, 0x53	; 83
     198:	fb 4f       	sbci	r31, 0xFB	; 251
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	eb cf       	rjmp	.-42     	; 0x176 <resetFloodArray+0x8>
        for (int y = 0; y < MAZE_HEIGHT; y++)
            floodArray[x][y] = -1;
    // set desired goal values
    if (target) // target is goal (center)
     1a0:	80 91 77 00 	lds	r24, 0x0077
     1a4:	88 23       	and	r24, r24
     1a6:	51 f0       	breq	.+20     	; 0x1bc <resetFloodArray+0x4e>
     1a8:	e4 e2       	ldi	r30, 0x24	; 36
     1aa:	f5 e0       	ldi	r31, 0x05	; 5
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
                floodArray[x][y] = 0;
     1ac:	10 82       	st	Z, r1
     1ae:	11 82       	std	Z+1, r1	; 0x01
     1b0:	70 96       	adiw	r30, 0x10	; 16
    for (int x = 0; x < MAZE_WIDTH; x++)
        for (int y = 0; y < MAZE_HEIGHT; y++)
            floodArray[x][y] = -1;
    // set desired goal values
    if (target) // target is goal (center)
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	e4 34       	cpi	r30, 0x44	; 68
     1b6:	f8 07       	cpc	r31, r24
     1b8:	c9 f7       	brne	.-14     	; 0x1ac <resetFloodArray+0x3e>
     1ba:	08 95       	ret
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
                floodArray[x][y] = 0;
    else // target is starting cell
        floodArray[STARTING_X][STARTING_Y] = 0;
     1bc:	10 92 ad 04 	sts	0x04AD, r1
     1c0:	08 95       	ret

000001c2 <checkWall>:
}

// given heading and coordinate, check if there is a wall on that side of the cell
int checkWall(Heading heading, coord c) {
     1c2:	da 01       	movw	r26, r20
     1c4:	ab 01       	movw	r20, r22
    switch (heading) {
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	21 f1       	breq	.+72     	; 0x212 <checkWall+0x50>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	28 f0       	brcs	.+10     	; 0x1d8 <checkWall+0x16>
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	89 f0       	breq	.+34     	; 0x1f4 <checkWall+0x32>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	49 f5       	brne	.+82     	; 0x228 <checkWall+0x66>
     1d6:	1c c0       	rjmp	.+56     	; 0x210 <checkWall+0x4e>
        case NORTH: return horizontalWalls[c.x][c.y+1];
     1d8:	fd 01       	movw	r30, r26
     1da:	24 e0       	ldi	r18, 0x04	; 4
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	2a 95       	dec	r18
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <checkWall+0x1a>
     1e4:	ea 0f       	add	r30, r26
     1e6:	fb 1f       	adc	r31, r27
     1e8:	eb 56       	subi	r30, 0x6B	; 107
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	e6 0f       	add	r30, r22
     1ee:	f7 1f       	adc	r31, r23
     1f0:	81 81       	ldd	r24, Z+1	; 0x01
     1f2:	1b c0       	rjmp	.+54     	; 0x22a <checkWall+0x68>
        case WEST: return verticalWalls[c.x][c.y];
        case SOUTH: return horizontalWalls[c.x][c.y];
     1f4:	fd 01       	movw	r30, r26
     1f6:	94 e0       	ldi	r25, 0x04	; 4
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	9a 95       	dec	r25
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <checkWall+0x36>
     200:	ea 0f       	add	r30, r26
     202:	fb 1f       	adc	r31, r27
     204:	e6 0f       	add	r30, r22
     206:	f7 1f       	adc	r31, r23
     208:	eb 56       	subi	r30, 0x6B	; 107
     20a:	fe 4f       	sbci	r31, 0xFE	; 254
     20c:	80 81       	ld	r24, Z
     20e:	0d c0       	rjmp	.+26     	; 0x22a <checkWall+0x68>
        case EAST: return verticalWalls[c.x+1][c.y];
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	aa 0f       	add	r26, r26
     216:	bb 1f       	adc	r27, r27
     218:	8a 95       	dec	r24
     21a:	e1 f7       	brne	.-8      	; 0x214 <checkWall+0x52>
     21c:	a4 0f       	add	r26, r20
     21e:	b5 1f       	adc	r27, r21
     220:	ab 57       	subi	r26, 0x7B	; 123
     222:	bf 4f       	sbci	r27, 0xFF	; 255
     224:	8c 91       	ld	r24, X
     226:	01 c0       	rjmp	.+2      	; 0x22a <checkWall+0x68>
     228:	08 95       	ret
    }
}
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	08 95       	ret

0000022e <incrementCoord>:

// Increments coord in the direction of the heading by input integer, then returns updated coord
coord incrementCoord(Heading heading, coord c, int numCells) {
     22e:	fb 01       	movw	r30, r22
    switch (heading) {
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	51 f0       	breq	.+20     	; 0x248 <incrementCoord+0x1a>
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	28 f0       	brcs	.+10     	; 0x242 <incrementCoord+0x14>
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	59 f0       	breq	.+22     	; 0x252 <incrementCoord+0x24>
     23c:	83 30       	cpi	r24, 0x03	; 3
     23e:	89 f4       	brne	.+34     	; 0x262 <incrementCoord+0x34>
     240:	0c c0       	rjmp	.+24     	; 0x25a <incrementCoord+0x2c>
        case NORTH: return (coord){c.x, c.y += numCells};
     242:	e2 0f       	add	r30, r18
     244:	f3 1f       	adc	r31, r19
     246:	07 c0       	rjmp	.+14     	; 0x256 <incrementCoord+0x28>
        case WEST: return (coord){c.x -= numCells, c.y};
     248:	ca 01       	movw	r24, r20
     24a:	82 1b       	sub	r24, r18
     24c:	93 0b       	sbc	r25, r19
     24e:	9c 01       	movw	r18, r24
     250:	06 c0       	rjmp	.+12     	; 0x25e <incrementCoord+0x30>
        case SOUTH: return (coord){c.x, c.y -= numCells};
     252:	e2 1b       	sub	r30, r18
     254:	f3 0b       	sbc	r31, r19
     256:	9a 01       	movw	r18, r20
     258:	05 c0       	rjmp	.+10     	; 0x264 <incrementCoord+0x36>
        case EAST: return (coord){c.x += numCells, c.y};
     25a:	24 0f       	add	r18, r20
     25c:	35 1f       	adc	r19, r21
     25e:	fb 01       	movw	r30, r22
     260:	01 c0       	rjmp	.+2      	; 0x264 <incrementCoord+0x36>
     262:	08 95       	ret
    }
}
     264:	b9 01       	movw	r22, r18
     266:	cf 01       	movw	r24, r30
     268:	08 95       	ret

0000026a <turnLeft>:

// turns currentHeading global variable to the left based on the mouse's current heading,
// then returns LEFT action
Action turnLeft() {
    imp = 5;
     26a:	85 e0       	ldi	r24, 0x05	; 5
     26c:	80 93 ad 05 	sts	0x05AD, r24
    currentHeading = (Heading)((currentHeading+1)%4);
     270:	80 91 84 00 	lds	r24, 0x0084
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	01 96       	adiw	r24, 0x01	; 1
     278:	83 70       	andi	r24, 0x03	; 3
     27a:	90 70       	andi	r25, 0x00	; 0
     27c:	80 93 84 00 	sts	0x0084, r24
    return LEFT;
}
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret

00000284 <turnRight>:

// turns currentHeading global variable to the right based on the mouse's current heading,
// then returns RIGHT action
Action turnRight() {
    imp = 3;
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	80 93 ad 05 	sts	0x05AD, r24
    currentHeading = (Heading)((currentHeading-1+4)%4);;
     28a:	80 91 84 00 	lds	r24, 0x0084
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	03 96       	adiw	r24, 0x03	; 3
     292:	83 70       	andi	r24, 0x03	; 3
     294:	90 70       	andi	r25, 0x00	; 0
     296:	80 93 84 00 	sts	0x0084, r24
    return RIGHT;
}
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	08 95       	ret

0000029e <mouseInGoal>:

// returns whether the mouse is in the target
unsigned char mouseInGoal() {
    return (target == 1 && (currentXY.x >= LOWER_X_GOAL && currentXY.x <= UPPER_X_GOAL && currentXY.y >= LOWER_Y_GOAL && currentXY.y <= UPPER_Y_GOAL));
     29e:	80 91 77 00 	lds	r24, 0x0077
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	b9 f4       	brne	.+46     	; 0x2d4 <mouseInGoal+0x36>
     2a6:	80 91 80 00 	lds	r24, 0x0080
     2aa:	90 91 81 00 	lds	r25, 0x0081
     2ae:	07 97       	sbiw	r24, 0x07	; 7
     2b0:	02 97       	sbiw	r24, 0x02	; 2
     2b2:	80 f4       	brcc	.+32     	; 0x2d4 <mouseInGoal+0x36>
     2b4:	20 91 82 00 	lds	r18, 0x0082
     2b8:	30 91 83 00 	lds	r19, 0x0083
     2bc:	27 30       	cpi	r18, 0x07	; 7
     2be:	31 05       	cpc	r19, r1
     2c0:	4c f0       	brlt	.+18     	; 0x2d4 <mouseInGoal+0x36>
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	29 30       	cpi	r18, 0x09	; 9
     2c6:	31 05       	cpc	r19, r1
     2c8:	0c f0       	brlt	.+2      	; 0x2cc <mouseInGoal+0x2e>
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	98 27       	eor	r25, r24
     2d0:	89 2f       	mov	r24, r25
     2d2:	08 95       	ret
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
}
     2d8:	08 95       	ret

000002da <getNeighbor>:

// given heading and coordinates, returns the floodfill value of the corresponding neighbor cell.
// if the neighbor is off of the maze (argument cell is on the boundary of the maze), return -2
int getNeighbor(Heading heading, coord c)
{
     2da:	db 01       	movw	r26, r22
     2dc:	fa 01       	movw	r30, r20
    switch (heading) {
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	a9 f0       	breq	.+42     	; 0x30c <getNeighbor+0x32>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	28 f0       	brcs	.+10     	; 0x2f0 <getNeighbor+0x16>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	b1 f0       	breq	.+44     	; 0x316 <getNeighbor+0x3c>
     2ea:	83 30       	cpi	r24, 0x03	; 3
     2ec:	91 f5       	brne	.+100    	; 0x352 <getNeighbor+0x78>
     2ee:	22 c0       	rjmp	.+68     	; 0x334 <getNeighbor+0x5a>
        case NORTH:
            if (c.y >= 15) return OUT_OF_BOUNDS;
     2f0:	6f 30       	cpi	r22, 0x0F	; 15
     2f2:	71 05       	cpc	r23, r1
     2f4:	7c f5       	brge	.+94     	; 0x354 <getNeighbor+0x7a>
            else return floodArray[c.x][c.y+1];
     2f6:	54 e0       	ldi	r21, 0x04	; 4
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	5a 95       	dec	r21
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <getNeighbor+0x1e>
     300:	e3 55       	subi	r30, 0x53	; 83
     302:	fb 4f       	sbci	r31, 0xFB	; 251
     304:	e6 0f       	add	r30, r22
     306:	f7 1f       	adc	r31, r23
     308:	81 81       	ldd	r24, Z+1	; 0x01
     30a:	12 c0       	rjmp	.+36     	; 0x330 <getNeighbor+0x56>
        case WEST:
            if (c.x <= 0) return OUT_OF_BOUNDS;
     30c:	14 16       	cp	r1, r20
     30e:	15 06       	cpc	r1, r21
     310:	0c f5       	brge	.+66     	; 0x354 <getNeighbor+0x7a>
            else return floodArray[c.x-1][c.y];
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	13 c0       	rjmp	.+38     	; 0x33c <getNeighbor+0x62>
        case SOUTH:
            if (c.y <= 0) return OUT_OF_BOUNDS;
     316:	16 16       	cp	r1, r22
     318:	17 06       	cpc	r1, r23
     31a:	e4 f4       	brge	.+56     	; 0x354 <getNeighbor+0x7a>
            else return floodArray[c.x][c.y-1];
     31c:	44 e0       	ldi	r20, 0x04	; 4
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	4a 95       	dec	r20
     324:	e1 f7       	brne	.-8      	; 0x31e <getNeighbor+0x44>
     326:	ae 0f       	add	r26, r30
     328:	bf 1f       	adc	r27, r31
     32a:	a4 55       	subi	r26, 0x54	; 84
     32c:	bb 4f       	sbci	r27, 0xFB	; 251
     32e:	8c 91       	ld	r24, X
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	12 c0       	rjmp	.+36     	; 0x358 <getNeighbor+0x7e>
        case EAST:
            if (c.x >= 15) return OUT_OF_BOUNDS;
     334:	4f 30       	cpi	r20, 0x0F	; 15
     336:	51 05       	cpc	r21, r1
     338:	6c f4       	brge	.+26     	; 0x354 <getNeighbor+0x7a>
            else return floodArray[c.x+1][c.y];
     33a:	31 96       	adiw	r30, 0x01	; 1
     33c:	34 e0       	ldi	r19, 0x04	; 4
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	3a 95       	dec	r19
     344:	e1 f7       	brne	.-8      	; 0x33e <getNeighbor+0x64>
     346:	ea 0f       	add	r30, r26
     348:	fb 1f       	adc	r31, r27
     34a:	e3 55       	subi	r30, 0x53	; 83
     34c:	fb 4f       	sbci	r31, 0xFB	; 251
     34e:	80 81       	ld	r24, Z
     350:	ef cf       	rjmp	.-34     	; 0x330 <getNeighbor+0x56>
     352:	03 c0       	rjmp	.+6      	; 0x35a <getNeighbor+0x80>
    }
}
     354:	8e ef       	ldi	r24, 0xFE	; 254
     356:	9f ef       	ldi	r25, 0xFF	; 255
     358:	28 2f       	mov	r18, r24
     35a:	82 2f       	mov	r24, r18
     35c:	08 95       	ret

0000035e <placeWall>:
        generateNeighbor(q,EAST,current,currentVal);
    }
}

// places a wall in respective arrays and API at the given heading and coordinate
void placeWall(Heading heading, coord c) {
     35e:	da 01       	movw	r26, r20
     360:	ab 01       	movw	r20, r22
    // sets a wall in the wall arrays
    switch (heading) {
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	b1 f0       	breq	.+44     	; 0x392 <placeWall+0x34>
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	28 f0       	brcs	.+10     	; 0x374 <placeWall+0x16>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	e9 f0       	breq	.+58     	; 0x3a8 <placeWall+0x4a>
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	b1 f5       	brne	.+108    	; 0x3de <placeWall+0x80>
     372:	29 c0       	rjmp	.+82     	; 0x3c6 <placeWall+0x68>
        case NORTH:
            horizontalWalls[c.x][c.y+1] = 1;
     374:	fd 01       	movw	r30, r26
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	8a 95       	dec	r24
     37e:	e1 f7       	brne	.-8      	; 0x378 <placeWall+0x1a>
     380:	ea 0f       	add	r30, r26
     382:	fb 1f       	adc	r31, r27
     384:	eb 56       	subi	r30, 0x6B	; 107
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	e6 0f       	add	r30, r22
     38a:	f7 1f       	adc	r31, r23
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	81 83       	std	Z+1, r24	; 0x01
     390:	08 95       	ret

            return;
        case WEST:
            verticalWalls[c.x][c.y] = 1;
     392:	e4 e0       	ldi	r30, 0x04	; 4
     394:	aa 0f       	add	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	ea 95       	dec	r30
     39a:	e1 f7       	brne	.-8      	; 0x394 <placeWall+0x36>
     39c:	a6 0f       	add	r26, r22
     39e:	b7 1f       	adc	r27, r23
     3a0:	ab 57       	subi	r26, 0x7B	; 123
     3a2:	bf 4f       	sbci	r27, 0xFF	; 255
     3a4:	8c 93       	st	X, r24
     3a6:	08 95       	ret

            return;
        case SOUTH:
            horizontalWalls[c.x][c.y] = 1;
     3a8:	fd 01       	movw	r30, r26
     3aa:	74 e0       	ldi	r23, 0x04	; 4
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	7a 95       	dec	r23
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <placeWall+0x4e>
     3b4:	ea 0f       	add	r30, r26
     3b6:	fb 1f       	adc	r31, r27
     3b8:	e4 0f       	add	r30, r20
     3ba:	f5 1f       	adc	r31, r21
     3bc:	eb 56       	subi	r30, 0x6B	; 107
     3be:	fe 4f       	sbci	r31, 0xFE	; 254
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 83       	st	Z, r24
     3c4:	08 95       	ret

            return;
        case EAST:
            verticalWalls[c.x+1][c.y] = 1;
     3c6:	11 96       	adiw	r26, 0x01	; 1
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	aa 0f       	add	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	6a 95       	dec	r22
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <placeWall+0x6c>
     3d2:	a4 0f       	add	r26, r20
     3d4:	b5 1f       	adc	r27, r21
     3d6:	ab 57       	subi	r26, 0x7B	; 123
     3d8:	bf 4f       	sbci	r27, 0xFF	; 255
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	8c 93       	st	X, r24
     3de:	08 95       	ret

000003e0 <generateInitialWalls>:

            return;
    }
}

void generateInitialWalls() {
     3e0:	af 92       	push	r10
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	c0 e0       	ldi	r28, 0x00	; 0
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
    for (char x = 0; x < MAZE_WIDTH; x++) {
        placeWall(SOUTH,(coord){x,0});
     3f8:	5e 01       	movw	r10, r28
     3fa:	cc 24       	eor	r12, r12
     3fc:	dd 24       	eor	r13, r13
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	b6 01       	movw	r22, r12
     402:	a5 01       	movw	r20, r10
     404:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
     408:	7e 01       	movw	r14, r28
     40a:	0f e0       	ldi	r16, 0x0F	; 15
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	b8 01       	movw	r22, r16
     412:	a7 01       	movw	r20, r14
     414:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
     418:	21 96       	adiw	r28, 0x01	; 1
            return;
    }
}

void generateInitialWalls() {
    for (char x = 0; x < MAZE_WIDTH; x++) {
     41a:	c0 31       	cpi	r28, 0x10	; 16
     41c:	d1 05       	cpc	r29, r1
     41e:	61 f7       	brne	.-40     	; 0x3f8 <generateInitialWalls+0x18>
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	d0 e0       	ldi	r29, 0x00	; 0
        placeWall(SOUTH,(coord){x,0});
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
    }
    for (char y = 0; y < MAZE_HEIGHT; y++) {
        placeWall(WEST,(coord){0,y});
     424:	aa 24       	eor	r10, r10
     426:	bb 24       	eor	r11, r11
     428:	6e 01       	movw	r12, r28
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	b6 01       	movw	r22, r12
     42e:	a5 01       	movw	r20, r10
     430:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
        placeWall(EAST,(coord){MAZE_WIDTH-1,y});
     434:	9f e0       	ldi	r25, 0x0F	; 15
     436:	e9 2e       	mov	r14, r25
     438:	f1 2c       	mov	r15, r1
     43a:	8e 01       	movw	r16, r28
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	b8 01       	movw	r22, r16
     440:	a7 01       	movw	r20, r14
     442:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
     446:	21 96       	adiw	r28, 0x01	; 1
void generateInitialWalls() {
    for (char x = 0; x < MAZE_WIDTH; x++) {
        placeWall(SOUTH,(coord){x,0});
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
    }
    for (char y = 0; y < MAZE_HEIGHT; y++) {
     448:	c0 31       	cpi	r28, 0x10	; 16
     44a:	d1 05       	cpc	r29, r1
     44c:	59 f7       	brne	.-42     	; 0x424 <generateInitialWalls+0x44>
        placeWall(WEST,(coord){0,y});
        placeWall(EAST,(coord){MAZE_WIDTH-1,y});
    }
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	08 95       	ret

00000464 <nextAction>:
    if (right_wall()) placeWall((Heading)((currentHeading-1+4)%4),currentXY);
}

// based on updated wall and floodfill information, return the next action that the mouse should do
Action nextAction()
{
     464:	8f 92       	push	r8
     466:	9f 92       	push	r9
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
    // stay at center if already in center
    if (target && mouseInGoal() && STAY_AT_CENTER)
        return IDLE;

    Heading newHeading = getPathArray(currentXY);
     47c:	e0 91 80 00 	lds	r30, 0x0080
     480:	f0 91 81 00 	lds	r31, 0x0081
     484:	80 91 82 00 	lds	r24, 0x0082
     488:	90 91 83 00 	lds	r25, 0x0083
// given coordinate, gets the respective cell's floodfill value
uint8 getFloodArray(coord c) {return floodArray[c.x][c.y];}
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) {return pathArray[c.x][c.y];}
     48c:	44 e0       	ldi	r20, 0x04	; 4
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	4a 95       	dec	r20
     494:	e1 f7       	brne	.-8      	; 0x48e <nextAction+0x2a>
     496:	e8 0f       	add	r30, r24
     498:	f9 1f       	adc	r31, r25
     49a:	df 01       	movw	r26, r30
     49c:	ab 55       	subi	r26, 0x5B	; 91
     49e:	bd 4f       	sbci	r27, 0xFD	; 253
     4a0:	9c 90       	ld	r9, X
uint8 travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
     4a2:	eb 55       	subi	r30, 0x5B	; 91
     4a4:	fc 4f       	sbci	r31, 0xFC	; 252
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
    Heading newHeading = getPathArray(currentXY);
    updateTravelArray(currentXY);
    coord originalCoord = currentXY;

    // moves forward if the mouse is already facing the correct heading
    if (newHeading == currentHeading) {
     4aa:	80 91 84 00 	lds	r24, 0x0084
     4ae:	98 16       	cp	r9, r24
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <nextAction+0x50>
     4b2:	54 c0       	rjmp	.+168    	; 0x55c <nextAction+0xf8>
     4b4:	cc 24       	eor	r12, r12
     4b6:	dd 24       	eor	r13, r13
     4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <nextAction+0x7e>
        int moveNumber = 0;
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
        && getPathArray(currentXY) == currentHeading) {
            moveNumber++;
     4ba:	08 94       	sec
     4bc:	c1 1c       	adc	r12, r1
     4be:	d1 1c       	adc	r13, r1
uint8 travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
     4c0:	f5 01       	movw	r30, r10
     4c2:	80 82       	st	Z, r8
        int moveNumber = 0;
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
        && getPathArray(currentXY) == currentHeading) {
            moveNumber++;
            updateTravelArray(currentXY);
            currentXY = incrementCoord(newHeading,currentXY,1);
     4c4:	89 2d       	mov	r24, r9
     4c6:	b8 01       	movw	r22, r16
     4c8:	a7 01       	movw	r20, r14
     4ca:	21 e0       	ldi	r18, 0x01	; 1
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	0e 94 17 01 	call	0x22e	; 0x22e <incrementCoord>
     4d2:	60 93 80 00 	sts	0x0080, r22
     4d6:	70 93 81 00 	sts	0x0081, r23
     4da:	80 93 82 00 	sts	0x0082, r24
     4de:	90 93 83 00 	sts	0x0083, r25
    coord originalCoord = currentXY;

    // moves forward if the mouse is already facing the correct heading
    if (newHeading == currentHeading) {
        int moveNumber = 0;
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
     4e2:	c0 91 80 00 	lds	r28, 0x0080
     4e6:	d0 91 81 00 	lds	r29, 0x0081
     4ea:	80 91 82 00 	lds	r24, 0x0082
     4ee:	90 91 83 00 	lds	r25, 0x0083
     4f2:	34 e0       	ldi	r19, 0x04	; 4
     4f4:	cc 0f       	add	r28, r28
     4f6:	dd 1f       	adc	r29, r29
     4f8:	3a 95       	dec	r19
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <nextAction+0x90>
     4fc:	c8 0f       	add	r28, r24
     4fe:	d9 1f       	adc	r29, r25
     500:	25 ea       	ldi	r18, 0xA5	; 165
     502:	a2 2e       	mov	r10, r18
     504:	23 e0       	ldi	r18, 0x03	; 3
     506:	b2 2e       	mov	r11, r18
     508:	ac 0e       	add	r10, r28
     50a:	bd 1e       	adc	r11, r29
     50c:	f5 01       	movw	r30, r10
     50e:	80 80       	ld	r8, Z
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	8f 16       	cp	r8, r31
     514:	a9 f4       	brne	.+42     	; 0x540 <nextAction+0xdc>
     516:	e0 90 80 00 	lds	r14, 0x0080
     51a:	f0 90 81 00 	lds	r15, 0x0081
     51e:	00 91 82 00 	lds	r16, 0x0082
     522:	10 91 83 00 	lds	r17, 0x0083
     526:	89 2d       	mov	r24, r9
     528:	b8 01       	movw	r22, r16
     52a:	a7 01       	movw	r20, r14
     52c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <checkWall>
     530:	89 2b       	or	r24, r25
     532:	31 f4       	brne	.+12     	; 0x540 <nextAction+0xdc>
     534:	cb 55       	subi	r28, 0x5B	; 91
     536:	dd 4f       	sbci	r29, 0xFD	; 253
     538:	88 81       	ld	r24, Y
     53a:	89 15       	cp	r24, r9
     53c:	09 f4       	brne	.+2      	; 0x540 <nextAction+0xdc>
     53e:	bd cf       	rjmp	.-134    	; 0x4ba <nextAction+0x56>
     540:	20 91 ad 05 	lds	r18, 0x05AD
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	02 c0       	rjmp	.+4      	; 0x54e <nextAction+0xea>
            updateTravelArray(currentXY);
            currentXY = incrementCoord(newHeading,currentXY,1);
        }


        for (uint16 i = 0; i < moveNumber; i++)
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	22 e0       	ldi	r18, 0x02	; 2
     54e:	8c 15       	cp	r24, r12
     550:	9d 05       	cpc	r25, r13
     552:	d8 f3       	brcs	.-10     	; 0x54a <nextAction+0xe6>
     554:	20 93 ad 05 	sts	0x05AD, r18
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	1d c0       	rjmp	.+58     	; 0x596 <nextAction+0x132>
           imp = 2;
        return FORWARD;
    }

    // determines which way to turn based on current direction and desired direction
    if (currentHeading == (newHeading+1)%4)
     55c:	e8 2f       	mov	r30, r24
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	29 2d       	mov	r18, r9
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	c9 01       	movw	r24, r18
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	64 e0       	ldi	r22, 0x04	; 4
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__divmodhi4>
     570:	e8 17       	cp	r30, r24
     572:	f9 07       	cpc	r31, r25
     574:	19 f4       	brne	.+6      	; 0x57c <nextAction+0x118>
        return turnRight();
     576:	0e 94 42 01 	call	0x284	; 0x284 <turnRight>
     57a:	0d c0       	rjmp	.+26     	; 0x596 <nextAction+0x132>
    else if (currentHeading == (newHeading-1)%4)
     57c:	c9 01       	movw	r24, r18
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	64 e0       	ldi	r22, 0x04	; 4
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	0e 94 12 0a 	call	0x1424	; 0x1424 <__divmodhi4>
     588:	e8 17       	cp	r30, r24
     58a:	f9 07       	cpc	r31, r25
     58c:	11 f0       	breq	.+4      	; 0x592 <nextAction+0x12e>
        return turnLeft();
    else {
        turnLeft();
     58e:	0e 94 35 01 	call	0x26a	; 0x26a <turnLeft>
        return turnLeft();
     592:	0e 94 35 01 	call	0x26a	; 0x26a <turnLeft>
    }
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	08 95       	ret

000005b0 <checkDestination>:

// checks if the mouse has reached its target
void checkDestination()
{
    if (target) {
     5b0:	80 91 77 00 	lds	r24, 0x0077
     5b4:	88 23       	and	r24, r24
     5b6:	39 f0       	breq	.+14     	; 0x5c6 <checkDestination+0x16>
        if (mouseInGoal()) {
     5b8:	0e 94 4f 01 	call	0x29e	; 0x29e <mouseInGoal>
     5bc:	88 23       	and	r24, r24
     5be:	91 f0       	breq	.+36     	; 0x5e4 <checkDestination+0x34>

                currentXY = (coord){0,0};
                currentHeading = NORTH;
            }
            else if (!STAY_AT_CENTER)
                target = 0;
     5c0:	10 92 77 00 	sts	0x0077, r1
     5c4:	08 95       	ret
        }
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
     5c6:	80 91 80 00 	lds	r24, 0x0080
     5ca:	90 91 81 00 	lds	r25, 0x0081
     5ce:	89 2b       	or	r24, r25
     5d0:	49 f4       	brne	.+18     	; 0x5e4 <checkDestination+0x34>
     5d2:	80 91 82 00 	lds	r24, 0x0082
     5d6:	90 91 83 00 	lds	r25, 0x0083
     5da:	89 2b       	or	r24, r25
     5dc:	19 f4       	brne	.+6      	; 0x5e4 <checkDestination+0x34>
        target = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 77 00 	sts	0x0077, r24
     5e4:	08 95       	ret

000005e6 <updateWalls>:

// checks for and then updates the walls for the current cell
void updateWalls()
{
    // based on the current heading, places walls at the respective locations
    if (front_wall()) placeWall(currentHeading,currentXY);
     5e6:	0e 94 61 00 	call	0xc2	; 0xc2 <front_wall>
     5ea:	89 2b       	or	r24, r25
     5ec:	61 f0       	breq	.+24     	; 0x606 <updateWalls+0x20>
     5ee:	40 91 80 00 	lds	r20, 0x0080
     5f2:	50 91 81 00 	lds	r21, 0x0081
     5f6:	60 91 82 00 	lds	r22, 0x0082
     5fa:	70 91 83 00 	lds	r23, 0x0083
     5fe:	80 91 84 00 	lds	r24, 0x0084
     602:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
    if (left_wall()) placeWall((Heading)((currentHeading+1)%4),currentXY);
     606:	0e 94 55 00 	call	0xaa	; 0xaa <left_wall>
     60a:	89 2b       	or	r24, r25
     60c:	71 f0       	breq	.+28     	; 0x62a <updateWalls+0x44>
     60e:	80 91 84 00 	lds	r24, 0x0084
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	40 91 80 00 	lds	r20, 0x0080
     618:	50 91 81 00 	lds	r21, 0x0081
     61c:	60 91 82 00 	lds	r22, 0x0082
     620:	70 91 83 00 	lds	r23, 0x0083
     624:	83 70       	andi	r24, 0x03	; 3
     626:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
    if (right_wall()) placeWall((Heading)((currentHeading-1+4)%4),currentXY);
     62a:	0e 94 49 00 	call	0x92	; 0x92 <right_wall>
     62e:	89 2b       	or	r24, r25
     630:	71 f0       	breq	.+28     	; 0x64e <updateWalls+0x68>
     632:	80 91 84 00 	lds	r24, 0x0084
     636:	8d 5f       	subi	r24, 0xFD	; 253
     638:	40 91 80 00 	lds	r20, 0x0080
     63c:	50 91 81 00 	lds	r21, 0x0081
     640:	60 91 82 00 	lds	r22, 0x0082
     644:	70 91 83 00 	lds	r23, 0x0083
     648:	83 70       	andi	r24, 0x03	; 3
     64a:	0e 94 af 01 	call	0x35e	; 0x35e <placeWall>
     64e:	08 95       	ret

00000650 <generateNeighbor>:
            if (c.x >= 15) return OUT_OF_BOUNDS;
            else return floodArray[c.x+1][c.y];
    }
}

neighbor generateNeighbor(queue q, Heading heading, neighbor current, int currentVal) {
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	8f 92       	push	r8
     656:	9f 92       	push	r9
     658:	bf 92       	push	r11
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	2e 97       	sbiw	r28, 0x0e	; 14
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	3c 01       	movw	r6, r24
     67c:	b6 2e       	mov	r11, r22
     67e:	e8 86       	std	Y+8, r14	; 0x08
     680:	f9 86       	std	Y+9, r15	; 0x09
     682:	0a 87       	std	Y+10, r16	; 0x0a
     684:	1b 87       	std	Y+11, r17	; 0x0b
     686:	2c 87       	std	Y+12, r18	; 0x0c
     688:	3d 87       	std	Y+13, r19	; 0x0d
     68a:	4e 87       	std	Y+14, r20	; 0x0e
     68c:	f2 2e       	mov	r15, r18
     68e:	0d 85       	ldd	r16, Y+13	; 0x0d
     690:	1e 85       	ldd	r17, Y+14	; 0x0e
    if (!checkWall(heading,current.coord)) {
     692:	48 85       	ldd	r20, Y+8	; 0x08
     694:	59 85       	ldd	r21, Y+9	; 0x09
     696:	6a 85       	ldd	r22, Y+10	; 0x0a
     698:	7b 85       	ldd	r23, Y+11	; 0x0b
     69a:	8b 2d       	mov	r24, r11
     69c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <checkWall>
     6a0:	89 2b       	or	r24, r25
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <generateNeighbor+0x56>
     6a4:	4c c0       	rjmp	.+152    	; 0x73e <generateNeighbor+0xee>
        int nextVal = currentVal + TILE_SCORE;
     6a6:	46 01       	movw	r8, r12
     6a8:	08 94       	sec
     6aa:	81 1c       	adc	r8, r1
     6ac:	91 1c       	adc	r9, r1
        neighbor next;
        // checks if the mouse would have to turn to go north from current cell
        if (current.heading != heading) {
     6ae:	fb 14       	cp	r15, r11
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <generateNeighbor+0x68>
     6b2:	cc 24       	eor	r12, r12
     6b4:	dd 24       	eor	r13, r13
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <generateNeighbor+0x70>
            nextVal += TURN_SCORE;
            next.streak = 0;
        } else { // if the mouse doesn't need to turn, records that is is on a straight streak
            nextVal += (STREAK_MULTIPLIER * (current.streak-1)) + STREAK_SCORE;
            next.streak = current.streak + 1;
     6b8:	68 01       	movw	r12, r16
     6ba:	08 94       	sec
     6bc:	c1 1c       	adc	r12, r1
     6be:	d1 1c       	adc	r13, r1
        }

        // prepare neighbor to add to the floodfill queue
        next.coord = incrementCoord(heading, current.coord, 1);
     6c0:	e8 84       	ldd	r14, Y+8	; 0x08
     6c2:	f9 84       	ldd	r15, Y+9	; 0x09
     6c4:	0a 85       	ldd	r16, Y+10	; 0x0a
     6c6:	1b 85       	ldd	r17, Y+11	; 0x0b
     6c8:	8b 2d       	mov	r24, r11
     6ca:	b8 01       	movw	r22, r16
     6cc:	a7 01       	movw	r20, r14
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	0e 94 17 01 	call	0x22e	; 0x22e <incrementCoord>
     6d6:	69 83       	std	Y+1, r22	; 0x01
     6d8:	7a 83       	std	Y+2, r23	; 0x02
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
        next.heading = heading;

        int neighborVal = getNeighbor(heading,current.coord);
     6de:	8b 2d       	mov	r24, r11
     6e0:	b8 01       	movw	r22, r16
     6e2:	a7 01       	movw	r20, r14
     6e4:	0e 94 6d 01 	call	0x2da	; 0x2da <getNeighbor>
        if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	8f 3f       	cpi	r24, 0xFF	; 255
     6ec:	92 07       	cpc	r25, r18
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <generateNeighbor+0xa6>
     6f0:	88 16       	cp	r8, r24
     6f2:	99 06       	cpc	r9, r25
     6f4:	24 f5       	brge	.+72     	; 0x73e <generateNeighbor+0xee>
            queue_push(q,next);
     6f6:	5c 2d       	mov	r21, r12
     6f8:	df 82       	std	Y+7, r13	; 0x07
     6fa:	ce 82       	std	Y+6, r12	; 0x06
            next.streak = current.streak + 1;
        }

        // prepare neighbor to add to the floodfill queue
        next.coord = incrementCoord(heading, current.coord, 1);
        next.heading = heading;
     6fc:	bd 82       	std	Y+5, r11	; 0x05

        int neighborVal = getNeighbor(heading,current.coord);
        if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
            queue_push(q,next);
     6fe:	c3 01       	movw	r24, r6
     700:	09 81       	ldd	r16, Y+1	; 0x01
     702:	1a 81       	ldd	r17, Y+2	; 0x02
     704:	2b 81       	ldd	r18, Y+3	; 0x03
     706:	3c 81       	ldd	r19, Y+4	; 0x04
     708:	4b 2d       	mov	r20, r11
     70a:	6f 81       	ldd	r22, Y+7	; 0x07
     70c:	0e 94 a9 05 	call	0xb52	; 0xb52 <queue_push>
            updateFloodArray(next.coord,nextVal);
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	e9 81       	ldd	r30, Y+1	; 0x01
     716:	fa 81       	ldd	r31, Y+2	; 0x02
// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) {floodArray[c.x][c.y] = val;}
     718:	54 e0       	ldi	r21, 0x04	; 4
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	5a 95       	dec	r21
     720:	e1 f7       	brne	.-8      	; 0x71a <generateNeighbor+0xca>
     722:	e8 0f       	add	r30, r24
     724:	f9 1f       	adc	r31, r25
     726:	df 01       	movw	r26, r30
     728:	a3 55       	subi	r26, 0x53	; 83
     72a:	bb 4f       	sbci	r27, 0xFB	; 251
     72c:	8c 92       	st	X, r8
// given coordinate, gets the respective cell's floodfill value
uint8 getFloodArray(coord c) {return floodArray[c.x][c.y];}
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
     72e:	eb 55       	subi	r30, 0x5B	; 91
     730:	fd 4f       	sbci	r31, 0xFD	; 253
     732:	8b 2d       	mov	r24, r11
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	02 96       	adiw	r24, 0x02	; 2
     738:	83 70       	andi	r24, 0x03	; 3
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	80 83       	st	Z, r24
            queue_push(q,next);
            updateFloodArray(next.coord,nextVal);
            updatePathArray(next.coord,(Heading)((heading+2)%4));
        }
    }
}
     73e:	2e 96       	adiw	r28, 0x0e	; 14
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	9f 90       	pop	r9
     75e:	8f 90       	pop	r8
     760:	7f 90       	pop	r7
     762:	6f 90       	pop	r6
     764:	08 95       	ret

00000766 <floodFill>:

// updates the floodfill array based on known walls
void floodFill() {
     766:	2f 92       	push	r2
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	e0 97       	sbiw	r28, 0x30	; 48
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
    // set non-goal values to blank so that the floodfill array can be recalculated
    resetFloodArray();
     79a:	0e 94 b7 00 	call	0x16e	; 0x16e <resetFloodArray>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();
     79e:	0e 94 02 06 	call	0xc04	; 0xc04 <queue_create>
     7a2:	4c 01       	movw	r8, r24
     7a4:	cc 24       	eor	r12, r12
     7a6:	dd 24       	eor	r13, r13
        for (int y = 0; y < MAZE_HEIGHT; y++) {
            if (floodArray[x][y] == 0) {
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
     7a8:	55 24       	eor	r5, r5
     7aa:	53 94       	inc	r5
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
     7ac:	02 e0       	ldi	r16, 0x02	; 2
     7ae:	60 2e       	mov	r6, r16
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
     7b0:	13 e0       	ldi	r17, 0x03	; 3
     7b2:	71 2e       	mov	r7, r17
     7b4:	59 c0       	rjmp	.+178    	; 0x868 <__stack+0x9>
    queue q = queue_create();

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
        for (int y = 0; y < MAZE_HEIGHT; y++) {
            if (floodArray[x][y] == 0) {
     7b6:	d5 01       	movw	r26, r10
     7b8:	8c 91       	ld	r24, X
     7ba:	88 23       	and	r24, r24
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <floodFill+0x5a>
     7be:	41 c0       	rjmp	.+130    	; 0x842 <floodFill+0xdc>
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
     7c0:	0c 2d       	mov	r16, r12
     7c2:	d8 86       	std	Y+8, r13	; 0x08
     7c4:	cf 82       	std	Y+7, r12	; 0x07
     7c6:	2e 2d       	mov	r18, r14
     7c8:	fa 86       	std	Y+10, r15	; 0x0a
     7ca:	e9 86       	std	Y+9, r14	; 0x09
     7cc:	1b 86       	std	Y+11, r1	; 0x0b
     7ce:	1d 86       	std	Y+13, r1	; 0x0d
     7d0:	1c 86       	std	Y+12, r1	; 0x0c
     7d2:	c4 01       	movw	r24, r8
     7d4:	18 85       	ldd	r17, Y+8	; 0x08
     7d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	5c 85       	ldd	r21, Y+12	; 0x0c
     7dc:	6d 85       	ldd	r22, Y+13	; 0x0d
     7de:	0e 94 a9 05 	call	0xb52	; 0xb52 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
     7e2:	df 86       	std	Y+15, r13	; 0x0f
     7e4:	ce 86       	std	Y+14, r12	; 0x0e
     7e6:	2e 2d       	mov	r18, r14
     7e8:	f9 8a       	std	Y+17, r15	; 0x11
     7ea:	e8 8a       	std	Y+16, r14	; 0x10
     7ec:	5a 8a       	std	Y+18, r5	; 0x12
     7ee:	1c 8a       	std	Y+20, r1	; 0x14
     7f0:	1b 8a       	std	Y+19, r1	; 0x13
     7f2:	c4 01       	movw	r24, r8
     7f4:	1f 85       	ldd	r17, Y+15	; 0x0f
     7f6:	39 89       	ldd	r19, Y+17	; 0x11
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	5b 89       	ldd	r21, Y+19	; 0x13
     7fc:	6c 89       	ldd	r22, Y+20	; 0x14
     7fe:	0e 94 a9 05 	call	0xb52	; 0xb52 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
     802:	de 8a       	std	Y+22, r13	; 0x16
     804:	cd 8a       	std	Y+21, r12	; 0x15
     806:	2e 2d       	mov	r18, r14
     808:	f8 8e       	std	Y+24, r15	; 0x18
     80a:	ef 8a       	std	Y+23, r14	; 0x17
     80c:	69 8e       	std	Y+25, r6	; 0x19
     80e:	1b 8e       	std	Y+27, r1	; 0x1b
     810:	1a 8e       	std	Y+26, r1	; 0x1a
     812:	c4 01       	movw	r24, r8
     814:	1e 89       	ldd	r17, Y+22	; 0x16
     816:	38 8d       	ldd	r19, Y+24	; 0x18
     818:	42 e0       	ldi	r20, 0x02	; 2
     81a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     81c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     81e:	0e 94 a9 05 	call	0xb52	; 0xb52 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
     822:	dd 8e       	std	Y+29, r13	; 0x1d
     824:	cc 8e       	std	Y+28, r12	; 0x1c
     826:	2e 2d       	mov	r18, r14
     828:	ff 8e       	std	Y+31, r15	; 0x1f
     82a:	ee 8e       	std	Y+30, r14	; 0x1e
     82c:	78 a2       	std	Y+32, r7	; 0x20
     82e:	1a a2       	std	Y+34, r1	; 0x22
     830:	19 a2       	std	Y+33, r1	; 0x21
     832:	c4 01       	movw	r24, r8
     834:	1d 8d       	ldd	r17, Y+29	; 0x1d
     836:	3f 8d       	ldd	r19, Y+31	; 0x1f
     838:	43 e0       	ldi	r20, 0x03	; 3
     83a:	59 a1       	ldd	r21, Y+33	; 0x21
     83c:	6a a1       	ldd	r22, Y+34	; 0x22
     83e:	0e 94 a9 05 	call	0xb52	; 0xb52 <queue_push>
    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
        for (int y = 0; y < MAZE_HEIGHT; y++) {
     842:	08 94       	sec
     844:	e1 1c       	adc	r14, r1
     846:	f1 1c       	adc	r15, r1
     848:	08 94       	sec
     84a:	a1 1c       	adc	r10, r1
     84c:	b1 1c       	adc	r11, r1
     84e:	b0 e1       	ldi	r27, 0x10	; 16
     850:	eb 16       	cp	r14, r27
     852:	f1 04       	cpc	r15, r1
     854:	09 f0       	breq	.+2      	; 0x858 <floodFill+0xf2>
     856:	af cf       	rjmp	.-162    	; 0x7b6 <floodFill+0x50>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
     858:	08 94       	sec
     85a:	c1 1c       	adc	r12, r1
     85c:	d1 1c       	adc	r13, r1
     85e:	e0 e1       	ldi	r30, 0x10	; 16
     860:	ce 16       	cp	r12, r30
     862:	d1 04       	cpc	r13, r1
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	7c c0       	rjmp	.+248    	; 0x960 <__stack+0x101>
     868:	56 01       	movw	r10, r12
     86a:	b4 e0       	ldi	r27, 0x04	; 4
     86c:	aa 0c       	add	r10, r10
     86e:	bb 1c       	adc	r11, r11
     870:	ba 95       	dec	r27
     872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
     874:	8d ea       	ldi	r24, 0xAD	; 173
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	a8 0e       	add	r10, r24
     87a:	b9 1e       	adc	r11, r25
     87c:	ee 24       	eor	r14, r14
     87e:	ff 24       	eor	r15, r15
     880:	9a cf       	rjmp	.-204    	; 0x7b6 <floodFill+0x50>
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
     882:	c4 01       	movw	r24, r8
     884:	0e 94 30 05 	call	0xa60	; 0xa60 <queue_pop>
     888:	2a a7       	std	Y+42, r18	; 0x2a
     88a:	3b a7       	std	Y+43, r19	; 0x2b
     88c:	4c a7       	std	Y+44, r20	; 0x2c
     88e:	5d a7       	std	Y+45, r21	; 0x2d
     890:	6e a7       	std	Y+46, r22	; 0x2e
     892:	7f a7       	std	Y+47, r23	; 0x2f
     894:	88 ab       	std	Y+48, r24	; 0x30
     896:	de 01       	movw	r26, r28
     898:	93 96       	adiw	r26, 0x23	; 35
     89a:	f1 01       	movw	r30, r2
     89c:	87 e0       	ldi	r24, 0x07	; 7
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	81 50       	subi	r24, 0x01	; 1
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
        int currentVal = getFloodArray(current.coord);
     8a6:	eb a1       	ldd	r30, Y+35	; 0x23
     8a8:	fc a1       	ldd	r31, Y+36	; 0x24
     8aa:	a4 e0       	ldi	r26, 0x04	; 4
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	aa 95       	dec	r26
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <__stack+0x4d>
     8b4:	8d a1       	ldd	r24, Y+37	; 0x25
     8b6:	9e a1       	ldd	r25, Y+38	; 0x26
     8b8:	e8 0f       	add	r30, r24
     8ba:	f9 1f       	adc	r31, r25
     8bc:	e3 55       	subi	r30, 0x53	; 83
     8be:	fb 4f       	sbci	r31, 0xFB	; 251
     8c0:	b0 80       	ld	r11, Z

        // prints the current cell's floodfill number to the simulation screen
        char forSetText[6] = ""; sprintf(forSetText, "%d", getFloodArray(current.coord));
     8c2:	19 82       	std	Y+1, r1	; 0x01
     8c4:	1a 82       	std	Y+2, r1	; 0x02
     8c6:	1b 82       	std	Y+3, r1	; 0x03
     8c8:	1c 82       	std	Y+4, r1	; 0x04
     8ca:	1e 82       	std	Y+6, r1	; 0x06
     8cc:	1d 82       	std	Y+5, r1	; 0x05
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <__stack+0x71>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <__stack+0x73>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <__stack+0x75>
     8d4:	ed b7       	in	r30, 0x3d	; 61
     8d6:	fe b7       	in	r31, 0x3e	; 62
     8d8:	31 96       	adiw	r30, 0x01	; 1
     8da:	ad b7       	in	r26, 0x3d	; 61
     8dc:	be b7       	in	r27, 0x3e	; 62
     8de:	12 96       	adiw	r26, 0x02	; 2
     8e0:	5c 92       	st	X, r5
     8e2:	4e 92       	st	-X, r4
     8e4:	11 97       	sbiw	r26, 0x01	; 1
     8e6:	73 82       	std	Z+3, r7	; 0x03
     8e8:	62 82       	std	Z+2, r6	; 0x02
     8ea:	b4 82       	std	Z+4, r11	; 0x04
     8ec:	15 82       	std	Z+5, r1	; 0x05
     8ee:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>

        // pushes neighbors if available
        generateNeighbor(q,NORTH,current,currentVal);
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	36 96       	adiw	r30, 0x06	; 6
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	fe bf       	out	0x3e, r31	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	ed bf       	out	0x3d, r30	; 61
     902:	c4 01       	movw	r24, r8
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	eb a0       	ldd	r14, Y+35	; 0x23
     908:	fc a0       	ldd	r15, Y+36	; 0x24
     90a:	0d a1       	ldd	r16, Y+37	; 0x25
     90c:	1e a1       	ldd	r17, Y+38	; 0x26
     90e:	2f a1       	ldd	r18, Y+39	; 0x27
     910:	38 a5       	ldd	r19, Y+40	; 0x28
     912:	49 a5       	ldd	r20, Y+41	; 0x29
     914:	cb 2c       	mov	r12, r11
     916:	dd 24       	eor	r13, r13
     918:	0e 94 28 03 	call	0x650	; 0x650 <generateNeighbor>
        generateNeighbor(q,WEST,current,currentVal);
     91c:	c4 01       	movw	r24, r8
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	eb a0       	ldd	r14, Y+35	; 0x23
     922:	fc a0       	ldd	r15, Y+36	; 0x24
     924:	0d a1       	ldd	r16, Y+37	; 0x25
     926:	1e a1       	ldd	r17, Y+38	; 0x26
     928:	2f a1       	ldd	r18, Y+39	; 0x27
     92a:	38 a5       	ldd	r19, Y+40	; 0x28
     92c:	49 a5       	ldd	r20, Y+41	; 0x29
     92e:	0e 94 28 03 	call	0x650	; 0x650 <generateNeighbor>
        generateNeighbor(q,SOUTH,current,currentVal);
     932:	c4 01       	movw	r24, r8
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	eb a0       	ldd	r14, Y+35	; 0x23
     938:	fc a0       	ldd	r15, Y+36	; 0x24
     93a:	0d a1       	ldd	r16, Y+37	; 0x25
     93c:	1e a1       	ldd	r17, Y+38	; 0x26
     93e:	2f a1       	ldd	r18, Y+39	; 0x27
     940:	38 a5       	ldd	r19, Y+40	; 0x28
     942:	49 a5       	ldd	r20, Y+41	; 0x29
     944:	0e 94 28 03 	call	0x650	; 0x650 <generateNeighbor>
        generateNeighbor(q,EAST,current,currentVal);
     948:	c4 01       	movw	r24, r8
     94a:	63 e0       	ldi	r22, 0x03	; 3
     94c:	eb a0       	ldd	r14, Y+35	; 0x23
     94e:	fc a0       	ldd	r15, Y+36	; 0x24
     950:	0d a1       	ldd	r16, Y+37	; 0x25
     952:	1e a1       	ldd	r17, Y+38	; 0x26
     954:	2f a1       	ldd	r18, Y+39	; 0x27
     956:	38 a5       	ldd	r19, Y+40	; 0x28
     958:	49 a5       	ldd	r20, Y+41	; 0x29
     95a:	0e 94 28 03 	call	0x650	; 0x650 <generateNeighbor>
     95e:	0d c0       	rjmp	.+26     	; 0x97a <__stack+0x11b>
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
     960:	7a e2       	ldi	r23, 0x2A	; 42
     962:	27 2e       	mov	r2, r23
     964:	31 2c       	mov	r3, r1
     966:	2c 0e       	add	r2, r28
     968:	3d 1e       	adc	r3, r29
        int currentVal = getFloodArray(current.coord);

        // prints the current cell's floodfill number to the simulation screen
        char forSetText[6] = ""; sprintf(forSetText, "%d", getFloodArray(current.coord));
     96a:	2e 01       	movw	r4, r28
     96c:	08 94       	sec
     96e:	41 1c       	adc	r4, r1
     970:	51 1c       	adc	r5, r1
     972:	60 e6       	ldi	r22, 0x60	; 96
     974:	66 2e       	mov	r6, r22
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	76 2e       	mov	r7, r22
            }
        }
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
     97a:	c4 01       	movw	r24, r8
     97c:	0e 94 19 05 	call	0xa32	; 0xa32 <queue_is_empty>
     980:	89 2b       	or	r24, r25
     982:	09 f4       	brne	.+2      	; 0x986 <__stack+0x127>
     984:	7e cf       	rjmp	.-260    	; 0x882 <__stack+0x23>
        generateNeighbor(q,NORTH,current,currentVal);
        generateNeighbor(q,WEST,current,currentVal);
        generateNeighbor(q,SOUTH,current,currentVal);
        generateNeighbor(q,EAST,current,currentVal);
    }
}
     986:	e0 96       	adiw	r28, 0x30	; 48
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	7f 90       	pop	r7
     9ac:	6f 90       	pop	r6
     9ae:	5f 90       	pop	r5
     9b0:	4f 90       	pop	r4
     9b2:	3f 90       	pop	r3
     9b4:	2f 90       	pop	r2
     9b6:	08 95       	ret

000009b8 <solver>:
}


// sends the mouse's recommended next action back to main
Action solver() {
    checkDestination();
     9b8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <checkDestination>
    updateWalls();
     9bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <updateWalls>
    floodFill();
     9c0:	0e 94 b3 03 	call	0x766	; 0x766 <floodFill>

    return nextAction();
     9c4:	0e 94 32 02 	call	0x464	; 0x464 <nextAction>
}
     9c8:	08 95       	ret

000009ca <queue_first>:
    q->size--;
    return data;
}

// إرجاع أول عنصر من غير إزالة
item_type queue_first(queue q) {
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	2e 97       	sbiw	r28, 0x0e	; 14
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	fc 01       	movw	r30, r24
    if (q == NULL || q->front == NULL) {
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	21 f0       	breq	.+8      	; 0x9ec <queue_first+0x22>
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	51 f4       	brne	.+20     	; 0xa00 <queue_first+0x36>
        item_type empty_item;
        return empty_item;
     9ec:	de 01       	movw	r26, r28
     9ee:	18 96       	adiw	r26, 0x08	; 8
     9f0:	fe 01       	movw	r30, r28
     9f2:	31 96       	adiw	r30, 0x01	; 1
     9f4:	87 e0       	ldi	r24, 0x07	; 7
     9f6:	01 90       	ld	r0, Z+
     9f8:	0d 92       	st	X+, r0
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <queue_first+0x2c>
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <queue_first+0x46>
    }
    return q->front->data;
     a00:	de 01       	movw	r26, r28
     a02:	18 96       	adiw	r26, 0x08	; 8
     a04:	fc 01       	movw	r30, r24
     a06:	87 e0       	ldi	r24, 0x07	; 7
     a08:	01 90       	ld	r0, Z+
     a0a:	0d 92       	st	X+, r0
     a0c:	81 50       	subi	r24, 0x01	; 1
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <queue_first+0x3e>
     a10:	28 85       	ldd	r18, Y+8	; 0x08
     a12:	39 85       	ldd	r19, Y+9	; 0x09
     a14:	4a 85       	ldd	r20, Y+10	; 0x0a
     a16:	5b 85       	ldd	r21, Y+11	; 0x0b
     a18:	6c 85       	ldd	r22, Y+12	; 0x0c
     a1a:	7d 85       	ldd	r23, Y+13	; 0x0d
}
     a1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	2e 96       	adiw	r28, 0x0e	; 14
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	08 95       	ret

00000a32 <queue_is_empty>:

// هل الكيو فاضي؟
int queue_is_empty(queue q) {
     a32:	fc 01       	movw	r30, r24
    return (q == NULL || q->size == 0);
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	31 f0       	breq	.+12     	; 0xa44 <queue_is_empty+0x12>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	84 81       	ldd	r24, Z+4	; 0x04
     a3e:	95 81       	ldd	r25, Z+5	; 0x05
     a40:	89 2b       	or	r24, r25
     a42:	11 f4       	brne	.+4      	; 0xa48 <queue_is_empty+0x16>
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
}
     a48:	c9 01       	movw	r24, r18
     a4a:	08 95       	ret

00000a4c <queue_size>:

// حجم الكيو
int queue_size(queue q) {
     a4c:	fc 01       	movw	r30, r24
    if (q == NULL) return 0;
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	19 f4       	brne	.+6      	; 0xa58 <queue_size+0xc>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <queue_size+0x10>
    return q->size;
     a58:	24 81       	ldd	r18, Z+4	; 0x04
     a5a:	35 81       	ldd	r19, Z+5	; 0x05
}
     a5c:	c9 01       	movw	r24, r18
     a5e:	08 95       	ret

00000a60 <queue_pop>:
    }
    q->size++;
}

// إزالة عنصر (FIFO)
item_type queue_pop(queue q) {
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	65 97       	sbiw	r28, 0x15	; 21
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	8c 01       	movw	r16, r24
    if (q == NULL || q->front == NULL) {
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	29 f0       	breq	.+10     	; 0xa88 <queue_pop+0x28>
     a7e:	dc 01       	movw	r26, r24
     a80:	ed 91       	ld	r30, X+
     a82:	fc 91       	ld	r31, X
     a84:	30 97       	sbiw	r30, 0x00	; 0
     a86:	51 f4       	brne	.+20     	; 0xa9c <queue_pop+0x3c>
        item_type empty_item;
        return empty_item; // بيرجع عنصر فاضي (لازم تتأكد قبل ما تستدعي pop)
     a88:	de 01       	movw	r26, r28
     a8a:	1f 96       	adiw	r26, 0x0f	; 15
     a8c:	fe 01       	movw	r30, r28
     a8e:	31 96       	adiw	r30, 0x01	; 1
     a90:	87 e0       	ldi	r24, 0x07	; 7
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	81 50       	subi	r24, 0x01	; 1
     a98:	e1 f7       	brne	.-8      	; 0xa92 <queue_pop+0x32>
     a9a:	2b c0       	rjmp	.+86     	; 0xaf2 <queue_pop+0x92>
    }

    struct node* temp = q->front;
    item_type data = temp->data;
     a9c:	9e 01       	movw	r18, r28
     a9e:	28 5f       	subi	r18, 0xF8	; 248
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	af 01       	movw	r20, r30
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	da 01       	movw	r26, r20
     aa8:	0d 90       	ld	r0, X+
     aaa:	ad 01       	movw	r20, r26
     aac:	d9 01       	movw	r26, r18
     aae:	0d 92       	st	X+, r0
     ab0:	9d 01       	movw	r18, r26
     ab2:	81 50       	subi	r24, 0x01	; 1
     ab4:	c1 f7       	brne	.-16     	; 0xaa6 <queue_pop+0x46>

    q->front = q->front->next;
     ab6:	87 81       	ldd	r24, Z+7	; 0x07
     ab8:	90 85       	ldd	r25, Z+8	; 0x08
     aba:	d8 01       	movw	r26, r16
     abc:	11 96       	adiw	r26, 0x01	; 1
     abe:	9c 93       	st	X, r25
     ac0:	8e 93       	st	-X, r24
    if (q->front == NULL) {
     ac2:	89 2b       	or	r24, r25
     ac4:	21 f4       	brne	.+8      	; 0xace <queue_pop+0x6e>
        q->rear = NULL;
     ac6:	13 96       	adiw	r26, 0x03	; 3
     ac8:	1c 92       	st	X, r1
     aca:	1e 92       	st	-X, r1
     acc:	12 97       	sbiw	r26, 0x02	; 2
    }

    free(temp);
     ace:	cf 01       	movw	r24, r30
     ad0:	0e 94 08 0b 	call	0x1610	; 0x1610 <free>
    q->size--;
     ad4:	f8 01       	movw	r30, r16
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	95 81       	ldd	r25, Z+5	; 0x05
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	95 83       	std	Z+5, r25	; 0x05
     ade:	84 83       	std	Z+4, r24	; 0x04
    return data;
     ae0:	de 01       	movw	r26, r28
     ae2:	1f 96       	adiw	r26, 0x0f	; 15
     ae4:	fe 01       	movw	r30, r28
     ae6:	38 96       	adiw	r30, 0x08	; 8
     ae8:	87 e0       	ldi	r24, 0x07	; 7
     aea:	01 90       	ld	r0, Z+
     aec:	0d 92       	st	X+, r0
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	e1 f7       	brne	.-8      	; 0xaea <queue_pop+0x8a>
     af2:	2f 85       	ldd	r18, Y+15	; 0x0f
     af4:	38 89       	ldd	r19, Y+16	; 0x10
     af6:	49 89       	ldd	r20, Y+17	; 0x11
     af8:	5a 89       	ldd	r21, Y+18	; 0x12
     afa:	6b 89       	ldd	r22, Y+19	; 0x13
     afc:	7c 89       	ldd	r23, Y+20	; 0x14
}
     afe:	8d 89       	ldd	r24, Y+21	; 0x15
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	65 96       	adiw	r28, 0x15	; 21
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <queue_clear>:
    if (q == NULL) return 0;
    return q->size;
}

// مسح الكيو بالكامل
void queue_clear(queue q) {
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ec 01       	movw	r28, r24
    if (q == NULL) return;
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	41 f0       	breq	.+16     	; 0xb32 <queue_clear+0x1a>
    return q->front->data;
}

// هل الكيو فاضي؟
int queue_is_empty(queue q) {
    return (q == NULL || q->size == 0);
     b22:	8c 81       	ldd	r24, Y+4	; 0x04
     b24:	9d 81       	ldd	r25, Y+5	; 0x05
     b26:	89 2b       	or	r24, r25
     b28:	21 f0       	breq	.+8      	; 0xb32 <queue_clear+0x1a>

// مسح الكيو بالكامل
void queue_clear(queue q) {
    if (q == NULL) return;
    while (!queue_is_empty(q)) {
        queue_pop(q);
     b2a:	ce 01       	movw	r24, r28
     b2c:	0e 94 30 05 	call	0xa60	; 0xa60 <queue_pop>
     b30:	f8 cf       	rjmp	.-16     	; 0xb22 <queue_clear+0xa>
    }
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <queue_destroy>:
    q->size = 0;
    return q;
}

// تدمير الكيو
void queue_destroy(queue q) {
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
    if (q == NULL) return;
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	29 f0       	breq	.+10     	; 0xb4c <queue_destroy+0x14>
    queue_clear(q);
     b42:	0e 94 8c 05 	call	0xb18	; 0xb18 <queue_clear>
    free(q);
     b46:	ce 01       	movw	r24, r28
     b48:	0e 94 08 0b 	call	0x1610	; 0x1610 <free>
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <queue_push>:

// إضافة عنصر
void queue_push(queue q, item_type elem) {
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	27 97       	sbiw	r28, 0x07	; 7
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	7c 01       	movw	r14, r24
     b70:	09 83       	std	Y+1, r16	; 0x01
     b72:	1a 83       	std	Y+2, r17	; 0x02
     b74:	2b 83       	std	Y+3, r18	; 0x03
     b76:	3c 83       	std	Y+4, r19	; 0x04
     b78:	4d 83       	std	Y+5, r20	; 0x05
     b7a:	5e 83       	std	Y+6, r21	; 0x06
     b7c:	6f 83       	std	Y+7, r22	; 0x07
    if (q == NULL) return;
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	a1 f1       	breq	.+104    	; 0xbea <queue_push+0x98>
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
     b82:	89 e0       	ldi	r24, 0x09	; 9
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <malloc>
     b8a:	fc 01       	movw	r30, r24
    if (new_node == NULL) return; // فشل في الحجز
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	69 f1       	breq	.+90     	; 0xbea <queue_push+0x98>

    new_node->data = elem;
     b90:	9c 01       	movw	r18, r24
     b92:	ae 01       	movw	r20, r28
     b94:	4f 5f       	subi	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	da 01       	movw	r26, r20
     b9c:	0d 90       	ld	r0, X+
     b9e:	ad 01       	movw	r20, r26
     ba0:	d9 01       	movw	r26, r18
     ba2:	0d 92       	st	X+, r0
     ba4:	9d 01       	movw	r18, r26
     ba6:	81 50       	subi	r24, 0x01	; 1
     ba8:	c1 f7       	brne	.-16     	; 0xb9a <queue_push+0x48>
    new_node->next = NULL;
     baa:	10 86       	std	Z+8, r1	; 0x08
     bac:	17 82       	std	Z+7, r1	; 0x07

    if (q->rear == NULL) {
     bae:	d7 01       	movw	r26, r14
     bb0:	12 96       	adiw	r26, 0x02	; 2
     bb2:	8d 91       	ld	r24, X+
     bb4:	9c 91       	ld	r25, X
     bb6:	13 97       	sbiw	r26, 0x03	; 3
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	39 f4       	brne	.+14     	; 0xbca <queue_push+0x78>
        q->front = q->rear = new_node;
     bbc:	13 96       	adiw	r26, 0x03	; 3
     bbe:	fc 93       	st	X, r31
     bc0:	ee 93       	st	-X, r30
     bc2:	12 97       	sbiw	r26, 0x02	; 2
     bc4:	ed 93       	st	X+, r30
     bc6:	fc 93       	st	X, r31
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <queue_push+0x8c>
    } else {
        q->rear->next = new_node;
     bca:	dc 01       	movw	r26, r24
     bcc:	18 96       	adiw	r26, 0x08	; 8
     bce:	fc 93       	st	X, r31
     bd0:	ee 93       	st	-X, r30
     bd2:	17 97       	sbiw	r26, 0x07	; 7
        q->rear = new_node;
     bd4:	d7 01       	movw	r26, r14
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	fc 93       	st	X, r31
     bda:	ee 93       	st	-X, r30
     bdc:	12 97       	sbiw	r26, 0x02	; 2
    }
    q->size++;
     bde:	f7 01       	movw	r30, r14
     be0:	84 81       	ldd	r24, Z+4	; 0x04
     be2:	95 81       	ldd	r25, Z+5	; 0x05
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	95 83       	std	Z+5, r25	; 0x05
     be8:	84 83       	std	Z+4, r24	; 0x04
}
     bea:	27 96       	adiw	r28, 0x07	; 7
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <queue_create>:
    int size;
};

// إنشاء الكيو
queue queue_create() {
    queue q = (queue)malloc(sizeof(struct _queue));
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <malloc>
     c0c:	fc 01       	movw	r30, r24
    if (q == NULL) {
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	31 f0       	breq	.+12     	; 0xc1e <queue_create+0x1a>
        return NULL; // فشل في الحجز
    }
    q->front = q->rear = NULL;
     c12:	13 82       	std	Z+3, r1	; 0x03
     c14:	12 82       	std	Z+2, r1	; 0x02
     c16:	11 82       	std	Z+1, r1	; 0x01
     c18:	10 82       	st	Z, r1
    q->size = 0;
     c1a:	15 82       	std	Z+5, r1	; 0x05
     c1c:	14 82       	std	Z+4, r1	; 0x04
    return q;
}
     c1e:	cf 01       	movw	r24, r30
     c20:	08 95       	ret

00000c22 <PWM_Timer0_Start>:
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
     c22:	bb 9a       	sbi	0x17, 3	; 23

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS02) | (1 << CS00);
     c24:	9d e6       	ldi	r25, 0x6D	; 109
     c26:	93 bf       	out	0x33, r25	; 51
    // CS02 and CS00 -> Prescaler = 1024

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsi3>
     c3e:	24 e6       	ldi	r18, 0x64	; 100
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodsi4>
     c4a:	2c bf       	out	0x3c, r18	; 60
}
     c4c:	08 95       	ret

00000c4e <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c4e:	68 30       	cpi	r22, 0x08	; 8
     c50:	08 f0       	brcs	.+2      	; 0xc54 <GPIO_setupPinDirection+0x6>
     c52:	70 c0       	rjmp	.+224    	; 0xd34 <GPIO_setupPinDirection+0xe6>
     c54:	84 30       	cpi	r24, 0x04	; 4
     c56:	08 f0       	brcs	.+2      	; 0xc5a <GPIO_setupPinDirection+0xc>
     c58:	6d c0       	rjmp	.+218    	; 0xd34 <GPIO_setupPinDirection+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	09 f1       	breq	.+66     	; 0xca0 <GPIO_setupPinDirection+0x52>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	30 f0       	brcs	.+12     	; 0xc6e <GPIO_setupPinDirection+0x20>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	b1 f1       	breq	.+108    	; 0xcd2 <GPIO_setupPinDirection+0x84>
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	09 f0       	breq	.+2      	; 0xc6c <GPIO_setupPinDirection+0x1e>
     c6a:	64 c0       	rjmp	.+200    	; 0xd34 <GPIO_setupPinDirection+0xe6>
     c6c:	4b c0       	rjmp	.+150    	; 0xd04 <GPIO_setupPinDirection+0xb6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c6e:	41 30       	cpi	r20, 0x01	; 1
     c70:	59 f4       	brne	.+22     	; 0xc88 <GPIO_setupPinDirection+0x3a>
			{
				SET_BIT(DDRA,pin_num);
     c72:	2a b3       	in	r18, 0x1a	; 26
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <GPIO_setupPinDirection+0x30>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	6a 95       	dec	r22
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <GPIO_setupPinDirection+0x2c>
     c82:	28 2b       	or	r18, r24
     c84:	2a bb       	out	0x1a, r18	; 26
     c86:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c88:	2a b3       	in	r18, 0x1a	; 26
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <GPIO_setupPinDirection+0x46>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	6a 95       	dec	r22
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <GPIO_setupPinDirection+0x42>
     c98:	80 95       	com	r24
     c9a:	82 23       	and	r24, r18
     c9c:	8a bb       	out	0x1a, r24	; 26
     c9e:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ca0:	41 30       	cpi	r20, 0x01	; 1
     ca2:	59 f4       	brne	.+22     	; 0xcba <GPIO_setupPinDirection+0x6c>
			{
				SET_BIT(DDRB,pin_num);
     ca4:	27 b3       	in	r18, 0x17	; 23
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <GPIO_setupPinDirection+0x62>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	6a 95       	dec	r22
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <GPIO_setupPinDirection+0x5e>
     cb4:	28 2b       	or	r18, r24
     cb6:	27 bb       	out	0x17, r18	; 23
     cb8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     cba:	27 b3       	in	r18, 0x17	; 23
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <GPIO_setupPinDirection+0x78>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <GPIO_setupPinDirection+0x74>
     cca:	80 95       	com	r24
     ccc:	82 23       	and	r24, r18
     cce:	87 bb       	out	0x17, r24	; 23
     cd0:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cd2:	41 30       	cpi	r20, 0x01	; 1
     cd4:	59 f4       	brne	.+22     	; 0xcec <GPIO_setupPinDirection+0x9e>
			{
				SET_BIT(DDRC,pin_num);
     cd6:	24 b3       	in	r18, 0x14	; 20
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <GPIO_setupPinDirection+0x94>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	6a 95       	dec	r22
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <GPIO_setupPinDirection+0x90>
     ce6:	28 2b       	or	r18, r24
     ce8:	24 bb       	out	0x14, r18	; 20
     cea:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cec:	24 b3       	in	r18, 0x14	; 20
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <GPIO_setupPinDirection+0xaa>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	6a 95       	dec	r22
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <GPIO_setupPinDirection+0xa6>
     cfc:	80 95       	com	r24
     cfe:	82 23       	and	r24, r18
     d00:	84 bb       	out	0x14, r24	; 20
     d02:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d04:	41 30       	cpi	r20, 0x01	; 1
     d06:	59 f4       	brne	.+22     	; 0xd1e <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
     d08:	21 b3       	in	r18, 0x11	; 17
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <GPIO_setupPinDirection+0xc6>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	6a 95       	dec	r22
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <GPIO_setupPinDirection+0xc2>
     d18:	28 2b       	or	r18, r24
     d1a:	21 bb       	out	0x11, r18	; 17
     d1c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d1e:	21 b3       	in	r18, 0x11	; 17
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0xdc>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	6a 95       	dec	r22
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0xd8>
     d2e:	80 95       	com	r24
     d30:	82 23       	and	r24, r18
     d32:	81 bb       	out	0x11, r24	; 17
     d34:	08 95       	ret

00000d36 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d36:	68 30       	cpi	r22, 0x08	; 8
     d38:	08 f0       	brcs	.+2      	; 0xd3c <GPIO_writePin+0x6>
     d3a:	70 c0       	rjmp	.+224    	; 0xe1c <GPIO_writePin+0xe6>
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <GPIO_writePin+0xc>
     d40:	6d c0       	rjmp	.+218    	; 0xe1c <GPIO_writePin+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	09 f1       	breq	.+66     	; 0xd88 <GPIO_writePin+0x52>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	30 f0       	brcs	.+12     	; 0xd56 <GPIO_writePin+0x20>
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	b1 f1       	breq	.+108    	; 0xdba <GPIO_writePin+0x84>
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	09 f0       	breq	.+2      	; 0xd54 <GPIO_writePin+0x1e>
     d52:	64 c0       	rjmp	.+200    	; 0xe1c <GPIO_writePin+0xe6>
     d54:	4b c0       	rjmp	.+150    	; 0xdec <GPIO_writePin+0xb6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d56:	41 30       	cpi	r20, 0x01	; 1
     d58:	59 f4       	brne	.+22     	; 0xd70 <GPIO_writePin+0x3a>
			{
				SET_BIT(PORTA,pin_num);
     d5a:	2b b3       	in	r18, 0x1b	; 27
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <GPIO_writePin+0x30>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	6a 95       	dec	r22
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <GPIO_writePin+0x2c>
     d6a:	28 2b       	or	r18, r24
     d6c:	2b bb       	out	0x1b, r18	; 27
     d6e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     d70:	2b b3       	in	r18, 0x1b	; 27
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <GPIO_writePin+0x46>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <GPIO_writePin+0x42>
     d80:	80 95       	com	r24
     d82:	82 23       	and	r24, r18
     d84:	8b bb       	out	0x1b, r24	; 27
     d86:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     d88:	41 30       	cpi	r20, 0x01	; 1
     d8a:	59 f4       	brne	.+22     	; 0xda2 <GPIO_writePin+0x6c>
			{
				SET_BIT(PORTB,pin_num);
     d8c:	28 b3       	in	r18, 0x18	; 24
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_writePin+0x62>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_writePin+0x5e>
     d9c:	28 2b       	or	r18, r24
     d9e:	28 bb       	out	0x18, r18	; 24
     da0:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     da2:	28 b3       	in	r18, 0x18	; 24
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <GPIO_writePin+0x78>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	6a 95       	dec	r22
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <GPIO_writePin+0x74>
     db2:	80 95       	com	r24
     db4:	82 23       	and	r24, r18
     db6:	88 bb       	out	0x18, r24	; 24
     db8:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     dba:	41 30       	cpi	r20, 0x01	; 1
     dbc:	59 f4       	brne	.+22     	; 0xdd4 <GPIO_writePin+0x9e>
			{
				SET_BIT(PORTC,pin_num);
     dbe:	25 b3       	in	r18, 0x15	; 21
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <GPIO_writePin+0x94>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	6a 95       	dec	r22
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <GPIO_writePin+0x90>
     dce:	28 2b       	or	r18, r24
     dd0:	25 bb       	out	0x15, r18	; 21
     dd2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     dd4:	25 b3       	in	r18, 0x15	; 21
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_writePin+0xaa>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	6a 95       	dec	r22
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_writePin+0xa6>
     de4:	80 95       	com	r24
     de6:	82 23       	and	r24, r18
     de8:	85 bb       	out	0x15, r24	; 21
     dea:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     dec:	41 30       	cpi	r20, 0x01	; 1
     dee:	59 f4       	brne	.+22     	; 0xe06 <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
     df0:	22 b3       	in	r18, 0x12	; 18
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_writePin+0xc6>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	6a 95       	dec	r22
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_writePin+0xc2>
     e00:	28 2b       	or	r18, r24
     e02:	22 bb       	out	0x12, r18	; 18
     e04:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     e06:	22 b3       	in	r18, 0x12	; 18
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <GPIO_writePin+0xdc>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	6a 95       	dec	r22
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <GPIO_writePin+0xd8>
     e16:	80 95       	com	r24
     e18:	82 23       	and	r24, r18
     e1a:	82 bb       	out	0x12, r24	; 18
     e1c:	08 95       	ret

00000e1e <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e1e:	68 30       	cpi	r22, 0x08	; 8
     e20:	d0 f4       	brcc	.+52     	; 0xe56 <GPIO_readPin+0x38>
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	c0 f4       	brcc	.+48     	; 0xe56 <GPIO_readPin+0x38>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	49 f0       	breq	.+18     	; 0xe3c <GPIO_readPin+0x1e>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	28 f0       	brcs	.+10     	; 0xe38 <GPIO_readPin+0x1a>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	39 f0       	breq	.+14     	; 0xe40 <GPIO_readPin+0x22>
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	81 f4       	brne	.+32     	; 0xe56 <GPIO_readPin+0x38>
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <GPIO_readPin+0x26>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     e38:	89 b3       	in	r24, 0x19	; 25
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     e3c:	86 b3       	in	r24, 0x16	; 22
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     e40:	83 b3       	in	r24, 0x13	; 19
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     e44:	80 b3       	in	r24, 0x10	; 16
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <GPIO_readPin+0x30>
     e4a:	95 95       	asr	r25
     e4c:	87 95       	ror	r24
     e4e:	6a 95       	dec	r22
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <GPIO_readPin+0x2c>
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	08 95       	ret
     e56:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     e58:	08 95       	ret

00000e5a <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	80 f4       	brcc	.+32     	; 0xe7e <GPIO_setupPortDirection+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	49 f0       	breq	.+18     	; 0xe74 <GPIO_setupPortDirection+0x1a>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	28 f0       	brcs	.+10     	; 0xe70 <GPIO_setupPortDirection+0x16>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	39 f0       	breq	.+14     	; 0xe78 <GPIO_setupPortDirection+0x1e>
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	41 f4       	brne	.+16     	; 0xe7e <GPIO_setupPortDirection+0x24>
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <GPIO_setupPortDirection+0x22>
		{
		case PORTA_ID:
			DDRA = direction;
     e70:	6a bb       	out	0x1a, r22	; 26
     e72:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
     e74:	67 bb       	out	0x17, r22	; 23
     e76:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
     e78:	64 bb       	out	0x14, r22	; 20
     e7a:	08 95       	ret
			break;
		case PORTD_ID:
			DDRD = direction;
     e7c:	61 bb       	out	0x11, r22	; 17
     e7e:	08 95       	ret

00000e80 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	80 f4       	brcc	.+32     	; 0xea4 <GPIO_writePort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	49 f0       	breq	.+18     	; 0xe9a <GPIO_writePort+0x1a>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	28 f0       	brcs	.+10     	; 0xe96 <GPIO_writePort+0x16>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	39 f0       	breq	.+14     	; 0xe9e <GPIO_writePort+0x1e>
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	41 f4       	brne	.+16     	; 0xea4 <GPIO_writePort+0x24>
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <GPIO_writePort+0x22>
		{
		case PORTA_ID:
			PORTA = value;
     e96:	6b bb       	out	0x1b, r22	; 27
     e98:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
     e9a:	68 bb       	out	0x18, r22	; 24
     e9c:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
     e9e:	65 bb       	out	0x15, r22	; 21
     ea0:	08 95       	ret
			break;
		case PORTD_ID:
			PORTD = value;
     ea2:	62 bb       	out	0x12, r22	; 18
     ea4:	08 95       	ret

00000ea6 <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	88 f4       	brcc	.+34     	; 0xecc <GPIO_readPort+0x26>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	49 f0       	breq	.+18     	; 0xec0 <GPIO_readPort+0x1a>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	28 f0       	brcs	.+10     	; 0xebc <GPIO_readPort+0x16>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	39 f0       	breq	.+14     	; 0xec4 <GPIO_readPort+0x1e>
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	49 f4       	brne	.+18     	; 0xecc <GPIO_readPort+0x26>
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <GPIO_readPort+0x22>
		{
		case PORTA_ID:
			value = PINA;
     ebc:	89 b3       	in	r24, 0x19	; 25
     ebe:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
     ec0:	86 b3       	in	r24, 0x16	; 22
     ec2:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
     ec4:	83 b3       	in	r24, 0x13	; 19
     ec6:	08 95       	ret
			break;
		case PORTD_ID:
			value = PIND;
     ec8:	80 b3       	in	r24, 0x10	; 16
     eca:	08 95       	ret
     ecc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
     ece:	08 95       	ret

00000ed0 <DC_RIGHT_INIT>:
#include "DC_Motor.h"

void DC_RIGHT_INIT(void)
{
    // Set IN1 and IN2 (motor right direction pins) as output
    DC_MOTOR_RIGHT_DDR |= (1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2);
     ed0:	87 b3       	in	r24, 0x17	; 23
     ed2:	83 60       	ori	r24, 0x03	; 3
     ed4:	87 bb       	out	0x17, r24	; 23

    // Set PWM pin (OC0 -> PB3) as output
    PWM_RIGHT_DDR |= (1 << PWM_RIGHT_PIN);
     ed6:	bb 9a       	sbi	0x17, 3	; 23

    // Set Timer0 to Fast PWM mode, non-inverting
    TCCR0 = (1 << WGM00) | (1 << WGM01)   // Fast PWM Mode
     ed8:	8b e6       	ldi	r24, 0x6B	; 107
     eda:	83 bf       	out	0x33, r24	; 51
           | (1 << COM01)|            // Non-Inverting Mode
		   (1<<CS01) | (1<<CS00);;   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     edc:	88 b3       	in	r24, 0x18	; 24
     ede:	8c 7f       	andi	r24, 0xFC	; 252
     ee0:	88 bb       	out	0x18, r24	; 24
    OCR0 = 0; // 0% duty cycle
     ee2:	1c be       	out	0x3c, r1	; 60
}
     ee4:	08 95       	ret

00000ee6 <DC_LEFT_INIT>:
void DC_LEFT_INIT(void){
    // Set IN3 and IN4 as output (خليهم مثلاً PC2 و PC3)
    DC_MOTOR_LEFT_DDR |= (1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2);
     ee6:	81 b3       	in	r24, 0x11	; 17
     ee8:	80 66       	ori	r24, 0x60	; 96
     eea:	81 bb       	out	0x11, r24	; 17

    // Set PWM pin (OC2 -> PD7) as output
    PWM_LEFT_DDR |= (1 << PWM_LEFT_PIN);
     eec:	8f 9a       	sbi	0x11, 7	; 17

    // Set Timer2 to Fast PWM mode, non-inverting
    TCCR2 = (1 << WGM20) | (1 << WGM21)   // Fast PWM Mode
     eee:	8c e6       	ldi	r24, 0x6C	; 108
     ef0:	85 bd       	out	0x25, r24	; 37
           | (1 << COM21)|                 // Non-Inverting Mode
		   (1<<CS22);   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     ef2:	82 b3       	in	r24, 0x12	; 18
     ef4:	8f 79       	andi	r24, 0x9F	; 159
     ef6:	82 bb       	out	0x12, r24	; 18
    OCR2 = 0; // 0% duty cycle
     ef8:	13 bc       	out	0x23, r1	; 35


}
     efa:	08 95       	ret

00000efc <DC_RIGHT>:

void DC_RIGHT(DcMotor_State state, uint8 speed)
{
     efc:	28 2f       	mov	r18, r24
    if (speed > 100) speed = 100;

    // Convert % to 8-bit PWM value (0-255)
    OCR0 = (uint8)((speed * 255) / 100);
     efe:	65 36       	cpi	r22, 0x65	; 101
     f00:	08 f0       	brcs	.+2      	; 0xf04 <DC_RIGHT+0x8>
     f02:	64 e6       	ldi	r22, 0x64	; 100
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	68 9f       	mul	r22, r24
     f08:	c0 01       	movw	r24, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	64 e6       	ldi	r22, 0x64	; 100
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 12 0a 	call	0x1424	; 0x1424 <__divmodhi4>
     f14:	6c bf       	out	0x3c, r22	; 60

    switch (state)
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	19 f0       	breq	.+6      	; 0xf20 <DC_RIGHT+0x24>
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	39 f4       	brne	.+14     	; 0xf2c <DC_RIGHT+0x30>
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <DC_RIGHT+0x2a>
    {
        case CW:
            DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN1);
     f20:	c0 9a       	sbi	0x18, 0	; 24
            DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN2);
     f22:	c1 98       	cbi	0x18, 1	; 24
     f24:	08 95       	ret
            break;

        case A_CW:
            DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN2);
     f26:	c1 9a       	sbi	0x18, 1	; 24
            DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN1);
     f28:	c0 98       	cbi	0x18, 0	; 24
     f2a:	08 95       	ret
            break;

        case STOP:
        default:
            DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     f2c:	88 b3       	in	r24, 0x18	; 24
     f2e:	8c 7f       	andi	r24, 0xFC	; 252
     f30:	88 bb       	out	0x18, r24	; 24
     f32:	08 95       	ret

00000f34 <DC_LEFT>:
            break;
    }
}
void DC_LEFT(DcMotor_State state, uint8 speed)
{
     f34:	28 2f       	mov	r18, r24
    if (speed > 100) speed = 100;

    // Convert % to 8-bit PWM value (0-255)
    OCR2 = (uint8)((speed * 255) / 100);
     f36:	65 36       	cpi	r22, 0x65	; 101
     f38:	08 f0       	brcs	.+2      	; 0xf3c <DC_LEFT+0x8>
     f3a:	64 e6       	ldi	r22, 0x64	; 100
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	68 9f       	mul	r22, r24
     f40:	c0 01       	movw	r24, r0
     f42:	11 24       	eor	r1, r1
     f44:	64 e6       	ldi	r22, 0x64	; 100
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	0e 94 12 0a 	call	0x1424	; 0x1424 <__divmodhi4>
     f4c:	63 bd       	out	0x23, r22	; 35

    switch (state)
     f4e:	21 30       	cpi	r18, 0x01	; 1
     f50:	19 f0       	breq	.+6      	; 0xf58 <DC_LEFT+0x24>
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	39 f4       	brne	.+14     	; 0xf64 <DC_LEFT+0x30>
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <DC_LEFT+0x2a>
    {
        case CW:
            DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN1);
     f58:	95 9a       	sbi	0x12, 5	; 18
            DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN2);
     f5a:	96 98       	cbi	0x12, 6	; 18
     f5c:	08 95       	ret
            break;
        case A_CW:
            DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN2);
     f5e:	96 9a       	sbi	0x12, 6	; 18
            DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN1);
     f60:	95 98       	cbi	0x12, 5	; 18
     f62:	08 95       	ret
            break;
        case STOP:
        default:
            DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     f64:	82 b3       	in	r24, 0x12	; 18
     f66:	8f 79       	andi	r24, 0x9F	; 159
     f68:	82 bb       	out	0x12, r24	; 18
     f6a:	08 95       	ret

00000f6c <IR1_init>:
#include "IR_sensor.h"

// ==== INIT Functions ====
void IR1_init(void){ IR_DDR &= ~(1<<IR1_PIN); }
     f6c:	a0 98       	cbi	0x14, 0	; 20
     f6e:	08 95       	ret

00000f70 <IR2_init>:
void IR2_init(void){ IR_DDR &= ~(1<<IR2_PIN); }
     f70:	a1 98       	cbi	0x14, 1	; 20
     f72:	08 95       	ret

00000f74 <IR3_init>:
void IR3_init(void){ IR_DDR &= ~(1<<IR3_PIN); }
     f74:	a2 98       	cbi	0x14, 2	; 20
     f76:	08 95       	ret

00000f78 <IR4_init>:
void IR4_init(void){ IR_DDR &= ~(1<<IR4_PIN); }
     f78:	a3 98       	cbi	0x14, 3	; 20
     f7a:	08 95       	ret

00000f7c <IR5_init>:
void IR5_init(void){ IR_DDR &= ~(1<<IR5_PIN); }
     f7c:	a4 98       	cbi	0x14, 4	; 20
     f7e:	08 95       	ret

00000f80 <IR6_init>:
void IR6_init(void){ IR_DDR &= ~(1<<IR6_PIN); }
     f80:	a5 98       	cbi	0x14, 5	; 20
     f82:	08 95       	ret

00000f84 <IR7_init>:
void IR7_init(void){ IR_DDR &= ~(1<<IR7_PIN); }
     f84:	a6 98       	cbi	0x14, 6	; 20
     f86:	08 95       	ret

00000f88 <IR8_init>:
void IR8_init(void){ IR_DDR &= ~(1<<IR8_PIN); }
     f88:	a7 98       	cbi	0x14, 7	; 20
     f8a:	08 95       	ret

00000f8c <IR1_getState>:

// ==== GET STATE Functions ====
uint8 IR1_getState(void){ return (IR_PIN_REG & (1<<IR1_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     f8c:	83 b3       	in	r24, 0x13	; 19
     f8e:	81 70       	andi	r24, 0x01	; 1
     f90:	08 95       	ret

00000f92 <IR2_getState>:
uint8 IR2_getState(void){ return (IR_PIN_REG & (1<<IR2_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     f92:	83 b3       	in	r24, 0x13	; 19
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	96 95       	lsr	r25
     f98:	87 95       	ror	r24
     f9a:	81 70       	andi	r24, 0x01	; 1
     f9c:	08 95       	ret

00000f9e <IR3_getState>:
uint8 IR3_getState(void){ return (IR_PIN_REG & (1<<IR3_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     f9e:	83 b3       	in	r24, 0x13	; 19
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	08 95       	ret

00000fae <IR4_getState>:
uint8 IR4_getState(void){ return (IR_PIN_REG & (1<<IR4_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     fae:	83 b3       	in	r24, 0x13	; 19
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	43 e0       	ldi	r20, 0x03	; 3
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	4a 95       	dec	r20
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <IR4_getState+0x6>
     fbc:	81 70       	andi	r24, 0x01	; 1
     fbe:	08 95       	ret

00000fc0 <IR5_getState>:
uint8 IR5_getState(void){ return (IR_PIN_REG & (1<<IR5_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     fc0:	83 b3       	in	r24, 0x13	; 19
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	54 e0       	ldi	r21, 0x04	; 4
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	5a 95       	dec	r21
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <IR5_getState+0x6>
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	08 95       	ret

00000fd2 <IR6_getState>:
uint8 IR6_getState(void){ return (IR_PIN_REG & (1<<IR6_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     fd2:	83 b3       	in	r24, 0x13	; 19
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	65 e0       	ldi	r22, 0x05	; 5
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24
     fdc:	6a 95       	dec	r22
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <IR6_getState+0x6>
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	08 95       	ret

00000fe4 <IR7_getState>:
uint8 IR7_getState(void){ return (IR_PIN_REG & (1<<IR7_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     fe4:	83 b3       	in	r24, 0x13	; 19
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	76 e0       	ldi	r23, 0x06	; 6
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	7a 95       	dec	r23
     ff0:	e1 f7       	brne	.-8      	; 0xfea <IR7_getState+0x6>
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <IR8_getState>:
uint8 IR8_getState(void){ return (IR_PIN_REG & (1<<IR8_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     ff6:	83 b3       	in	r24, 0x13	; 19
     ff8:	88 1f       	adc	r24, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	88 1f       	adc	r24, r24
     ffe:	08 95       	ret

00001000 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1016:	e0 ea       	ldi	r30, 0xA0	; 160
    1018:	ee 2e       	mov	r14, r30
    101a:	ef e0       	ldi	r30, 0x0F	; 15
    101c:	fe 2e       	mov	r15, r30
    101e:	c7 01       	movw	r24, r14
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <LCD_displayCharacter+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    102e:	c7 01       	movw	r24, r14
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <LCD_displayCharacter+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1034:	0d 2d       	mov	r16, r13
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	a8 01       	movw	r20, r16
    103a:	40 71       	andi	r20, 0x10	; 16
    103c:	50 70       	andi	r21, 0x00	; 0
    103e:	74 e0       	ldi	r23, 0x04	; 4
    1040:	55 95       	asr	r21
    1042:	47 95       	ror	r20
    1044:	7a 95       	dec	r23
    1046:	e1 f7       	brne	.-8      	; 0x1040 <LCD_displayCharacter+0x40>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	63 e0       	ldi	r22, 0x03	; 3
    104c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1050:	a8 01       	movw	r20, r16
    1052:	40 72       	andi	r20, 0x20	; 32
    1054:	50 70       	andi	r21, 0x00	; 0
    1056:	65 e0       	ldi	r22, 0x05	; 5
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	6a 95       	dec	r22
    105e:	e1 f7       	brne	.-8      	; 0x1058 <LCD_displayCharacter+0x58>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	64 e0       	ldi	r22, 0x04	; 4
    1064:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1068:	a8 01       	movw	r20, r16
    106a:	40 74       	andi	r20, 0x40	; 64
    106c:	50 70       	andi	r21, 0x00	; 0
    106e:	36 e0       	ldi	r19, 0x06	; 6
    1070:	55 95       	asr	r21
    1072:	47 95       	ror	r20
    1074:	3a 95       	dec	r19
    1076:	e1 f7       	brne	.-8      	; 0x1070 <LCD_displayCharacter+0x70>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	65 e0       	ldi	r22, 0x05	; 5
    107c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1080:	4d 2d       	mov	r20, r13
    1082:	44 1f       	adc	r20, r20
    1084:	44 27       	eor	r20, r20
    1086:	44 1f       	adc	r20, r20
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	66 e0       	ldi	r22, 0x06	; 6
    108c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1090:	c7 01       	movw	r24, r14
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCD_displayCharacter+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    10a0:	c7 01       	movw	r24, r14
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_displayCharacter+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    10b0:	c7 01       	movw	r24, r14
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_displayCharacter+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	d8 22       	and	r13, r24
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	63 e0       	ldi	r22, 0x03	; 3
    10be:	4d 2d       	mov	r20, r13
    10c0:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    10c4:	a8 01       	movw	r20, r16
    10c6:	42 70       	andi	r20, 0x02	; 2
    10c8:	50 70       	andi	r21, 0x00	; 0
    10ca:	55 95       	asr	r21
    10cc:	47 95       	ror	r20
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	64 e0       	ldi	r22, 0x04	; 4
    10d2:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    10d6:	a8 01       	movw	r20, r16
    10d8:	44 70       	andi	r20, 0x04	; 4
    10da:	50 70       	andi	r21, 0x00	; 0
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	65 e0       	ldi	r22, 0x05	; 5
    10e8:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    10ec:	08 70       	andi	r16, 0x08	; 8
    10ee:	10 70       	andi	r17, 0x00	; 0
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	15 95       	asr	r17
    10f4:	07 95       	ror	r16
    10f6:	8a 95       	dec	r24
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <LCD_displayCharacter+0xf2>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	66 e0       	ldi	r22, 0x06	; 6
    10fe:	40 2f       	mov	r20, r16
    1100:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1104:	c7 01       	movw	r24, r14
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <LCD_displayCharacter+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1114:	c7 01       	movw	r24, r14
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <LCD_displayCharacter+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	08 95       	ret

00001126 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <LCD_displayString+0x12>
	uint8 i = 0;
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1132:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_displayCharacter>
		i++;
    1136:	1f 5f       	subi	r17, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1138:	fe 01       	movw	r30, r28
    113a:	e1 0f       	add	r30, r17
    113c:	f1 1d       	adc	r31, r1
    113e:	80 81       	ld	r24, Z
    1140:	88 23       	and	r24, r24
    1142:	b9 f7       	brne	.-18     	; 0x1132 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	08 95       	ret

0000114c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	60 97       	sbiw	r28, 0x10	; 16
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1164:	8e 01       	movw	r16, r28
    1166:	0f 5f       	subi	r16, 0xFF	; 255
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
    116a:	b8 01       	movw	r22, r16
    116c:	4a e0       	ldi	r20, 0x0A	; 10
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <itoa>
   LCD_displayString(buff); /* Display the string */
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 93 08 	call	0x1126	; 0x1126 <LCD_displayString>
}
    117a:	60 96       	adiw	r28, 0x10	; 16
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    11a6:	30 ea       	ldi	r19, 0xA0	; 160
    11a8:	e3 2e       	mov	r14, r19
    11aa:	3f e0       	ldi	r19, 0x0F	; 15
    11ac:	f3 2e       	mov	r15, r19
    11ae:	c7 01       	movw	r24, r14
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <LCD_sendCommand+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    11be:	c7 01       	movw	r24, r14
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <LCD_sendCommand+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    11c4:	0d 2d       	mov	r16, r13
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	a8 01       	movw	r20, r16
    11ca:	40 71       	andi	r20, 0x10	; 16
    11cc:	50 70       	andi	r21, 0x00	; 0
    11ce:	24 e0       	ldi	r18, 0x04	; 4
    11d0:	55 95       	asr	r21
    11d2:	47 95       	ror	r20
    11d4:	2a 95       	dec	r18
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <LCD_sendCommand+0x40>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    11e0:	a8 01       	movw	r20, r16
    11e2:	40 72       	andi	r20, 0x20	; 32
    11e4:	50 70       	andi	r21, 0x00	; 0
    11e6:	95 e0       	ldi	r25, 0x05	; 5
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	9a 95       	dec	r25
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <LCD_sendCommand+0x58>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	64 e0       	ldi	r22, 0x04	; 4
    11f4:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    11f8:	a8 01       	movw	r20, r16
    11fa:	40 74       	andi	r20, 0x40	; 64
    11fc:	50 70       	andi	r21, 0x00	; 0
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	55 95       	asr	r21
    1202:	47 95       	ror	r20
    1204:	8a 95       	dec	r24
    1206:	e1 f7       	brne	.-8      	; 0x1200 <LCD_sendCommand+0x70>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	65 e0       	ldi	r22, 0x05	; 5
    120c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1210:	4d 2d       	mov	r20, r13
    1212:	44 1f       	adc	r20, r20
    1214:	44 27       	eor	r20, r20
    1216:	44 1f       	adc	r20, r20
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	66 e0       	ldi	r22, 0x06	; 6
    121c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1220:	c7 01       	movw	r24, r14
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <LCD_sendCommand+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	62 e0       	ldi	r22, 0x02	; 2
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1230:	c7 01       	movw	r24, r14
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <LCD_sendCommand+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1240:	c7 01       	movw	r24, r14
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_sendCommand+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	d8 22       	and	r13, r24
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	63 e0       	ldi	r22, 0x03	; 3
    124e:	4d 2d       	mov	r20, r13
    1250:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1254:	a8 01       	movw	r20, r16
    1256:	42 70       	andi	r20, 0x02	; 2
    1258:	50 70       	andi	r21, 0x00	; 0
    125a:	55 95       	asr	r21
    125c:	47 95       	ror	r20
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	64 e0       	ldi	r22, 0x04	; 4
    1262:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1266:	a8 01       	movw	r20, r16
    1268:	44 70       	andi	r20, 0x04	; 4
    126a:	50 70       	andi	r21, 0x00	; 0
    126c:	55 95       	asr	r21
    126e:	47 95       	ror	r20
    1270:	55 95       	asr	r21
    1272:	47 95       	ror	r20
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	65 e0       	ldi	r22, 0x05	; 5
    1278:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    127c:	08 70       	andi	r16, 0x08	; 8
    127e:	10 70       	andi	r17, 0x00	; 0
    1280:	f3 e0       	ldi	r31, 0x03	; 3
    1282:	15 95       	asr	r17
    1284:	07 95       	ror	r16
    1286:	fa 95       	dec	r31
    1288:	e1 f7       	brne	.-8      	; 0x1282 <LCD_sendCommand+0xf2>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	66 e0       	ldi	r22, 0x06	; 6
    128e:	40 2f       	mov	r20, r16
    1290:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    1294:	c7 01       	movw	r24, r14
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <LCD_sendCommand+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	0e 94 9b 06 	call	0xd36	; 0xd36 <GPIO_writePin>
    12a4:	c7 01       	movw	r24, r14
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <LCD_sendCommand+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	08 95       	ret

000012b6 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
}
    12bc:	08 95       	ret

000012be <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <LCD_moveCursor+0x12>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	50 f0       	brcs	.+20     	; 0x12da <LCD_moveCursor+0x1c>
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <LCD_moveCursor+0x16>
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	31 f4       	brne	.+12     	; 0x12da <LCD_moveCursor+0x1c>
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <LCD_moveCursor+0x1a>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
    12d0:	60 5c       	subi	r22, 0xC0	; 192
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <LCD_moveCursor+0x1c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    12d4:	60 5f       	subi	r22, 0xF0	; 240
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <LCD_moveCursor+0x1c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    12d8:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    12da:	86 2f       	mov	r24, r22
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
}
    12e2:	08 95       	ret

000012e4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    12ea:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 93 08 	call	0x1126	; 0x1126 <LCD_displayString>
}
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	20 e9       	ldi	r18, 0x90	; 144
    1314:	31 e0       	ldi	r19, 0x01	; 1
    1316:	f9 01       	movw	r30, r18
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <LCD_init+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	d9 f7       	brne	.-10     	; 0x1316 <LCD_init+0x1c>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	64 e0       	ldi	r22, 0x04	; 4
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	65 e0       	ldi	r22, 0x05	; 5
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	66 e0       	ldi	r22, 0x06	; 6
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 27 06 	call	0xc4e	; 0xc4e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1348:	83 e3       	ldi	r24, 0x33	; 51
    134a:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    134e:	82 e3       	ldi	r24, 0x32	; 50
    1350:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1354:	88 e2       	ldi	r24, 0x28	; 40
    1356:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    135a:	8c e0       	ldi	r24, 0x0C	; 12
    135c:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 c8 08 	call	0x1190	; 0x1190 <LCD_sendCommand>
}
    1366:	08 95       	ret

00001368 <main>:




int main(void){
	LCD_init();
    1368:	0e 94 7d 09 	call	0x12fa	; 0x12fa <LCD_init>
    generateInitialWalls();
    136c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <generateInitialWalls>

	IR1_init();
    1370:	0e 94 b6 07 	call	0xf6c	; 0xf6c <IR1_init>
	IR2_init();
    1374:	0e 94 b8 07 	call	0xf70	; 0xf70 <IR2_init>
	IR3_init();
    1378:	0e 94 ba 07 	call	0xf74	; 0xf74 <IR3_init>
	IR4_init();\
    137c:	0e 94 bc 07 	call	0xf78	; 0xf78 <IR4_init>
	IR5_init();
    1380:	0e 94 be 07 	call	0xf7c	; 0xf7c <IR5_init>
	IR6_init();
    1384:	0e 94 c0 07 	call	0xf80	; 0xf80 <IR6_init>
	IR7_init();
    1388:	0e 94 c2 07 	call	0xf84	; 0xf84 <IR7_init>
	IR8_init();
    138c:	0e 94 c4 07 	call	0xf88	; 0xf88 <IR8_init>

	DC_RIGHT_INIT();
    1390:	0e 94 68 07 	call	0xed0	; 0xed0 <DC_RIGHT_INIT>
	DC_LEFT_INIT();
    1394:	0e 94 73 07 	call	0xee6	; 0xee6 <DC_LEFT_INIT>

	LCD_displayString("mazaryta_team");
    1398:	83 e6       	ldi	r24, 0x63	; 99
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 93 08 	call	0x1126	; 0x1126 <LCD_displayString>

	while(1){
		 s1 = IR1_getState();
    13a0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <IR1_getState>
    13a4:	80 93 a6 04 	sts	0x04A6, r24
		 s2 = IR2_getState();
    13a8:	0e 94 c9 07 	call	0xf92	; 0xf92 <IR2_getState>
    13ac:	80 93 aa 04 	sts	0x04AA, r24
		 s3 = IR3_getState();
    13b0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <IR3_getState>
    13b4:	80 93 ab 04 	sts	0x04AB, r24
		 s4 = IR4_getState();
    13b8:	0e 94 d7 07 	call	0xfae	; 0xfae <IR4_getState>
    13bc:	80 93 a7 04 	sts	0x04A7, r24
		 s5 = IR5_getState();
    13c0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <IR5_getState>
    13c4:	80 93 a9 04 	sts	0x04A9, r24
		 s6 = IR6_getState();
    13c8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <IR6_getState>
    13cc:	80 93 a5 04 	sts	0x04A5, r24
		 s7 = IR7_getState();
    13d0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <IR7_getState>
    13d4:	80 93 ac 04 	sts	0x04AC, r24
		 s8 = IR8_getState();
    13d8:	0e 94 fb 07 	call	0xff6	; 0xff6 <IR8_getState>
    13dc:	80 93 a8 04 	sts	0x04A8, r24

	   Action nextMove = solver();
    13e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <solver>
    13e4:	dd cf       	rjmp	.-70     	; 0x13a0 <main+0x38>

000013e6 <__mulsi3>:
    13e6:	62 9f       	mul	r22, r18
    13e8:	d0 01       	movw	r26, r0
    13ea:	73 9f       	mul	r23, r19
    13ec:	f0 01       	movw	r30, r0
    13ee:	82 9f       	mul	r24, r18
    13f0:	e0 0d       	add	r30, r0
    13f2:	f1 1d       	adc	r31, r1
    13f4:	64 9f       	mul	r22, r20
    13f6:	e0 0d       	add	r30, r0
    13f8:	f1 1d       	adc	r31, r1
    13fa:	92 9f       	mul	r25, r18
    13fc:	f0 0d       	add	r31, r0
    13fe:	83 9f       	mul	r24, r19
    1400:	f0 0d       	add	r31, r0
    1402:	74 9f       	mul	r23, r20
    1404:	f0 0d       	add	r31, r0
    1406:	65 9f       	mul	r22, r21
    1408:	f0 0d       	add	r31, r0
    140a:	99 27       	eor	r25, r25
    140c:	72 9f       	mul	r23, r18
    140e:	b0 0d       	add	r27, r0
    1410:	e1 1d       	adc	r30, r1
    1412:	f9 1f       	adc	r31, r25
    1414:	63 9f       	mul	r22, r19
    1416:	b0 0d       	add	r27, r0
    1418:	e1 1d       	adc	r30, r1
    141a:	f9 1f       	adc	r31, r25
    141c:	bd 01       	movw	r22, r26
    141e:	cf 01       	movw	r24, r30
    1420:	11 24       	eor	r1, r1
    1422:	08 95       	ret

00001424 <__divmodhi4>:
    1424:	97 fb       	bst	r25, 7
    1426:	09 2e       	mov	r0, r25
    1428:	07 26       	eor	r0, r23
    142a:	0a d0       	rcall	.+20     	; 0x1440 <__divmodhi4_neg1>
    142c:	77 fd       	sbrc	r23, 7
    142e:	04 d0       	rcall	.+8      	; 0x1438 <__divmodhi4_neg2>
    1430:	2e d0       	rcall	.+92     	; 0x148e <__udivmodhi4>
    1432:	06 d0       	rcall	.+12     	; 0x1440 <__divmodhi4_neg1>
    1434:	00 20       	and	r0, r0
    1436:	1a f4       	brpl	.+6      	; 0x143e <__divmodhi4_exit>

00001438 <__divmodhi4_neg2>:
    1438:	70 95       	com	r23
    143a:	61 95       	neg	r22
    143c:	7f 4f       	sbci	r23, 0xFF	; 255

0000143e <__divmodhi4_exit>:
    143e:	08 95       	ret

00001440 <__divmodhi4_neg1>:
    1440:	f6 f7       	brtc	.-4      	; 0x143e <__divmodhi4_exit>
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__udivmodsi4>:
    144a:	a1 e2       	ldi	r26, 0x21	; 33
    144c:	1a 2e       	mov	r1, r26
    144e:	aa 1b       	sub	r26, r26
    1450:	bb 1b       	sub	r27, r27
    1452:	fd 01       	movw	r30, r26
    1454:	0d c0       	rjmp	.+26     	; 0x1470 <__udivmodsi4_ep>

00001456 <__udivmodsi4_loop>:
    1456:	aa 1f       	adc	r26, r26
    1458:	bb 1f       	adc	r27, r27
    145a:	ee 1f       	adc	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	a2 17       	cp	r26, r18
    1460:	b3 07       	cpc	r27, r19
    1462:	e4 07       	cpc	r30, r20
    1464:	f5 07       	cpc	r31, r21
    1466:	20 f0       	brcs	.+8      	; 0x1470 <__udivmodsi4_ep>
    1468:	a2 1b       	sub	r26, r18
    146a:	b3 0b       	sbc	r27, r19
    146c:	e4 0b       	sbc	r30, r20
    146e:	f5 0b       	sbc	r31, r21

00001470 <__udivmodsi4_ep>:
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	1a 94       	dec	r1
    147a:	69 f7       	brne	.-38     	; 0x1456 <__udivmodsi4_loop>
    147c:	60 95       	com	r22
    147e:	70 95       	com	r23
    1480:	80 95       	com	r24
    1482:	90 95       	com	r25
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	bd 01       	movw	r22, r26
    148a:	cf 01       	movw	r24, r30
    148c:	08 95       	ret

0000148e <__udivmodhi4>:
    148e:	aa 1b       	sub	r26, r26
    1490:	bb 1b       	sub	r27, r27
    1492:	51 e1       	ldi	r21, 0x11	; 17
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <__udivmodhi4_ep>

00001496 <__udivmodhi4_loop>:
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	a6 17       	cp	r26, r22
    149c:	b7 07       	cpc	r27, r23
    149e:	10 f0       	brcs	.+4      	; 0x14a4 <__udivmodhi4_ep>
    14a0:	a6 1b       	sub	r26, r22
    14a2:	b7 0b       	sbc	r27, r23

000014a4 <__udivmodhi4_ep>:
    14a4:	88 1f       	adc	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	5a 95       	dec	r21
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__udivmodhi4_loop>
    14ac:	80 95       	com	r24
    14ae:	90 95       	com	r25
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	08 95       	ret

000014b6 <malloc>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	bc 01       	movw	r22, r24
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	10 f4       	brcc	.+4      	; 0x14c6 <malloc+0x10>
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	a0 91 b0 05 	lds	r26, 0x05B0
    14ca:	b0 91 b1 05 	lds	r27, 0x05B1
    14ce:	ed 01       	movw	r28, r26
    14d0:	e0 e0       	ldi	r30, 0x00	; 0
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	21 c0       	rjmp	.+66     	; 0x151c <malloc+0x66>
    14da:	88 81       	ld	r24, Y
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	86 17       	cp	r24, r22
    14e0:	97 07       	cpc	r25, r23
    14e2:	69 f4       	brne	.+26     	; 0x14fe <malloc+0x48>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	9b 81       	ldd	r25, Y+3	; 0x03
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <malloc+0x3c>
    14ec:	93 83       	std	Z+3, r25	; 0x03
    14ee:	82 83       	std	Z+2, r24	; 0x02
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <malloc+0x44>
    14f2:	90 93 b1 05 	sts	0x05B1, r25
    14f6:	80 93 b0 05 	sts	0x05B0, r24
    14fa:	fe 01       	movw	r30, r28
    14fc:	34 c0       	rjmp	.+104    	; 0x1566 <malloc+0xb0>
    14fe:	68 17       	cp	r22, r24
    1500:	79 07       	cpc	r23, r25
    1502:	38 f4       	brcc	.+14     	; 0x1512 <malloc+0x5c>
    1504:	41 15       	cp	r20, r1
    1506:	51 05       	cpc	r21, r1
    1508:	19 f0       	breq	.+6      	; 0x1510 <malloc+0x5a>
    150a:	84 17       	cp	r24, r20
    150c:	95 07       	cpc	r25, r21
    150e:	08 f4       	brcc	.+2      	; 0x1512 <malloc+0x5c>
    1510:	ac 01       	movw	r20, r24
    1512:	fe 01       	movw	r30, r28
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	9c 01       	movw	r18, r24
    151a:	e9 01       	movw	r28, r18
    151c:	20 97       	sbiw	r28, 0x00	; 0
    151e:	e9 f6       	brne	.-70     	; 0x14da <malloc+0x24>
    1520:	41 15       	cp	r20, r1
    1522:	51 05       	cpc	r21, r1
    1524:	a9 f1       	breq	.+106    	; 0x1590 <malloc+0xda>
    1526:	ca 01       	movw	r24, r20
    1528:	86 1b       	sub	r24, r22
    152a:	97 0b       	sbc	r25, r23
    152c:	04 97       	sbiw	r24, 0x04	; 4
    152e:	08 f4       	brcc	.+2      	; 0x1532 <malloc+0x7c>
    1530:	ba 01       	movw	r22, r20
    1532:	e0 e0       	ldi	r30, 0x00	; 0
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	2a c0       	rjmp	.+84     	; 0x158c <malloc+0xd6>
    1538:	8d 91       	ld	r24, X+
    153a:	9c 91       	ld	r25, X
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	84 17       	cp	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	f9 f4       	brne	.+62     	; 0x1582 <malloc+0xcc>
    1544:	64 17       	cp	r22, r20
    1546:	75 07       	cpc	r23, r21
    1548:	81 f4       	brne	.+32     	; 0x156a <malloc+0xb4>
    154a:	12 96       	adiw	r26, 0x02	; 2
    154c:	8d 91       	ld	r24, X+
    154e:	9c 91       	ld	r25, X
    1550:	13 97       	sbiw	r26, 0x03	; 3
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	19 f0       	breq	.+6      	; 0x155c <malloc+0xa6>
    1556:	93 83       	std	Z+3, r25	; 0x03
    1558:	82 83       	std	Z+2, r24	; 0x02
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <malloc+0xae>
    155c:	90 93 b1 05 	sts	0x05B1, r25
    1560:	80 93 b0 05 	sts	0x05B0, r24
    1564:	fd 01       	movw	r30, r26
    1566:	32 96       	adiw	r30, 0x02	; 2
    1568:	4f c0       	rjmp	.+158    	; 0x1608 <malloc+0x152>
    156a:	ca 01       	movw	r24, r20
    156c:	86 1b       	sub	r24, r22
    156e:	97 0b       	sbc	r25, r23
    1570:	fd 01       	movw	r30, r26
    1572:	e8 0f       	add	r30, r24
    1574:	f9 1f       	adc	r31, r25
    1576:	61 93       	st	Z+, r22
    1578:	71 93       	st	Z+, r23
    157a:	02 97       	sbiw	r24, 0x02	; 2
    157c:	8d 93       	st	X+, r24
    157e:	9c 93       	st	X, r25
    1580:	43 c0       	rjmp	.+134    	; 0x1608 <malloc+0x152>
    1582:	fd 01       	movw	r30, r26
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	9c 01       	movw	r18, r24
    158a:	d9 01       	movw	r26, r18
    158c:	10 97       	sbiw	r26, 0x00	; 0
    158e:	a1 f6       	brne	.-88     	; 0x1538 <malloc+0x82>
    1590:	80 91 ae 05 	lds	r24, 0x05AE
    1594:	90 91 af 05 	lds	r25, 0x05AF
    1598:	89 2b       	or	r24, r25
    159a:	41 f4       	brne	.+16     	; 0x15ac <malloc+0xf6>
    159c:	80 91 73 00 	lds	r24, 0x0073
    15a0:	90 91 74 00 	lds	r25, 0x0074
    15a4:	90 93 af 05 	sts	0x05AF, r25
    15a8:	80 93 ae 05 	sts	0x05AE, r24
    15ac:	40 91 75 00 	lds	r20, 0x0075
    15b0:	50 91 76 00 	lds	r21, 0x0076
    15b4:	41 15       	cp	r20, r1
    15b6:	51 05       	cpc	r21, r1
    15b8:	41 f4       	brne	.+16     	; 0x15ca <malloc+0x114>
    15ba:	4d b7       	in	r20, 0x3d	; 61
    15bc:	5e b7       	in	r21, 0x3e	; 62
    15be:	80 91 71 00 	lds	r24, 0x0071
    15c2:	90 91 72 00 	lds	r25, 0x0072
    15c6:	48 1b       	sub	r20, r24
    15c8:	59 0b       	sbc	r21, r25
    15ca:	20 91 ae 05 	lds	r18, 0x05AE
    15ce:	30 91 af 05 	lds	r19, 0x05AF
    15d2:	24 17       	cp	r18, r20
    15d4:	35 07       	cpc	r19, r21
    15d6:	b0 f4       	brcc	.+44     	; 0x1604 <malloc+0x14e>
    15d8:	ca 01       	movw	r24, r20
    15da:	82 1b       	sub	r24, r18
    15dc:	93 0b       	sbc	r25, r19
    15de:	86 17       	cp	r24, r22
    15e0:	97 07       	cpc	r25, r23
    15e2:	80 f0       	brcs	.+32     	; 0x1604 <malloc+0x14e>
    15e4:	ab 01       	movw	r20, r22
    15e6:	4e 5f       	subi	r20, 0xFE	; 254
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	84 17       	cp	r24, r20
    15ec:	95 07       	cpc	r25, r21
    15ee:	50 f0       	brcs	.+20     	; 0x1604 <malloc+0x14e>
    15f0:	42 0f       	add	r20, r18
    15f2:	53 1f       	adc	r21, r19
    15f4:	50 93 af 05 	sts	0x05AF, r21
    15f8:	40 93 ae 05 	sts	0x05AE, r20
    15fc:	f9 01       	movw	r30, r18
    15fe:	61 93       	st	Z+, r22
    1600:	71 93       	st	Z+, r23
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <malloc+0x152>
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	cf 01       	movw	r24, r30
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <free>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	09 f4       	brne	.+2      	; 0x161a <free+0xa>
    1618:	50 c0       	rjmp	.+160    	; 0x16ba <free+0xaa>
    161a:	ec 01       	movw	r28, r24
    161c:	22 97       	sbiw	r28, 0x02	; 2
    161e:	1b 82       	std	Y+3, r1	; 0x03
    1620:	1a 82       	std	Y+2, r1	; 0x02
    1622:	a0 91 b0 05 	lds	r26, 0x05B0
    1626:	b0 91 b1 05 	lds	r27, 0x05B1
    162a:	10 97       	sbiw	r26, 0x00	; 0
    162c:	09 f1       	breq	.+66     	; 0x1670 <free+0x60>
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	ac 17       	cp	r26, r28
    1634:	bd 07       	cpc	r27, r29
    1636:	08 f1       	brcs	.+66     	; 0x167a <free+0x6a>
    1638:	bb 83       	std	Y+3, r27	; 0x03
    163a:	aa 83       	std	Y+2, r26	; 0x02
    163c:	fe 01       	movw	r30, r28
    163e:	21 91       	ld	r18, Z+
    1640:	31 91       	ld	r19, Z+
    1642:	e2 0f       	add	r30, r18
    1644:	f3 1f       	adc	r31, r19
    1646:	ae 17       	cp	r26, r30
    1648:	bf 07       	cpc	r27, r31
    164a:	79 f4       	brne	.+30     	; 0x166a <free+0x5a>
    164c:	8d 91       	ld	r24, X+
    164e:	9c 91       	ld	r25, X
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	28 0f       	add	r18, r24
    1654:	39 1f       	adc	r19, r25
    1656:	2e 5f       	subi	r18, 0xFE	; 254
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	39 83       	std	Y+1, r19	; 0x01
    165c:	28 83       	st	Y, r18
    165e:	12 96       	adiw	r26, 0x02	; 2
    1660:	8d 91       	ld	r24, X+
    1662:	9c 91       	ld	r25, X
    1664:	13 97       	sbiw	r26, 0x03	; 3
    1666:	9b 83       	std	Y+3, r25	; 0x03
    1668:	8a 83       	std	Y+2, r24	; 0x02
    166a:	41 15       	cp	r20, r1
    166c:	51 05       	cpc	r21, r1
    166e:	71 f4       	brne	.+28     	; 0x168c <free+0x7c>
    1670:	d0 93 b1 05 	sts	0x05B1, r29
    1674:	c0 93 b0 05 	sts	0x05B0, r28
    1678:	20 c0       	rjmp	.+64     	; 0x16ba <free+0xaa>
    167a:	12 96       	adiw	r26, 0x02	; 2
    167c:	8d 91       	ld	r24, X+
    167e:	9c 91       	ld	r25, X
    1680:	13 97       	sbiw	r26, 0x03	; 3
    1682:	ad 01       	movw	r20, r26
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	11 f0       	breq	.+4      	; 0x168c <free+0x7c>
    1688:	dc 01       	movw	r26, r24
    168a:	d3 cf       	rjmp	.-90     	; 0x1632 <free+0x22>
    168c:	fa 01       	movw	r30, r20
    168e:	d3 83       	std	Z+3, r29	; 0x03
    1690:	c2 83       	std	Z+2, r28	; 0x02
    1692:	21 91       	ld	r18, Z+
    1694:	31 91       	ld	r19, Z+
    1696:	e2 0f       	add	r30, r18
    1698:	f3 1f       	adc	r31, r19
    169a:	ce 17       	cp	r28, r30
    169c:	df 07       	cpc	r29, r31
    169e:	69 f4       	brne	.+26     	; 0x16ba <free+0xaa>
    16a0:	88 81       	ld	r24, Y
    16a2:	99 81       	ldd	r25, Y+1	; 0x01
    16a4:	28 0f       	add	r18, r24
    16a6:	39 1f       	adc	r19, r25
    16a8:	2e 5f       	subi	r18, 0xFE	; 254
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	fa 01       	movw	r30, r20
    16ae:	31 83       	std	Z+1, r19	; 0x01
    16b0:	20 83       	st	Z, r18
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	93 83       	std	Z+3, r25	; 0x03
    16b8:	82 83       	std	Z+2, r24	; 0x02
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <itoa>:
    16c0:	fb 01       	movw	r30, r22
    16c2:	9f 01       	movw	r18, r30
    16c4:	e8 94       	clt
    16c6:	42 30       	cpi	r20, 0x02	; 2
    16c8:	c4 f0       	brlt	.+48     	; 0x16fa <itoa+0x3a>
    16ca:	45 32       	cpi	r20, 0x25	; 37
    16cc:	b4 f4       	brge	.+44     	; 0x16fa <itoa+0x3a>
    16ce:	4a 30       	cpi	r20, 0x0A	; 10
    16d0:	29 f4       	brne	.+10     	; 0x16dc <itoa+0x1c>
    16d2:	97 fb       	bst	r25, 7
    16d4:	1e f4       	brtc	.+6      	; 0x16dc <itoa+0x1c>
    16d6:	90 95       	com	r25
    16d8:	81 95       	neg	r24
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	64 2f       	mov	r22, r20
    16de:	77 27       	eor	r23, r23
    16e0:	0e 94 47 0a 	call	0x148e	; 0x148e <__udivmodhi4>
    16e4:	80 5d       	subi	r24, 0xD0	; 208
    16e6:	8a 33       	cpi	r24, 0x3A	; 58
    16e8:	0c f0       	brlt	.+2      	; 0x16ec <itoa+0x2c>
    16ea:	89 5d       	subi	r24, 0xD9	; 217
    16ec:	81 93       	st	Z+, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	a1 f7       	brne	.-24     	; 0x16dc <itoa+0x1c>
    16f4:	16 f4       	brtc	.+4      	; 0x16fa <itoa+0x3a>
    16f6:	5d e2       	ldi	r21, 0x2D	; 45
    16f8:	51 93       	st	Z+, r21
    16fa:	10 82       	st	Z, r1
    16fc:	c9 01       	movw	r24, r18
    16fe:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <strrev>

00001702 <sprintf>:
    1702:	ae e0       	ldi	r26, 0x0E	; 14
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e8       	ldi	r30, 0x87	; 135
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__prologue_saves__+0x1c>
    170e:	0d 89       	ldd	r16, Y+21	; 0x15
    1710:	1e 89       	ldd	r17, Y+22	; 0x16
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	8c 83       	std	Y+4, r24	; 0x04
    1716:	1a 83       	std	Y+2, r17	; 0x02
    1718:	09 83       	std	Y+1, r16	; 0x01
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f e7       	ldi	r25, 0x7F	; 127
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	9e 01       	movw	r18, r28
    1724:	27 5e       	subi	r18, 0xE7	; 231
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	ce 01       	movw	r24, r28
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	6f 89       	ldd	r22, Y+23	; 0x17
    172e:	78 8d       	ldd	r23, Y+24	; 0x18
    1730:	a9 01       	movw	r20, r18
    1732:	0e 94 a5 0b 	call	0x174a	; 0x174a <vfprintf>
    1736:	2f 81       	ldd	r18, Y+7	; 0x07
    1738:	38 85       	ldd	r19, Y+8	; 0x08
    173a:	02 0f       	add	r16, r18
    173c:	13 1f       	adc	r17, r19
    173e:	f8 01       	movw	r30, r16
    1740:	10 82       	st	Z, r1
    1742:	2e 96       	adiw	r28, 0x0e	; 14
    1744:	e4 e0       	ldi	r30, 0x04	; 4
    1746:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__epilogue_restores__+0x1c>

0000174a <vfprintf>:
    174a:	ab e0       	ldi	r26, 0x0B	; 11
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb ea       	ldi	r30, 0xAB	; 171
    1750:	fb e0       	ldi	r31, 0x0B	; 11
    1752:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__prologue_saves__>
    1756:	3c 01       	movw	r6, r24
    1758:	2b 01       	movw	r4, r22
    175a:	5a 01       	movw	r10, r20
    175c:	fc 01       	movw	r30, r24
    175e:	17 82       	std	Z+7, r1	; 0x07
    1760:	16 82       	std	Z+6, r1	; 0x06
    1762:	83 81       	ldd	r24, Z+3	; 0x03
    1764:	81 fd       	sbrc	r24, 1
    1766:	03 c0       	rjmp	.+6      	; 0x176e <vfprintf+0x24>
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	7f ef       	ldi	r23, 0xFF	; 255
    176c:	c6 c1       	rjmp	.+908    	; 0x1afa <vfprintf+0x3b0>
    176e:	9a e0       	ldi	r25, 0x0A	; 10
    1770:	89 2e       	mov	r8, r25
    1772:	1e 01       	movw	r2, r28
    1774:	08 94       	sec
    1776:	21 1c       	adc	r2, r1
    1778:	31 1c       	adc	r3, r1
    177a:	f3 01       	movw	r30, r6
    177c:	23 81       	ldd	r18, Z+3	; 0x03
    177e:	f2 01       	movw	r30, r4
    1780:	23 fd       	sbrc	r18, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	23 ff       	sbrs	r18, 3
    1786:	81 91       	ld	r24, Z+
    1788:	2f 01       	movw	r4, r30
    178a:	88 23       	and	r24, r24
    178c:	09 f4       	brne	.+2      	; 0x1790 <vfprintf+0x46>
    178e:	b2 c1       	rjmp	.+868    	; 0x1af4 <vfprintf+0x3aa>
    1790:	85 32       	cpi	r24, 0x25	; 37
    1792:	39 f4       	brne	.+14     	; 0x17a2 <vfprintf+0x58>
    1794:	23 fd       	sbrc	r18, 3
    1796:	85 91       	lpm	r24, Z+
    1798:	23 ff       	sbrs	r18, 3
    179a:	81 91       	ld	r24, Z+
    179c:	2f 01       	movw	r4, r30
    179e:	85 32       	cpi	r24, 0x25	; 37
    17a0:	29 f4       	brne	.+10     	; 0x17ac <vfprintf+0x62>
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b3 01       	movw	r22, r6
    17a6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    17aa:	e7 cf       	rjmp	.-50     	; 0x177a <vfprintf+0x30>
    17ac:	98 2f       	mov	r25, r24
    17ae:	ff 24       	eor	r15, r15
    17b0:	ee 24       	eor	r14, r14
    17b2:	99 24       	eor	r9, r9
    17b4:	ff e1       	ldi	r31, 0x1F	; 31
    17b6:	ff 15       	cp	r31, r15
    17b8:	d0 f0       	brcs	.+52     	; 0x17ee <vfprintf+0xa4>
    17ba:	9b 32       	cpi	r25, 0x2B	; 43
    17bc:	69 f0       	breq	.+26     	; 0x17d8 <vfprintf+0x8e>
    17be:	9c 32       	cpi	r25, 0x2C	; 44
    17c0:	28 f4       	brcc	.+10     	; 0x17cc <vfprintf+0x82>
    17c2:	90 32       	cpi	r25, 0x20	; 32
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x92>
    17c6:	93 32       	cpi	r25, 0x23	; 35
    17c8:	91 f4       	brne	.+36     	; 0x17ee <vfprintf+0xa4>
    17ca:	0e c0       	rjmp	.+28     	; 0x17e8 <vfprintf+0x9e>
    17cc:	9d 32       	cpi	r25, 0x2D	; 45
    17ce:	49 f0       	breq	.+18     	; 0x17e2 <vfprintf+0x98>
    17d0:	90 33       	cpi	r25, 0x30	; 48
    17d2:	69 f4       	brne	.+26     	; 0x17ee <vfprintf+0xa4>
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	24 c0       	rjmp	.+72     	; 0x1820 <vfprintf+0xd6>
    17d8:	52 e0       	ldi	r21, 0x02	; 2
    17da:	f5 2a       	or	r15, r21
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	f8 2a       	or	r15, r24
    17e0:	28 c0       	rjmp	.+80     	; 0x1832 <vfprintf+0xe8>
    17e2:	98 e0       	ldi	r25, 0x08	; 8
    17e4:	f9 2a       	or	r15, r25
    17e6:	25 c0       	rjmp	.+74     	; 0x1832 <vfprintf+0xe8>
    17e8:	e0 e1       	ldi	r30, 0x10	; 16
    17ea:	fe 2a       	or	r15, r30
    17ec:	22 c0       	rjmp	.+68     	; 0x1832 <vfprintf+0xe8>
    17ee:	f7 fc       	sbrc	r15, 7
    17f0:	29 c0       	rjmp	.+82     	; 0x1844 <vfprintf+0xfa>
    17f2:	89 2f       	mov	r24, r25
    17f4:	80 53       	subi	r24, 0x30	; 48
    17f6:	8a 30       	cpi	r24, 0x0A	; 10
    17f8:	70 f4       	brcc	.+28     	; 0x1816 <vfprintf+0xcc>
    17fa:	f6 fe       	sbrs	r15, 6
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <vfprintf+0xbe>
    17fe:	98 9c       	mul	r9, r8
    1800:	90 2c       	mov	r9, r0
    1802:	11 24       	eor	r1, r1
    1804:	98 0e       	add	r9, r24
    1806:	15 c0       	rjmp	.+42     	; 0x1832 <vfprintf+0xe8>
    1808:	e8 9c       	mul	r14, r8
    180a:	e0 2c       	mov	r14, r0
    180c:	11 24       	eor	r1, r1
    180e:	e8 0e       	add	r14, r24
    1810:	f0 e2       	ldi	r31, 0x20	; 32
    1812:	ff 2a       	or	r15, r31
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <vfprintf+0xe8>
    1816:	9e 32       	cpi	r25, 0x2E	; 46
    1818:	29 f4       	brne	.+10     	; 0x1824 <vfprintf+0xda>
    181a:	f6 fc       	sbrc	r15, 6
    181c:	6b c1       	rjmp	.+726    	; 0x1af4 <vfprintf+0x3aa>
    181e:	40 e4       	ldi	r20, 0x40	; 64
    1820:	f4 2a       	or	r15, r20
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <vfprintf+0xe8>
    1824:	9c 36       	cpi	r25, 0x6C	; 108
    1826:	19 f4       	brne	.+6      	; 0x182e <vfprintf+0xe4>
    1828:	50 e8       	ldi	r21, 0x80	; 128
    182a:	f5 2a       	or	r15, r21
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <vfprintf+0xe8>
    182e:	98 36       	cpi	r25, 0x68	; 104
    1830:	49 f4       	brne	.+18     	; 0x1844 <vfprintf+0xfa>
    1832:	f2 01       	movw	r30, r4
    1834:	23 fd       	sbrc	r18, 3
    1836:	95 91       	lpm	r25, Z+
    1838:	23 ff       	sbrs	r18, 3
    183a:	91 91       	ld	r25, Z+
    183c:	2f 01       	movw	r4, r30
    183e:	99 23       	and	r25, r25
    1840:	09 f0       	breq	.+2      	; 0x1844 <vfprintf+0xfa>
    1842:	b8 cf       	rjmp	.-144    	; 0x17b4 <vfprintf+0x6a>
    1844:	89 2f       	mov	r24, r25
    1846:	85 54       	subi	r24, 0x45	; 69
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	18 f0       	brcs	.+6      	; 0x1852 <vfprintf+0x108>
    184c:	80 52       	subi	r24, 0x20	; 32
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	38 f4       	brcc	.+14     	; 0x1860 <vfprintf+0x116>
    1852:	44 e0       	ldi	r20, 0x04	; 4
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	a4 0e       	add	r10, r20
    1858:	b5 1e       	adc	r11, r21
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	59 83       	std	Y+1, r21	; 0x01
    185e:	0f c0       	rjmp	.+30     	; 0x187e <vfprintf+0x134>
    1860:	93 36       	cpi	r25, 0x63	; 99
    1862:	31 f0       	breq	.+12     	; 0x1870 <vfprintf+0x126>
    1864:	93 37       	cpi	r25, 0x73	; 115
    1866:	79 f0       	breq	.+30     	; 0x1886 <vfprintf+0x13c>
    1868:	93 35       	cpi	r25, 0x53	; 83
    186a:	09 f0       	breq	.+2      	; 0x186e <vfprintf+0x124>
    186c:	56 c0       	rjmp	.+172    	; 0x191a <vfprintf+0x1d0>
    186e:	20 c0       	rjmp	.+64     	; 0x18b0 <vfprintf+0x166>
    1870:	f5 01       	movw	r30, r10
    1872:	80 81       	ld	r24, Z
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	42 e0       	ldi	r20, 0x02	; 2
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	a4 0e       	add	r10, r20
    187c:	b5 1e       	adc	r11, r21
    187e:	61 01       	movw	r12, r2
    1880:	01 e0       	ldi	r16, 0x01	; 1
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	12 c0       	rjmp	.+36     	; 0x18aa <vfprintf+0x160>
    1886:	f5 01       	movw	r30, r10
    1888:	c0 80       	ld	r12, Z
    188a:	d1 80       	ldd	r13, Z+1	; 0x01
    188c:	f6 fc       	sbrc	r15, 6
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <vfprintf+0x14c>
    1890:	6f ef       	ldi	r22, 0xFF	; 255
    1892:	7f ef       	ldi	r23, 0xFF	; 255
    1894:	02 c0       	rjmp	.+4      	; 0x189a <vfprintf+0x150>
    1896:	69 2d       	mov	r22, r9
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	42 e0       	ldi	r20, 0x02	; 2
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	a4 0e       	add	r10, r20
    18a0:	b5 1e       	adc	r11, r21
    18a2:	c6 01       	movw	r24, r12
    18a4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <strnlen>
    18a8:	8c 01       	movw	r16, r24
    18aa:	5f e7       	ldi	r21, 0x7F	; 127
    18ac:	f5 22       	and	r15, r21
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <vfprintf+0x18e>
    18b0:	f5 01       	movw	r30, r10
    18b2:	c0 80       	ld	r12, Z
    18b4:	d1 80       	ldd	r13, Z+1	; 0x01
    18b6:	f6 fc       	sbrc	r15, 6
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <vfprintf+0x176>
    18ba:	6f ef       	ldi	r22, 0xFF	; 255
    18bc:	7f ef       	ldi	r23, 0xFF	; 255
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <vfprintf+0x17a>
    18c0:	69 2d       	mov	r22, r9
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	42 e0       	ldi	r20, 0x02	; 2
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	a4 0e       	add	r10, r20
    18ca:	b5 1e       	adc	r11, r21
    18cc:	c6 01       	movw	r24, r12
    18ce:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <strnlen_P>
    18d2:	8c 01       	movw	r16, r24
    18d4:	50 e8       	ldi	r21, 0x80	; 128
    18d6:	f5 2a       	or	r15, r21
    18d8:	f3 fe       	sbrs	r15, 3
    18da:	07 c0       	rjmp	.+14     	; 0x18ea <vfprintf+0x1a0>
    18dc:	1a c0       	rjmp	.+52     	; 0x1912 <vfprintf+0x1c8>
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	b3 01       	movw	r22, r6
    18e4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    18e8:	ea 94       	dec	r14
    18ea:	8e 2d       	mov	r24, r14
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	08 17       	cp	r16, r24
    18f0:	19 07       	cpc	r17, r25
    18f2:	a8 f3       	brcs	.-22     	; 0x18de <vfprintf+0x194>
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <vfprintf+0x1c8>
    18f6:	f6 01       	movw	r30, r12
    18f8:	f7 fc       	sbrc	r15, 7
    18fa:	85 91       	lpm	r24, Z+
    18fc:	f7 fe       	sbrs	r15, 7
    18fe:	81 91       	ld	r24, Z+
    1900:	6f 01       	movw	r12, r30
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b3 01       	movw	r22, r6
    1906:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    190a:	e1 10       	cpse	r14, r1
    190c:	ea 94       	dec	r14
    190e:	01 50       	subi	r16, 0x01	; 1
    1910:	10 40       	sbci	r17, 0x00	; 0
    1912:	01 15       	cp	r16, r1
    1914:	11 05       	cpc	r17, r1
    1916:	79 f7       	brne	.-34     	; 0x18f6 <vfprintf+0x1ac>
    1918:	ea c0       	rjmp	.+468    	; 0x1aee <vfprintf+0x3a4>
    191a:	94 36       	cpi	r25, 0x64	; 100
    191c:	11 f0       	breq	.+4      	; 0x1922 <vfprintf+0x1d8>
    191e:	99 36       	cpi	r25, 0x69	; 105
    1920:	69 f5       	brne	.+90     	; 0x197c <vfprintf+0x232>
    1922:	f7 fe       	sbrs	r15, 7
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <vfprintf+0x1ec>
    1926:	f5 01       	movw	r30, r10
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	42 81       	ldd	r20, Z+2	; 0x02
    192e:	53 81       	ldd	r21, Z+3	; 0x03
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0a c0       	rjmp	.+20     	; 0x194a <vfprintf+0x200>
    1936:	f5 01       	movw	r30, r10
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	9c 01       	movw	r18, r24
    193e:	44 27       	eor	r20, r20
    1940:	37 fd       	sbrc	r19, 7
    1942:	40 95       	com	r20
    1944:	54 2f       	mov	r21, r20
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a8 0e       	add	r10, r24
    194c:	b9 1e       	adc	r11, r25
    194e:	9f e6       	ldi	r25, 0x6F	; 111
    1950:	f9 22       	and	r15, r25
    1952:	57 ff       	sbrs	r21, 7
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <vfprintf+0x21e>
    1956:	50 95       	com	r21
    1958:	40 95       	com	r20
    195a:	30 95       	com	r19
    195c:	21 95       	neg	r18
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	4f 4f       	sbci	r20, 0xFF	; 255
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	e0 e8       	ldi	r30, 0x80	; 128
    1966:	fe 2a       	or	r15, r30
    1968:	ca 01       	movw	r24, r20
    196a:	b9 01       	movw	r22, r18
    196c:	a1 01       	movw	r20, r2
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__ultoa_invert>
    1976:	d8 2e       	mov	r13, r24
    1978:	d2 18       	sub	r13, r2
    197a:	40 c0       	rjmp	.+128    	; 0x19fc <vfprintf+0x2b2>
    197c:	95 37       	cpi	r25, 0x75	; 117
    197e:	29 f4       	brne	.+10     	; 0x198a <vfprintf+0x240>
    1980:	1f 2d       	mov	r17, r15
    1982:	1f 7e       	andi	r17, 0xEF	; 239
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	1d c0       	rjmp	.+58     	; 0x19c4 <vfprintf+0x27a>
    198a:	1f 2d       	mov	r17, r15
    198c:	19 7f       	andi	r17, 0xF9	; 249
    198e:	9f 36       	cpi	r25, 0x6F	; 111
    1990:	61 f0       	breq	.+24     	; 0x19aa <vfprintf+0x260>
    1992:	90 37       	cpi	r25, 0x70	; 112
    1994:	20 f4       	brcc	.+8      	; 0x199e <vfprintf+0x254>
    1996:	98 35       	cpi	r25, 0x58	; 88
    1998:	09 f0       	breq	.+2      	; 0x199c <vfprintf+0x252>
    199a:	ac c0       	rjmp	.+344    	; 0x1af4 <vfprintf+0x3aa>
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <vfprintf+0x272>
    199e:	90 37       	cpi	r25, 0x70	; 112
    19a0:	39 f0       	breq	.+14     	; 0x19b0 <vfprintf+0x266>
    19a2:	98 37       	cpi	r25, 0x78	; 120
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <vfprintf+0x25e>
    19a6:	a6 c0       	rjmp	.+332    	; 0x1af4 <vfprintf+0x3aa>
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <vfprintf+0x268>
    19aa:	28 e0       	ldi	r18, 0x08	; 8
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <vfprintf+0x27a>
    19b0:	10 61       	ori	r17, 0x10	; 16
    19b2:	14 fd       	sbrc	r17, 4
    19b4:	14 60       	ori	r17, 0x04	; 4
    19b6:	20 e1       	ldi	r18, 0x10	; 16
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <vfprintf+0x27a>
    19bc:	14 fd       	sbrc	r17, 4
    19be:	16 60       	ori	r17, 0x06	; 6
    19c0:	20 e1       	ldi	r18, 0x10	; 16
    19c2:	32 e0       	ldi	r19, 0x02	; 2
    19c4:	17 ff       	sbrs	r17, 7
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <vfprintf+0x28e>
    19c8:	f5 01       	movw	r30, r10
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	44 e0       	ldi	r20, 0x04	; 4
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	08 c0       	rjmp	.+16     	; 0x19e8 <vfprintf+0x29e>
    19d8:	f5 01       	movw	r30, r10
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	bc 01       	movw	r22, r24
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	42 e0       	ldi	r20, 0x02	; 2
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	a4 0e       	add	r10, r20
    19ea:	b5 1e       	adc	r11, r21
    19ec:	a1 01       	movw	r20, r2
    19ee:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__ultoa_invert>
    19f2:	d8 2e       	mov	r13, r24
    19f4:	d2 18       	sub	r13, r2
    19f6:	8f e7       	ldi	r24, 0x7F	; 127
    19f8:	f8 2e       	mov	r15, r24
    19fa:	f1 22       	and	r15, r17
    19fc:	f6 fe       	sbrs	r15, 6
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <vfprintf+0x2cc>
    1a00:	5e ef       	ldi	r21, 0xFE	; 254
    1a02:	f5 22       	and	r15, r21
    1a04:	d9 14       	cp	r13, r9
    1a06:	38 f4       	brcc	.+14     	; 0x1a16 <vfprintf+0x2cc>
    1a08:	f4 fe       	sbrs	r15, 4
    1a0a:	07 c0       	rjmp	.+14     	; 0x1a1a <vfprintf+0x2d0>
    1a0c:	f2 fc       	sbrc	r15, 2
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <vfprintf+0x2d0>
    1a10:	8f ee       	ldi	r24, 0xEF	; 239
    1a12:	f8 22       	and	r15, r24
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <vfprintf+0x2d0>
    1a16:	1d 2d       	mov	r17, r13
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <vfprintf+0x2d2>
    1a1a:	19 2d       	mov	r17, r9
    1a1c:	f4 fe       	sbrs	r15, 4
    1a1e:	0d c0       	rjmp	.+26     	; 0x1a3a <vfprintf+0x2f0>
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 0d       	add	r30, r13
    1a24:	f1 1d       	adc	r31, r1
    1a26:	80 81       	ld	r24, Z
    1a28:	80 33       	cpi	r24, 0x30	; 48
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <vfprintf+0x2e8>
    1a2c:	99 ee       	ldi	r25, 0xE9	; 233
    1a2e:	f9 22       	and	r15, r25
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <vfprintf+0x2f8>
    1a32:	1f 5f       	subi	r17, 0xFF	; 255
    1a34:	f2 fe       	sbrs	r15, 2
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <vfprintf+0x2f8>
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <vfprintf+0x2f6>
    1a3a:	8f 2d       	mov	r24, r15
    1a3c:	86 78       	andi	r24, 0x86	; 134
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <vfprintf+0x2f8>
    1a40:	1f 5f       	subi	r17, 0xFF	; 255
    1a42:	0f 2d       	mov	r16, r15
    1a44:	f3 fc       	sbrc	r15, 3
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <vfprintf+0x326>
    1a48:	f0 fe       	sbrs	r15, 0
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <vfprintf+0x320>
    1a4c:	1e 15       	cp	r17, r14
    1a4e:	10 f0       	brcs	.+4      	; 0x1a54 <vfprintf+0x30a>
    1a50:	9d 2c       	mov	r9, r13
    1a52:	0b c0       	rjmp	.+22     	; 0x1a6a <vfprintf+0x320>
    1a54:	9d 2c       	mov	r9, r13
    1a56:	9e 0c       	add	r9, r14
    1a58:	91 1a       	sub	r9, r17
    1a5a:	1e 2d       	mov	r17, r14
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <vfprintf+0x320>
    1a5e:	80 e2       	ldi	r24, 0x20	; 32
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	b3 01       	movw	r22, r6
    1a64:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1a68:	1f 5f       	subi	r17, 0xFF	; 255
    1a6a:	1e 15       	cp	r17, r14
    1a6c:	c0 f3       	brcs	.-16     	; 0x1a5e <vfprintf+0x314>
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <vfprintf+0x32e>
    1a70:	1e 15       	cp	r17, r14
    1a72:	10 f4       	brcc	.+4      	; 0x1a78 <vfprintf+0x32e>
    1a74:	e1 1a       	sub	r14, r17
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <vfprintf+0x330>
    1a78:	ee 24       	eor	r14, r14
    1a7a:	04 ff       	sbrs	r16, 4
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <vfprintf+0x352>
    1a7e:	80 e3       	ldi	r24, 0x30	; 48
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b3 01       	movw	r22, r6
    1a84:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1a88:	02 ff       	sbrs	r16, 2
    1a8a:	1d c0       	rjmp	.+58     	; 0x1ac6 <vfprintf+0x37c>
    1a8c:	01 fd       	sbrc	r16, 1
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x34c>
    1a90:	88 e7       	ldi	r24, 0x78	; 120
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <vfprintf+0x368>
    1a96:	88 e5       	ldi	r24, 0x58	; 88
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0b c0       	rjmp	.+22     	; 0x1ab2 <vfprintf+0x368>
    1a9c:	80 2f       	mov	r24, r16
    1a9e:	86 78       	andi	r24, 0x86	; 134
    1aa0:	91 f0       	breq	.+36     	; 0x1ac6 <vfprintf+0x37c>
    1aa2:	01 ff       	sbrs	r16, 1
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <vfprintf+0x360>
    1aa6:	8b e2       	ldi	r24, 0x2B	; 43
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <vfprintf+0x362>
    1aaa:	80 e2       	ldi	r24, 0x20	; 32
    1aac:	f7 fc       	sbrc	r15, 7
    1aae:	8d e2       	ldi	r24, 0x2D	; 45
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	b3 01       	movw	r22, r6
    1ab4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1ab8:	06 c0       	rjmp	.+12     	; 0x1ac6 <vfprintf+0x37c>
    1aba:	80 e3       	ldi	r24, 0x30	; 48
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	b3 01       	movw	r22, r6
    1ac0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1ac4:	9a 94       	dec	r9
    1ac6:	d9 14       	cp	r13, r9
    1ac8:	c0 f3       	brcs	.-16     	; 0x1aba <vfprintf+0x370>
    1aca:	da 94       	dec	r13
    1acc:	f1 01       	movw	r30, r2
    1ace:	ed 0d       	add	r30, r13
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	80 81       	ld	r24, Z
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	b3 01       	movw	r22, r6
    1ad8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1adc:	dd 20       	and	r13, r13
    1ade:	a9 f7       	brne	.-22     	; 0x1aca <vfprintf+0x380>
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <vfprintf+0x3a4>
    1ae2:	80 e2       	ldi	r24, 0x20	; 32
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b3 01       	movw	r22, r6
    1ae8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <fputc>
    1aec:	ea 94       	dec	r14
    1aee:	ee 20       	and	r14, r14
    1af0:	c1 f7       	brne	.-16     	; 0x1ae2 <vfprintf+0x398>
    1af2:	43 ce       	rjmp	.-890    	; 0x177a <vfprintf+0x30>
    1af4:	f3 01       	movw	r30, r6
    1af6:	66 81       	ldd	r22, Z+6	; 0x06
    1af8:	77 81       	ldd	r23, Z+7	; 0x07
    1afa:	cb 01       	movw	r24, r22
    1afc:	2b 96       	adiw	r28, 0x0b	; 11
    1afe:	e2 e1       	ldi	r30, 0x12	; 18
    1b00:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__epilogue_restores__>

00001b04 <strnlen_P>:
    1b04:	fc 01       	movw	r30, r24
    1b06:	05 90       	lpm	r0, Z+
    1b08:	61 50       	subi	r22, 0x01	; 1
    1b0a:	70 40       	sbci	r23, 0x00	; 0
    1b0c:	01 10       	cpse	r0, r1
    1b0e:	d8 f7       	brcc	.-10     	; 0x1b06 <strnlen_P+0x2>
    1b10:	80 95       	com	r24
    1b12:	90 95       	com	r25
    1b14:	8e 0f       	add	r24, r30
    1b16:	9f 1f       	adc	r25, r31
    1b18:	08 95       	ret

00001b1a <strnlen>:
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	61 50       	subi	r22, 0x01	; 1
    1b1e:	70 40       	sbci	r23, 0x00	; 0
    1b20:	01 90       	ld	r0, Z+
    1b22:	01 10       	cpse	r0, r1
    1b24:	d8 f7       	brcc	.-10     	; 0x1b1c <strnlen+0x2>
    1b26:	80 95       	com	r24
    1b28:	90 95       	com	r25
    1b2a:	8e 0f       	add	r24, r30
    1b2c:	9f 1f       	adc	r25, r31
    1b2e:	08 95       	ret

00001b30 <strrev>:
    1b30:	dc 01       	movw	r26, r24
    1b32:	fc 01       	movw	r30, r24
    1b34:	67 2f       	mov	r22, r23
    1b36:	71 91       	ld	r23, Z+
    1b38:	77 23       	and	r23, r23
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <strrev+0x4>
    1b3c:	32 97       	sbiw	r30, 0x02	; 2
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <strrev+0x18>
    1b40:	7c 91       	ld	r23, X
    1b42:	6d 93       	st	X+, r22
    1b44:	70 83       	st	Z, r23
    1b46:	62 91       	ld	r22, -Z
    1b48:	ae 17       	cp	r26, r30
    1b4a:	bf 07       	cpc	r27, r31
    1b4c:	c8 f3       	brcs	.-14     	; 0x1b40 <strrev+0x10>
    1b4e:	08 95       	ret

00001b50 <fputc>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	8c 01       	movw	r16, r24
    1b5a:	eb 01       	movw	r28, r22
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	81 ff       	sbrs	r24, 1
    1b60:	1b c0       	rjmp	.+54     	; 0x1b98 <fputc+0x48>
    1b62:	82 ff       	sbrs	r24, 2
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <fputc+0x30>
    1b66:	2e 81       	ldd	r18, Y+6	; 0x06
    1b68:	3f 81       	ldd	r19, Y+7	; 0x07
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	28 17       	cp	r18, r24
    1b70:	39 07       	cpc	r19, r25
    1b72:	64 f4       	brge	.+24     	; 0x1b8c <fputc+0x3c>
    1b74:	e8 81       	ld	r30, Y
    1b76:	f9 81       	ldd	r31, Y+1	; 0x01
    1b78:	01 93       	st	Z+, r16
    1b7a:	f9 83       	std	Y+1, r31	; 0x01
    1b7c:	e8 83       	st	Y, r30
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <fputc+0x3c>
    1b80:	e8 85       	ldd	r30, Y+8	; 0x08
    1b82:	f9 85       	ldd	r31, Y+9	; 0x09
    1b84:	80 2f       	mov	r24, r16
    1b86:	09 95       	icall
    1b88:	89 2b       	or	r24, r25
    1b8a:	31 f4       	brne	.+12     	; 0x1b98 <fputc+0x48>
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	9f 83       	std	Y+7, r25	; 0x07
    1b94:	8e 83       	std	Y+6, r24	; 0x06
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <fputc+0x4c>
    1b98:	0f ef       	ldi	r16, 0xFF	; 255
    1b9a:	1f ef       	ldi	r17, 0xFF	; 255
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <__ultoa_invert>:
    1ba8:	fa 01       	movw	r30, r20
    1baa:	aa 27       	eor	r26, r26
    1bac:	28 30       	cpi	r18, 0x08	; 8
    1bae:	51 f1       	breq	.+84     	; 0x1c04 <__ultoa_invert+0x5c>
    1bb0:	20 31       	cpi	r18, 0x10	; 16
    1bb2:	81 f1       	breq	.+96     	; 0x1c14 <__ultoa_invert+0x6c>
    1bb4:	e8 94       	clt
    1bb6:	6f 93       	push	r22
    1bb8:	6e 7f       	andi	r22, 0xFE	; 254
    1bba:	6e 5f       	subi	r22, 0xFE	; 254
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	af 4f       	sbci	r26, 0xFF	; 255
    1bc4:	b1 e0       	ldi	r27, 0x01	; 1
    1bc6:	3e d0       	rcall	.+124    	; 0x1c44 <__ultoa_invert+0x9c>
    1bc8:	b4 e0       	ldi	r27, 0x04	; 4
    1bca:	3c d0       	rcall	.+120    	; 0x1c44 <__ultoa_invert+0x9c>
    1bcc:	67 0f       	add	r22, r23
    1bce:	78 1f       	adc	r23, r24
    1bd0:	89 1f       	adc	r24, r25
    1bd2:	9a 1f       	adc	r25, r26
    1bd4:	a1 1d       	adc	r26, r1
    1bd6:	68 0f       	add	r22, r24
    1bd8:	79 1f       	adc	r23, r25
    1bda:	8a 1f       	adc	r24, r26
    1bdc:	91 1d       	adc	r25, r1
    1bde:	a1 1d       	adc	r26, r1
    1be0:	6a 0f       	add	r22, r26
    1be2:	71 1d       	adc	r23, r1
    1be4:	81 1d       	adc	r24, r1
    1be6:	91 1d       	adc	r25, r1
    1be8:	a1 1d       	adc	r26, r1
    1bea:	20 d0       	rcall	.+64     	; 0x1c2c <__ultoa_invert+0x84>
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <__ultoa_invert+0x48>
    1bee:	68 94       	set
    1bf0:	3f 91       	pop	r19
    1bf2:	2a e0       	ldi	r18, 0x0A	; 10
    1bf4:	26 9f       	mul	r18, r22
    1bf6:	11 24       	eor	r1, r1
    1bf8:	30 19       	sub	r19, r0
    1bfa:	30 5d       	subi	r19, 0xD0	; 208
    1bfc:	31 93       	st	Z+, r19
    1bfe:	de f6       	brtc	.-74     	; 0x1bb6 <__ultoa_invert+0xe>
    1c00:	cf 01       	movw	r24, r30
    1c02:	08 95       	ret
    1c04:	46 2f       	mov	r20, r22
    1c06:	47 70       	andi	r20, 0x07	; 7
    1c08:	40 5d       	subi	r20, 0xD0	; 208
    1c0a:	41 93       	st	Z+, r20
    1c0c:	b3 e0       	ldi	r27, 0x03	; 3
    1c0e:	0f d0       	rcall	.+30     	; 0x1c2e <__ultoa_invert+0x86>
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <__ultoa_invert+0x5c>
    1c12:	f6 cf       	rjmp	.-20     	; 0x1c00 <__ultoa_invert+0x58>
    1c14:	46 2f       	mov	r20, r22
    1c16:	4f 70       	andi	r20, 0x0F	; 15
    1c18:	40 5d       	subi	r20, 0xD0	; 208
    1c1a:	4a 33       	cpi	r20, 0x3A	; 58
    1c1c:	18 f0       	brcs	.+6      	; 0x1c24 <__ultoa_invert+0x7c>
    1c1e:	49 5d       	subi	r20, 0xD9	; 217
    1c20:	31 fd       	sbrc	r19, 1
    1c22:	40 52       	subi	r20, 0x20	; 32
    1c24:	41 93       	st	Z+, r20
    1c26:	02 d0       	rcall	.+4      	; 0x1c2c <__ultoa_invert+0x84>
    1c28:	a9 f7       	brne	.-22     	; 0x1c14 <__ultoa_invert+0x6c>
    1c2a:	ea cf       	rjmp	.-44     	; 0x1c00 <__ultoa_invert+0x58>
    1c2c:	b4 e0       	ldi	r27, 0x04	; 4
    1c2e:	a6 95       	lsr	r26
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	ba 95       	dec	r27
    1c3a:	c9 f7       	brne	.-14     	; 0x1c2e <__ultoa_invert+0x86>
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	61 05       	cpc	r22, r1
    1c40:	71 05       	cpc	r23, r1
    1c42:	08 95       	ret
    1c44:	9b 01       	movw	r18, r22
    1c46:	ac 01       	movw	r20, r24
    1c48:	0a 2e       	mov	r0, r26
    1c4a:	06 94       	lsr	r0
    1c4c:	57 95       	ror	r21
    1c4e:	47 95       	ror	r20
    1c50:	37 95       	ror	r19
    1c52:	27 95       	ror	r18
    1c54:	ba 95       	dec	r27
    1c56:	c9 f7       	brne	.-14     	; 0x1c4a <__ultoa_invert+0xa2>
    1c58:	62 0f       	add	r22, r18
    1c5a:	73 1f       	adc	r23, r19
    1c5c:	84 1f       	adc	r24, r20
    1c5e:	95 1f       	adc	r25, r21
    1c60:	a0 1d       	adc	r26, r0
    1c62:	08 95       	ret

00001c64 <__prologue_saves__>:
    1c64:	2f 92       	push	r2
    1c66:	3f 92       	push	r3
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	ca 1b       	sub	r28, r26
    1c8e:	db 0b       	sbc	r29, r27
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	09 94       	ijmp

00001c9c <__epilogue_restores__>:
    1c9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c9e:	39 88       	ldd	r3, Y+17	; 0x11
    1ca0:	48 88       	ldd	r4, Y+16	; 0x10
    1ca2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ca8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1caa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cae:	b9 84       	ldd	r11, Y+9	; 0x09
    1cb0:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb2:	df 80       	ldd	r13, Y+7	; 0x07
    1cb4:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1cb8:	0c 81       	ldd	r16, Y+4	; 0x04
    1cba:	1b 81       	ldd	r17, Y+3	; 0x03
    1cbc:	aa 81       	ldd	r26, Y+2	; 0x02
    1cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc0:	ce 0f       	add	r28, r30
    1cc2:	d1 1d       	adc	r29, r1
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	ed 01       	movw	r28, r26
    1cd0:	08 95       	ret

00001cd2 <_exit>:
    1cd2:	f8 94       	cli

00001cd4 <__stop_program>:
    1cd4:	ff cf       	rjmp	.-2      	; 0x1cd4 <__stop_program>
