
motor_micromouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00001a56  00001aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000708  0080010e  0080010e  00001b98  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001766  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 08 	call	0x10de	; 0x10de <main>
      8a:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <floodfill>:
 */




void floodfill(void) {
      92:	8f 92       	push	r8
      94:	9f 92       	push	r9
      96:	af 92       	push	r10
      98:	bf 92       	push	r11
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	28 97       	sbiw	r28, 0x08	; 8
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	26 e2       	ldi	r18, 0x26	; 38
      bc:	33 e0       	ldi	r19, 0x03	; 3
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            distance[x][y] = 255;
      c2:	4f ef       	ldi	r20, 0xFF	; 255
      c4:	0b c0       	rjmp	.+22     	; 0xdc <floodfill+0x4a>
      c6:	41 93       	st	Z+, r20



void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
      c8:	e2 17       	cp	r30, r18
      ca:	f3 07       	cpc	r31, r19
      cc:	e1 f7       	brne	.-8      	; 0xc6 <floodfill+0x34>
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	9f 01       	movw	r18, r30
      d2:	20 5f       	subi	r18, 0xF0	; 240
      d4:	3f 4f       	sbci	r19, 0xFF	; 255




void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
      d6:	80 31       	cpi	r24, 0x10	; 16
      d8:	91 05       	cpc	r25, r1
      da:	49 f0       	breq	.+18     	; 0xee <floodfill+0x5c>
      dc:	fc 01       	movw	r30, r24
      de:	b4 e0       	ldi	r27, 0x04	; 4
      e0:	ee 0f       	add	r30, r30
      e2:	ff 1f       	adc	r31, r31
      e4:	ba 95       	dec	r27
      e6:	e1 f7       	brne	.-8      	; 0xe0 <floodfill+0x4e>
      e8:	ea 5e       	subi	r30, 0xEA	; 234
      ea:	fc 4f       	sbci	r31, 0xFC	; 252
      ec:	ec cf       	rjmp	.-40     	; 0xc6 <floodfill+0x34>
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            distance[x][y] = 255;

    uint8 center_x[4] = {7,7,8,8};
      ee:	97 e0       	ldi	r25, 0x07	; 7
      f0:	99 83       	std	Y+1, r25	; 0x01
      f2:	9a 83       	std	Y+2, r25	; 0x02
      f4:	88 e0       	ldi	r24, 0x08	; 8
      f6:	8b 83       	std	Y+3, r24	; 0x03
      f8:	8c 83       	std	Y+4, r24	; 0x04
    uint8 center_y[4] = {7,8,7,8};
      fa:	9d 83       	std	Y+5, r25	; 0x05
      fc:	8e 83       	std	Y+6, r24	; 0x06
      fe:	9f 83       	std	Y+7, r25	; 0x07
     100:	88 87       	std	Y+8, r24	; 0x08
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	50 e0       	ldi	r21, 0x00	; 0
    uint16 front = 0, rear = 0;

    for (uint8 i = 0; i < 4; i++) {
        distance[center_x[i]][center_y[i]] = 0;
     106:	be 01       	movw	r22, r28
     108:	6f 5f       	subi	r22, 0xFF	; 255
     10a:	7f 4f       	sbci	r23, 0xFF	; 255
     10c:	9e 01       	movw	r18, r28
     10e:	2b 5f       	subi	r18, 0xFB	; 251
     110:	3f 4f       	sbci	r19, 0xFF	; 255
     112:	fb 01       	movw	r30, r22
     114:	e4 0f       	add	r30, r20
     116:	f5 1f       	adc	r31, r21
     118:	80 81       	ld	r24, Z
     11a:	f9 01       	movw	r30, r18
     11c:	e4 0f       	add	r30, r20
     11e:	f5 1f       	adc	r31, r21
     120:	90 81       	ld	r25, Z
     122:	e8 2f       	mov	r30, r24
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	aa 95       	dec	r26
     12e:	e1 f7       	brne	.-8      	; 0x128 <floodfill+0x96>
     130:	e9 0f       	add	r30, r25
     132:	f1 1d       	adc	r31, r1
     134:	ea 5e       	subi	r30, 0xEA	; 234
     136:	fc 4f       	sbci	r31, 0xFC	; 252
     138:	10 82       	st	Z, r1
        queue_x[rear] = center_x[i];
     13a:	fa 01       	movw	r30, r20
     13c:	ea 5e       	subi	r30, 0xEA	; 234
     13e:	fa 4f       	sbci	r31, 0xFA	; 250
     140:	80 83       	st	Z, r24
        queue_y[rear] = center_y[i];
     142:	fa 01       	movw	r30, r20
     144:	ea 5e       	subi	r30, 0xEA	; 234
     146:	fd 4f       	sbci	r31, 0xFD	; 253
     148:	90 83       	st	Z, r25
        rear++;
     14a:	4f 5f       	subi	r20, 0xFF	; 255
     14c:	5f 4f       	sbci	r21, 0xFF	; 255

    uint8 center_x[4] = {7,7,8,8};
    uint8 center_y[4] = {7,8,7,8};
    uint16 front = 0, rear = 0;

    for (uint8 i = 0; i < 4; i++) {
     14e:	44 30       	cpi	r20, 0x04	; 4
     150:	51 05       	cpc	r21, r1
     152:	f9 f6       	brne	.-66     	; 0x112 <floodfill+0x80>
     154:	cc 24       	eor	r12, r12
     156:	dd 24       	eor	r13, r13
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
        uint8 x = queue_x[front];
     158:	f6 01       	movw	r30, r12
     15a:	ea 5e       	subi	r30, 0xEA	; 234
     15c:	fa 4f       	sbci	r31, 0xFA	; 250
     15e:	90 81       	ld	r25, Z
        uint8 y = queue_y[front];
     160:	f6 01       	movw	r30, r12
     162:	ea 5e       	subi	r30, 0xEA	; 234
     164:	fd 4f       	sbci	r31, 0xFD	; 253
     166:	80 81       	ld	r24, Z
     168:	ee 24       	eor	r14, r14
     16a:	ff 24       	eor	r15, r15
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     16c:	89 2e       	mov	r8, r25
     16e:	99 24       	eor	r9, r9
            int ny = y + dy[dir];
     170:	a8 2e       	mov	r10, r24
     172:	bb 24       	eor	r11, r11
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
                maze[nx][ny] == 0 && distance[nx][ny] == 255) {
                distance[nx][ny] = distance[x][y] + 1;
     174:	84 01       	movw	r16, r8
     176:	94 e0       	ldi	r25, 0x04	; 4
     178:	00 0f       	add	r16, r16
     17a:	11 1f       	adc	r17, r17
     17c:	9a 95       	dec	r25
     17e:	e1 f7       	brne	.-8      	; 0x178 <floodfill+0xe6>
     180:	0a 0d       	add	r16, r10
     182:	1b 1d       	adc	r17, r11
     184:	0a 5e       	subi	r16, 0xEA	; 234
     186:	1c 4f       	sbci	r17, 0xFC	; 252
    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     188:	f7 01       	movw	r30, r14
     18a:	ea 50       	subi	r30, 0x0A	; 10
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	a0 81       	ld	r26, Z
     190:	b1 81       	ldd	r27, Z+1	; 0x01
     192:	a8 0d       	add	r26, r8
     194:	b9 1d       	adc	r27, r9
            int ny = y + dy[dir];
     196:	f7 01       	movw	r30, r14
     198:	e2 50       	subi	r30, 0x02	; 2
     19a:	ff 4f       	sbci	r31, 0xFF	; 255
     19c:	01 90       	ld	r0, Z+
     19e:	f0 81       	ld	r31, Z
     1a0:	e0 2d       	mov	r30, r0
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
     1a2:	a0 31       	cpi	r26, 0x10	; 16
     1a4:	b1 05       	cpc	r27, r1
     1a6:	58 f5       	brcc	.+86     	; 0x1fe <floodfill+0x16c>
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
     1a8:	b5 01       	movw	r22, r10
     1aa:	6e 0f       	add	r22, r30
     1ac:	7f 1f       	adc	r23, r31
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
     1ae:	77 fd       	sbrc	r23, 7
     1b0:	26 c0       	rjmp	.+76     	; 0x1fe <floodfill+0x16c>
     1b2:	60 31       	cpi	r22, 0x10	; 16
     1b4:	71 05       	cpc	r23, r1
     1b6:	1c f5       	brge	.+70     	; 0x1fe <floodfill+0x16c>
     1b8:	9d 01       	movw	r18, r26
     1ba:	84 e0       	ldi	r24, 0x04	; 4
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	8a 95       	dec	r24
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <floodfill+0x12a>
     1c4:	26 0f       	add	r18, r22
     1c6:	37 1f       	adc	r19, r23
     1c8:	f9 01       	movw	r30, r18
     1ca:	ea 5e       	subi	r30, 0xEA	; 234
     1cc:	fb 4f       	sbci	r31, 0xFB	; 251
     1ce:	80 81       	ld	r24, Z
     1d0:	88 23       	and	r24, r24
     1d2:	a9 f4       	brne	.+42     	; 0x1fe <floodfill+0x16c>
     1d4:	2a 5e       	subi	r18, 0xEA	; 234
     1d6:	3c 4f       	sbci	r19, 0xFC	; 252
     1d8:	f9 01       	movw	r30, r18
     1da:	80 81       	ld	r24, Z
     1dc:	8f 3f       	cpi	r24, 0xFF	; 255
     1de:	79 f4       	brne	.+30     	; 0x1fe <floodfill+0x16c>
                maze[nx][ny] == 0 && distance[nx][ny] == 255) {
                distance[nx][ny] = distance[x][y] + 1;
     1e0:	f8 01       	movw	r30, r16
     1e2:	80 81       	ld	r24, Z
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	f9 01       	movw	r30, r18
     1e8:	80 83       	st	Z, r24
                queue_x[rear] = nx;
     1ea:	fa 01       	movw	r30, r20
     1ec:	ea 5e       	subi	r30, 0xEA	; 234
     1ee:	fa 4f       	sbci	r31, 0xFA	; 250
     1f0:	a0 83       	st	Z, r26
                queue_y[rear] = ny;
     1f2:	fa 01       	movw	r30, r20
     1f4:	ea 5e       	subi	r30, 0xEA	; 234
     1f6:	fd 4f       	sbci	r31, 0xFD	; 253
     1f8:	60 83       	st	Z, r22
                rear++;
     1fa:	4f 5f       	subi	r20, 0xFF	; 255
     1fc:	5f 4f       	sbci	r21, 0xFF	; 255
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	e8 0e       	add	r14, r24
     204:	f9 1e       	adc	r15, r25

    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
     206:	98 e0       	ldi	r25, 0x08	; 8
     208:	e9 16       	cp	r14, r25
     20a:	f1 04       	cpc	r15, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <floodfill+0x17e>
     20e:	bc cf       	rjmp	.-136    	; 0x188 <floodfill+0xf6>
    }

    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
     210:	08 94       	sec
     212:	c1 1c       	adc	r12, r1
     214:	d1 1c       	adc	r13, r1
        queue_x[rear] = center_x[i];
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
     216:	c4 16       	cp	r12, r20
     218:	d5 06       	cpc	r13, r21
     21a:	08 f4       	brcc	.+2      	; 0x21e <floodfill+0x18c>
     21c:	9d cf       	rjmp	.-198    	; 0x158 <floodfill+0xc6>
                queue_y[rear] = ny;
                rear++;
            }
        }
    }
}
     21e:	28 96       	adiw	r28, 0x08	; 8
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	cf 90       	pop	r12
     23a:	bf 90       	pop	r11
     23c:	af 90       	pop	r10
     23e:	9f 90       	pop	r9
     240:	8f 90       	pop	r8
     242:	08 95       	ret

00000244 <build_shortest_path>:
}
/*=======================================================================================
 * -------------------------------- Short Path ------------------------------------------
 *=======================================================================================
 */
void build_shortest_path(int goal_x, int goal_y) {
     244:	2f 92       	push	r2
     246:	3f 92       	push	r3
     248:	4f 92       	push	r4
     24a:	5f 92       	push	r5
     24c:	6f 92       	push	r6
     24e:	7f 92       	push	r7
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	bf 92       	push	r11
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	df 93       	push	r29
     264:	cf 93       	push	r28
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	c2 50       	subi	r28, 0x02	; 2
     26c:	d4 40       	sbci	r29, 0x04	; 4
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	cf 5f       	subi	r28, 0xFF	; 255
     27a:	db 4f       	sbci	r29, 0xFB	; 251
     27c:	99 83       	std	Y+1, r25	; 0x01
     27e:	88 83       	st	Y, r24
     280:	c1 50       	subi	r28, 0x01	; 1
     282:	d4 40       	sbci	r29, 0x04	; 4
     284:	1b 01       	movw	r2, r22
    path_len = 0;
     286:	10 92 15 01 	sts	0x0115, r1
     28a:	10 92 14 01 	sts	0x0114, r1
    int cx = 0, cy = 0; // البداية
    int gx = goal_x, gy = goal_y;

    // Safety
    if (distance[gx][gy] == 255) return;
     28e:	fc 01       	movw	r30, r24
     290:	a4 e0       	ldi	r26, 0x04	; 4
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	aa 95       	dec	r26
     298:	e1 f7       	brne	.-8      	; 0x292 <build_shortest_path+0x4e>
     29a:	e6 0f       	add	r30, r22
     29c:	f7 1f       	adc	r31, r23
     29e:	ea 5e       	subi	r30, 0xEA	; 234
     2a0:	fc 4f       	sbci	r31, 0xFC	; 252
     2a2:	80 81       	ld	r24, Z
     2a4:	8f 3f       	cpi	r24, 0xFF	; 255
     2a6:	09 f4       	brne	.+2      	; 0x2aa <build_shortest_path+0x66>
     2a8:	98 c0       	rjmp	.+304    	; 0x3da <build_shortest_path+0x196>
     2aa:	4e 01       	movw	r8, r28
     2ac:	08 94       	sec
     2ae:	81 1c       	adc	r8, r1
     2b0:	91 1c       	adc	r9, r1
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	cf 2e       	mov	r12, r31
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	df 2e       	mov	r13, r31
     2ba:	cc 0e       	add	r12, r28
     2bc:	dd 1e       	adc	r13, r29
     2be:	24 01       	movw	r4, r8
     2c0:	36 01       	movw	r6, r12
     2c2:	ee 24       	eor	r14, r14
     2c4:	ff 24       	eor	r15, r15
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	59 c0       	rjmp	.+178    	; 0x382 <build_shortest_path+0x13e>
     2d0:	bb 24       	eor	r11, r11
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
                if (distance[nx][ny] < distance[x][y]) {
     2d6:	98 01       	movw	r18, r16
     2d8:	e4 e0       	ldi	r30, 0x04	; 4
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	ea 95       	dec	r30
     2e0:	e1 f7       	brne	.-8      	; 0x2da <build_shortest_path+0x96>
     2e2:	26 0f       	add	r18, r22
     2e4:	37 1f       	adc	r19, r23
     2e6:	2a 5e       	subi	r18, 0xEA	; 234
     2e8:	3c 4f       	sbci	r19, 0xFC	; 252
    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
     2ea:	fa 01       	movw	r30, r20
     2ec:	ea 50       	subi	r30, 0x0A	; 10
     2ee:	ff 4f       	sbci	r31, 0xFF	; 255
     2f0:	a0 81       	ld	r26, Z
     2f2:	b1 81       	ldd	r27, Z+1	; 0x01
     2f4:	a0 0f       	add	r26, r16
     2f6:	b1 1f       	adc	r27, r17
            int ny = y + dy[dir];
     2f8:	fa 01       	movw	r30, r20
     2fa:	e2 50       	subi	r30, 0x02	; 2
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	01 90       	ld	r0, Z+
     300:	f0 81       	ld	r31, Z
     302:	e0 2d       	mov	r30, r0
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     304:	a0 31       	cpi	r26, 0x10	; 16
     306:	b1 05       	cpc	r27, r1
     308:	a8 f4       	brcc	.+42     	; 0x334 <build_shortest_path+0xf0>
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
     30a:	e6 0f       	add	r30, r22
     30c:	f7 1f       	adc	r31, r23
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     30e:	f7 fd       	sbrc	r31, 7
     310:	11 c0       	rjmp	.+34     	; 0x334 <build_shortest_path+0xf0>
     312:	e0 31       	cpi	r30, 0x10	; 16
     314:	f1 05       	cpc	r31, r1
     316:	74 f4       	brge	.+28     	; 0x334 <build_shortest_path+0xf0>
                if (distance[nx][ny] < distance[x][y]) {
     318:	94 e0       	ldi	r25, 0x04	; 4
     31a:	aa 0f       	add	r26, r26
     31c:	bb 1f       	adc	r27, r27
     31e:	9a 95       	dec	r25
     320:	e1 f7       	brne	.-8      	; 0x31a <build_shortest_path+0xd6>
     322:	ae 0f       	add	r26, r30
     324:	bf 1f       	adc	r27, r31
     326:	aa 5e       	subi	r26, 0xEA	; 234
     328:	bc 4f       	sbci	r27, 0xFC	; 252
     32a:	9c 91       	ld	r25, X
     32c:	d9 01       	movw	r26, r18
     32e:	8c 91       	ld	r24, X
     330:	98 17       	cp	r25, r24
     332:	38 f0       	brcs	.+14     	; 0x342 <build_shortest_path+0xfe>

    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
     334:	b3 94       	inc	r11
     336:	4e 5f       	subi	r20, 0xFE	; 254
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	b4 e0       	ldi	r27, 0x04	; 4
     33c:	bb 16       	cp	r11, r27
     33e:	a9 f6       	brne	.-86     	; 0x2ea <build_shortest_path+0xa6>
     340:	2e c0       	rjmp	.+92     	; 0x39e <build_shortest_path+0x15a>
            }
        }
        if (next_dir == 0xFF) break; // لا يوجد طريق

        // خزّن النقطة التالية في المسار
        temp_path_x[temp_path_len] = x + dx[next_dir];
     342:	eb 2d       	mov	r30, r11
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	df 01       	movw	r26, r30
     34c:	aa 50       	subi	r26, 0x0A	; 10
     34e:	bf 4f       	sbci	r27, 0xFF	; 255
     350:	8d 91       	ld	r24, X+
     352:	9c 91       	ld	r25, X
     354:	08 0f       	add	r16, r24
     356:	19 1f       	adc	r17, r25
     358:	d2 01       	movw	r26, r4
     35a:	0d 93       	st	X+, r16
     35c:	1d 93       	st	X+, r17
     35e:	2d 01       	movw	r4, r26
        temp_path_y[temp_path_len] = y + dy[next_dir];
     360:	e2 50       	subi	r30, 0x02	; 2
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	68 0f       	add	r22, r24
     36a:	79 1f       	adc	r23, r25
     36c:	f3 01       	movw	r30, r6
     36e:	61 93       	st	Z+, r22
     370:	71 93       	st	Z+, r23
     372:	3f 01       	movw	r6, r30
        path_dir[temp_path_len] = next_dir;
     374:	f7 01       	movw	r30, r14
     376:	ea 5e       	subi	r30, 0xEA	; 234
     378:	f9 4f       	sbci	r31, 0xF9	; 249
     37a:	b0 82       	st	Z, r11
        temp_path_len++;
     37c:	08 94       	sec
     37e:	e1 1c       	adc	r14, r1
     380:	f1 1c       	adc	r15, r1
    int temp_path_y[MAX_PATH];
    int temp_path_len = 0;

    // نبدأ من البداية cx,cy = 0,0
    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
     382:	cf 5f       	subi	r28, 0xFF	; 255
     384:	db 4f       	sbci	r29, 0xFB	; 251
     386:	88 81       	ld	r24, Y
     388:	99 81       	ldd	r25, Y+1	; 0x01
     38a:	c1 50       	subi	r28, 0x01	; 1
     38c:	d4 40       	sbci	r29, 0x04	; 4
     38e:	08 17       	cp	r16, r24
     390:	19 07       	cpc	r17, r25
     392:	09 f0       	breq	.+2      	; 0x396 <build_shortest_path+0x152>
     394:	9d cf       	rjmp	.-198    	; 0x2d0 <build_shortest_path+0x8c>
     396:	62 15       	cp	r22, r2
     398:	73 05       	cpc	r23, r3
     39a:	09 f0       	breq	.+2      	; 0x39e <build_shortest_path+0x15a>
     39c:	99 cf       	rjmp	.-206    	; 0x2d0 <build_shortest_path+0x8c>
        x += dx[next_dir];
        y += dy[next_dir];
    }

    // انسخ المؤقت للمصفوفة النهائية
    path_len = temp_path_len;
     39e:	f0 92 15 01 	sts	0x0115, r15
     3a2:	e0 92 14 01 	sts	0x0114, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <build_shortest_path+0x190>
    for (int i = 0; i < path_len; i++) {
        path_x[i] = temp_path_x[i];
     3ac:	f9 01       	movw	r30, r18
     3ae:	ea 5e       	subi	r30, 0xEA	; 234
     3b0:	fe 4f       	sbci	r31, 0xFE	; 254
     3b2:	d4 01       	movw	r26, r8
     3b4:	8c 91       	ld	r24, X
     3b6:	80 83       	st	Z, r24
        path_y[i] = temp_path_y[i];
     3b8:	f9 01       	movw	r30, r18
     3ba:	ea 5e       	subi	r30, 0xEA	; 234
     3bc:	f8 4f       	sbci	r31, 0xF8	; 248
     3be:	d6 01       	movw	r26, r12
     3c0:	8c 91       	ld	r24, X
     3c2:	80 83       	st	Z, r24
        y += dy[next_dir];
    }

    // انسخ المؤقت للمصفوفة النهائية
    path_len = temp_path_len;
    for (int i = 0; i < path_len; i++) {
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	e2 e0       	ldi	r30, 0x02	; 2
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	8e 0e       	add	r8, r30
     3ce:	9f 1e       	adc	r9, r31
     3d0:	ce 0e       	add	r12, r30
     3d2:	df 1e       	adc	r13, r31
     3d4:	2e 15       	cp	r18, r14
     3d6:	3f 05       	cpc	r19, r15
     3d8:	48 f3       	brcs	.-46     	; 0x3ac <build_shortest_path+0x168>
        path_x[i] = temp_path_x[i];
        path_y[i] = temp_path_y[i];
    }
}
     3da:	ce 5f       	subi	r28, 0xFE	; 254
     3dc:	db 4f       	sbci	r29, 0xFB	; 251
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	bf 90       	pop	r11
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	3f 90       	pop	r3
     408:	2f 90       	pop	r2
     40a:	08 95       	ret

0000040c <choose_next_direction>:
 * -------------------------------- Choose Next Direction -------------------------------
 *=======================================================================================
 */


uint8 choose_next_direction(void) {
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
    uint8 best_dir = heading;
     412:	10 91 13 01 	lds	r17, 0x0113
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
     416:	c0 91 0f 01 	lds	r28, 0x010F
     41a:	d0 91 10 01 	lds	r29, 0x0110
        int ny = pos_y + dy[dir];
     41e:	60 91 11 01 	lds	r22, 0x0111
     422:	70 91 12 01 	lds	r23, 0x0112
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	4f ef       	ldi	r20, 0xFF	; 255
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0

uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
     42e:	f9 01       	movw	r30, r18
     430:	ea 50       	subi	r30, 0x0A	; 10
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	91 81       	ldd	r25, Z+1	; 0x01
     438:	8c 0f       	add	r24, r28
     43a:	9d 1f       	adc	r25, r29
        int ny = pos_y + dy[dir];
     43c:	f9 01       	movw	r30, r18
     43e:	e2 50       	subi	r30, 0x02	; 2
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	91 05       	cpc	r25, r1
     44c:	e0 f4       	brcc	.+56     	; 0x486 <choose_next_direction+0x7a>
uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
        int nx = pos_x + dx[dir];
        int ny = pos_y + dy[dir];
     44e:	e6 0f       	add	r30, r22
     450:	f7 1f       	adc	r31, r23
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
     452:	f7 fd       	sbrc	r31, 7
     454:	18 c0       	rjmp	.+48     	; 0x486 <choose_next_direction+0x7a>
     456:	e0 31       	cpi	r30, 0x10	; 16
     458:	f1 05       	cpc	r31, r1
     45a:	ac f4       	brge	.+42     	; 0x486 <choose_next_direction+0x7a>
            if (maze[nx][ny] == 0 && distance[nx][ny] < min_dist) {
     45c:	dc 01       	movw	r26, r24
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	aa 0f       	add	r26, r26
     462:	bb 1f       	adc	r27, r27
     464:	8a 95       	dec	r24
     466:	e1 f7       	brne	.-8      	; 0x460 <choose_next_direction+0x54>
     468:	ae 0f       	add	r26, r30
     46a:	bf 1f       	adc	r27, r31
     46c:	fd 01       	movw	r30, r26
     46e:	ea 5e       	subi	r30, 0xEA	; 234
     470:	fb 4f       	sbci	r31, 0xFB	; 251
     472:	80 81       	ld	r24, Z
     474:	88 23       	and	r24, r24
     476:	39 f4       	brne	.+14     	; 0x486 <choose_next_direction+0x7a>
     478:	aa 5e       	subi	r26, 0xEA	; 234
     47a:	bc 4f       	sbci	r27, 0xFC	; 252
     47c:	ec 91       	ld	r30, X
     47e:	e4 17       	cp	r30, r20
     480:	10 f4       	brcc	.+4      	; 0x486 <choose_next_direction+0x7a>
     482:	15 2f       	mov	r17, r21
     484:	01 c0       	rjmp	.+2      	; 0x488 <choose_next_direction+0x7c>
     486:	e4 2f       	mov	r30, r20


uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
     488:	5f 5f       	subi	r21, 0xFF	; 255
     48a:	2e 5f       	subi	r18, 0xFE	; 254
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	54 30       	cpi	r21, 0x04	; 4
     490:	11 f0       	breq	.+4      	; 0x496 <choose_next_direction+0x8a>
     492:	4e 2f       	mov	r20, r30
     494:	cc cf       	rjmp	.-104    	; 0x42e <choose_next_direction+0x22>
            }
        }
    }

    // إذا لم نجد أي اتجاه صالح
    if (min_dist == 255) {
     496:	ef 3f       	cpi	r30, 0xFF	; 255
     498:	39 f4       	brne	.+14     	; 0x4a8 <choose_next_direction+0x9c>
        LCD_clearScreen();
     49a:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_clearScreen>
        LCD_displayString(" SYSTEM ERROR ");
     49e:	80 e6       	ldi	r24, 0x60	; 96
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_displayString>
     4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <choose_next_direction+0x9a>
            // توقف الروبوت نهائيًا
        }
    }

    return best_dir;
}
     4a8:	81 2f       	mov	r24, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	08 95       	ret

000004b2 <move_forward_one_cell>:
void move_forward_one_cell(void) {
    // محركان للأمام لزمن محدد (عدّل _delay_ms إذا احتجت)

	//left 75 rigt 50 sh8al tmam

    DC_LEFT(CW, 75);
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	6b e4       	ldi	r22, 0x4B	; 75
     4b6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
    DC_RIGHT(CW, 50);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	62 e3       	ldi	r22, 0x32	; 50
     4be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
     4c2:	80 ea       	ldi	r24, 0xA0	; 160
     4c4:	9f e0       	ldi	r25, 0x0F	; 15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4c6:	20 e9       	ldi	r18, 0x90	; 144
     4c8:	31 e0       	ldi	r19, 0x01	; 1
     4ca:	f9 01       	movw	r30, r18
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <move_forward_one_cell+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	d9 f7       	brne	.-10     	; 0x4ca <move_forward_one_cell+0x18>
    _delay_ms(400); // زمن عبور خلية واحدة (اضبطه عملياً)
    DC_RIGHT(STOP, 0);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
    DC_LEFT(STOP, 0);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
     4e4:	80 ed       	ldi	r24, 0xD0	; 208
     4e6:	97 e0       	ldi	r25, 0x07	; 7
     4e8:	20 e9       	ldi	r18, 0x90	; 144
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	f9 01       	movw	r30, r18
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <move_forward_one_cell+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f4:	d9 f7       	brne	.-10     	; 0x4ec <move_forward_one_cell+0x3a>
    _delay_ms(200);

    // حدّث الاحداثيات
    pos_x += dx[heading];
     4f6:	e0 91 13 01 	lds	r30, 0x0113
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	df 01       	movw	r26, r30
     502:	aa 50       	subi	r26, 0x0A	; 10
     504:	bf 4f       	sbci	r27, 0xFF	; 255
     506:	80 91 0f 01 	lds	r24, 0x010F
     50a:	90 91 10 01 	lds	r25, 0x0110
     50e:	2d 91       	ld	r18, X+
     510:	3c 91       	ld	r19, X
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	90 93 10 01 	sts	0x0110, r25
     51a:	80 93 0f 01 	sts	0x010F, r24
    pos_y += dy[heading];
     51e:	e2 50       	subi	r30, 0x02	; 2
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	80 91 11 01 	lds	r24, 0x0111
     526:	90 91 12 01 	lds	r25, 0x0112
     52a:	20 81       	ld	r18, Z
     52c:	31 81       	ldd	r19, Z+1	; 0x01
     52e:	82 0f       	add	r24, r18
     530:	93 1f       	adc	r25, r19
     532:	90 93 12 01 	sts	0x0112, r25
     536:	80 93 11 01 	sts	0x0111, r24
}
     53a:	08 95       	ret

0000053c <rotate_to_dir>:
 *=======================================================================================
 */

void rotate_to_dir(uint8 target_dir) {
    // حساب الفرق (0 = already aligned, 1 = +90deg (right), 3 = -90deg (left), 2 = 180deg)
    uint8 diff = (target_dir + 4 - heading) % 4;
     53c:	90 91 13 01 	lds	r25, 0x0113
     540:	24 e0       	ldi	r18, 0x04	; 4
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	29 1b       	sub	r18, r25
     546:	31 09       	sbc	r19, r1
     548:	a9 01       	movw	r20, r18
     54a:	48 0f       	add	r20, r24
     54c:	51 1d       	adc	r21, r1
     54e:	ca 01       	movw	r24, r20
     550:	64 e0       	ldi	r22, 0x04	; 4
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divmodhi4>
    if (diff == 0) return;
     558:	88 23       	and	r24, r24
     55a:	09 f4       	brne	.+2      	; 0x55e <rotate_to_dir+0x22>
     55c:	6b c0       	rjmp	.+214    	; 0x634 <rotate_to_dir+0xf8>

    if (diff == 1) {
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	d9 f4       	brne	.+54     	; 0x598 <rotate_to_dir+0x5c>
        // دور يمين
        DC_RIGHT(CW, 0);
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
        DC_LEFT(CW, 50);
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	62 e3       	ldi	r22, 0x32	; 50
     56c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
        LCD_displayStringRowColumn(0,0," YEMEN ");
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	4f e6       	ldi	r20, 0x6F	; 111
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
     57c:	8c ed       	ldi	r24, 0xDC	; 220
     57e:	95 e0       	ldi	r25, 0x05	; 5
     580:	20 e9       	ldi	r18, 0x90	; 144
     582:	31 e0       	ldi	r19, 0x01	; 1
     584:	f9 01       	movw	r30, r18
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <rotate_to_dir+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     58a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58c:	d9 f7       	brne	.-10     	; 0x584 <rotate_to_dir+0x48>

        _delay_ms(150); // زمن الدوران: عدّل حسب تجاربك
        heading = (heading + 1) % 4;
     58e:	80 91 13 01 	lds	r24, 0x0113
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	39 c0       	rjmp	.+114    	; 0x60a <rotate_to_dir+0xce>
    } else if (diff == 3) {
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	e1 f4       	brne	.+56     	; 0x5d4 <rotate_to_dir+0x98>
        // دور شمال (left)
        DC_RIGHT(CW, 50);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	62 e3       	ldi	r22, 0x32	; 50
     5a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
        DC_LEFT(CW, 0);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
        LCD_displayStringRowColumn(0,0," SHMAL ");
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	47 e7       	ldi	r20, 0x77	; 119
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
     5b8:	88 e8       	ldi	r24, 0x88	; 136
     5ba:	93 e1       	ldi	r25, 0x13	; 19
     5bc:	20 e9       	ldi	r18, 0x90	; 144
     5be:	31 e0       	ldi	r19, 0x01	; 1
     5c0:	f9 01       	movw	r30, r18
     5c2:	31 97       	sbiw	r30, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <rotate_to_dir+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c8:	d9 f7       	brne	.-10     	; 0x5c0 <rotate_to_dir+0x84>

        _delay_ms(500);
        heading = (heading + 3) % 4;
     5ca:	80 91 13 01 	lds	r24, 0x0113
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	03 96       	adiw	r24, 0x03	; 3
     5d2:	1b c0       	rjmp	.+54     	; 0x60a <rotate_to_dir+0xce>
    } else { // diff == 2
        // دوران 180
        DC_RIGHT(CW, 60);
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	6c e3       	ldi	r22, 0x3C	; 60
     5d8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
        DC_LEFT(A_CW, 60);
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	6c e3       	ldi	r22, 0x3C	; 60
     5e0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
        LCD_displayStringRowColumn(0,0," BLF ");
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	4f e7       	ldi	r20, 0x7F	; 127
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
     5f0:	80 ed       	ldi	r24, 0xD0	; 208
     5f2:	97 e0       	ldi	r25, 0x07	; 7
     5f4:	20 e9       	ldi	r18, 0x90	; 144
     5f6:	31 e0       	ldi	r19, 0x01	; 1
     5f8:	f9 01       	movw	r30, r18
     5fa:	31 97       	sbiw	r30, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <rotate_to_dir+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     600:	d9 f7       	brne	.-10     	; 0x5f8 <rotate_to_dir+0xbc>

        _delay_ms(200);
        heading = (heading + 2) % 4;
     602:	80 91 13 01 	lds	r24, 0x0113
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	02 96       	adiw	r24, 0x02	; 2
     60a:	83 70       	andi	r24, 0x03	; 3
     60c:	90 70       	andi	r25, 0x00	; 0
     60e:	80 93 13 01 	sts	0x0113, r24
    }
    // اوقف الموتور بعد دوران
    DC_RIGHT(CW, 0);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
    DC_LEFT(CW, 0);
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>
     622:	80 ed       	ldi	r24, 0xD0	; 208
     624:	97 e0       	ldi	r25, 0x07	; 7
     626:	20 e9       	ldi	r18, 0x90	; 144
     628:	31 e0       	ldi	r19, 0x01	; 1
     62a:	f9 01       	movw	r30, r18
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <rotate_to_dir+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     632:	d9 f7       	brne	.-10     	; 0x62a <rotate_to_dir+0xee>
     634:	08 95       	ret

00000636 <replay_path>:
}
/*=======================================================================================
 * -------------------------------- Replay Path -----------------------------------------
 *=======================================================================================
 */
void replay_path(void) {
     636:	6f 92       	push	r6
     638:	7f 92       	push	r7
     63a:	8f 92       	push	r8
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	61 97       	sbiw	r28, 0x11	; 17
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
     660:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_clearScreen>
    LCD_displayString("REPLAYING...");
     664:	85 e8       	ldi	r24, 0x85	; 133
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_displayString>
     66c:	88 eb       	ldi	r24, 0xB8	; 184
     66e:	9b e0       	ldi	r25, 0x0B	; 11
     670:	20 e9       	ldi	r18, 0x90	; 144
     672:	31 e0       	ldi	r19, 0x01	; 1
     674:	f9 01       	movw	r30, r18
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <replay_path+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67c:	d9 f7       	brne	.-10     	; 0x674 <replay_path+0x3e>
    _delay_ms(300);

    cli(); // أغلق الإنترابت
     67e:	f8 94       	cli

    // أعد وضع البداية
    pos_x = 0;
     680:	10 92 10 01 	sts	0x0110, r1
     684:	10 92 0f 01 	sts	0x010F, r1
    pos_y = 0;
     688:	10 92 12 01 	sts	0x0112, r1
     68c:	10 92 11 01 	sts	0x0111, r1
    heading = 0;
     690:	10 92 13 01 	sts	0x0113, r1
     694:	ee 24       	eor	r14, r14
     696:	ff 24       	eor	r15, r15
        uint8 dir = path_dir[i];
        rotate_to_dir(dir);
        move_forward_one_cell();

        char buf[17];
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
     698:	6e 01       	movw	r12, r28
     69a:	08 94       	sec
     69c:	c1 1c       	adc	r12, r1
     69e:	d1 1c       	adc	r13, r1
     6a0:	41 e1       	ldi	r20, 0x11	; 17
     6a2:	64 2e       	mov	r6, r20
     6a4:	71 2c       	mov	r7, r1
     6a6:	32 e9       	ldi	r19, 0x92	; 146
     6a8:	83 2e       	mov	r8, r19
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	93 2e       	mov	r9, r19
     6ae:	20 e9       	ldi	r18, 0x90	; 144
     6b0:	a2 2e       	mov	r10, r18
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	b2 2e       	mov	r11, r18
     6b6:	45 c0       	rjmp	.+138    	; 0x742 <replay_path+0x10c>
    pos_x = 0;
    pos_y = 0;
    heading = 0;

    for (uint16_t i = 0; i < path_len; i++) {
        uint8 dir = path_dir[i];
     6b8:	f7 01       	movw	r30, r14
     6ba:	ea 5e       	subi	r30, 0xEA	; 234
     6bc:	f9 4f       	sbci	r31, 0xF9	; 249
     6be:	10 81       	ld	r17, Z
        rotate_to_dir(dir);
     6c0:	81 2f       	mov	r24, r17
     6c2:	0e 94 9e 02 	call	0x53c	; 0x53c <rotate_to_dir>
        move_forward_one_cell();
     6c6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <move_forward_one_cell>

        char buf[17];
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
     6ca:	8d b7       	in	r24, 0x3d	; 61
     6cc:	9e b7       	in	r25, 0x3e	; 62
     6ce:	0c 97       	sbiw	r24, 0x0c	; 12
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	9e bf       	out	0x3e, r25	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	8d bf       	out	0x3d, r24	; 61
     6da:	ed b7       	in	r30, 0x3d	; 61
     6dc:	fe b7       	in	r31, 0x3e	; 62
     6de:	31 96       	adiw	r30, 0x01	; 1
     6e0:	ad b7       	in	r26, 0x3d	; 61
     6e2:	be b7       	in	r27, 0x3e	; 62
     6e4:	12 96       	adiw	r26, 0x02	; 2
     6e6:	dc 92       	st	X, r13
     6e8:	ce 92       	st	-X, r12
     6ea:	11 97       	sbiw	r26, 0x01	; 1
     6ec:	73 82       	std	Z+3, r7	; 0x03
     6ee:	62 82       	std	Z+2, r6	; 0x02
     6f0:	95 82       	std	Z+5, r9	; 0x05
     6f2:	84 82       	std	Z+4, r8	; 0x04
     6f4:	80 91 0f 01 	lds	r24, 0x010F
     6f8:	90 91 10 01 	lds	r25, 0x0110
     6fc:	97 83       	std	Z+7, r25	; 0x07
     6fe:	86 83       	std	Z+6, r24	; 0x06
     700:	80 91 11 01 	lds	r24, 0x0111
     704:	90 91 12 01 	lds	r25, 0x0112
     708:	91 87       	std	Z+9, r25	; 0x09
     70a:	80 87       	std	Z+8, r24	; 0x08
     70c:	12 87       	std	Z+10, r17	; 0x0a
     70e:	13 86       	std	Z+11, r1	; 0x0b
     710:	0e 94 34 0a 	call	0x1468	; 0x1468 <snprintf>
        LCD_displayStringRowColumn(1, 0, buf);
     714:	8d b7       	in	r24, 0x3d	; 61
     716:	9e b7       	in	r25, 0x3e	; 62
     718:	0c 96       	adiw	r24, 0x0c	; 12
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	9e bf       	out	0x3e, r25	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	8d bf       	out	0x3d, r24	; 61
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	a6 01       	movw	r20, r12
     72a:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
     72e:	80 e2       	ldi	r24, 0x20	; 32
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	f5 01       	movw	r30, r10
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <replay_path+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     738:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73a:	d9 f7       	brne	.-10     	; 0x732 <replay_path+0xfc>
    // أعد وضع البداية
    pos_x = 0;
    pos_y = 0;
    heading = 0;

    for (uint16_t i = 0; i < path_len; i++) {
     73c:	08 94       	sec
     73e:	e1 1c       	adc	r14, r1
     740:	f1 1c       	adc	r15, r1
     742:	80 91 14 01 	lds	r24, 0x0114
     746:	90 91 15 01 	lds	r25, 0x0115
     74a:	e8 16       	cp	r14, r24
     74c:	f9 06       	cpc	r15, r25
     74e:	08 f4       	brcc	.+2      	; 0x752 <replay_path+0x11c>
     750:	b3 cf       	rjmp	.-154    	; 0x6b8 <replay_path+0x82>
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
        LCD_displayStringRowColumn(1, 0, buf);
        _delay_ms(80);
    }

    DC_RIGHT(CW,0);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_RIGHT>
    DC_LEFT(CW,0);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DC_LEFT>

    LCD_displayStringRowColumn(0,0," PATH DONE ");
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	43 ea       	ldi	r20, 0xA3	; 163
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
     76e:	88 e8       	ldi	r24, 0x88	; 136
     770:	93 e1       	ldi	r25, 0x13	; 19
     772:	20 e9       	ldi	r18, 0x90	; 144
     774:	31 e0       	ldi	r19, 0x01	; 1
     776:	f9 01       	movw	r30, r18
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <replay_path+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     77c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77e:	d9 f7       	brne	.-10     	; 0x776 <replay_path+0x140>
    _delay_ms(500);

    sei(); // إعادة تفعيل الإنترابت
     780:	78 94       	sei
}
     782:	61 96       	adiw	r28, 0x11	; 17
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	7f 90       	pop	r7
     7a6:	6f 90       	pop	r6
     7a8:	08 95       	ret

000007aa <__vector_1>:
ISR(INT0_vect) {
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
    if (goal_reached) {
     7cc:	80 91 0e 01 	lds	r24, 0x010E
     7d0:	88 23       	and	r24, r24
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <__vector_1+0x2e>
        replay_path();
     7d4:	0e 94 1b 03 	call	0x636	; 0x636 <replay_path>
    }
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <update_walls>:
 * return:
 *  - 1 lw fe update 7sl (wall gded).
 *  - 0 lw mafi4 ay taghyeer.
 */

uint8 update_walls(void) {
     7fa:	2f 92       	push	r2
     7fc:	3f 92       	push	r3
     7fe:	4f 92       	push	r4
     800:	5f 92       	push	r5
     802:	6f 92       	push	r6
     804:	7f 92       	push	r7
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
     81e:	a0 91 13 01 	lds	r26, 0x0113
     822:	2a 2f       	mov	r18, r26
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	f9 01       	movw	r30, r18
     828:	33 96       	adiw	r30, 0x03	; 3
     82a:	e3 70       	andi	r30, 0x03	; 3
     82c:	f0 70       	andi	r31, 0x00	; 0
    int right_dir = (heading + 1) % 4;
     82e:	d9 01       	movw	r26, r18
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	a3 70       	andi	r26, 0x03	; 3
     834:	b0 70       	andi	r27, 0x00	; 0
    int lx = pos_x + dx[left_dir];
     836:	20 90 0f 01 	lds	r2, 0x010F
     83a:	30 90 10 01 	lds	r3, 0x0110
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	cf 01       	movw	r24, r30
     844:	8a 50       	subi	r24, 0x0A	; 10
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	ec 01       	movw	r28, r24
     84a:	e8 80       	ld	r14, Y
     84c:	f9 80       	ldd	r15, Y+1	; 0x01
    int ly = pos_y + dy[left_dir];
     84e:	00 91 11 01 	lds	r16, 0x0111
     852:	10 91 12 01 	lds	r17, 0x0112
     856:	e2 50       	subi	r30, 0x02	; 2
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	c0 80       	ld	r12, Z
     85c:	d1 80       	ldd	r13, Z+1	; 0x01
    int rx = pos_x + dx[right_dir];
     85e:	aa 0f       	add	r26, r26
     860:	bb 1f       	adc	r27, r27
     862:	fd 01       	movw	r30, r26
     864:	ea 50       	subi	r30, 0x0A	; 10
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	a0 80       	ld	r10, Z
     86a:	b1 80       	ldd	r11, Z+1	; 0x01
    int ry = pos_y + dy[right_dir];
     86c:	a2 50       	subi	r26, 0x02	; 2
     86e:	bf 4f       	sbci	r27, 0xFF	; 255
     870:	8d 90       	ld	r8, X+
     872:	9c 90       	ld	r9, X
    int fx = pos_x + dx[heading];
     874:	d9 01       	movw	r26, r18
     876:	aa 0f       	add	r26, r26
     878:	bb 1f       	adc	r27, r27
     87a:	fd 01       	movw	r30, r26
     87c:	ea 50       	subi	r30, 0x0A	; 10
     87e:	ff 4f       	sbci	r31, 0xFF	; 255
     880:	60 80       	ld	r6, Z
     882:	71 80       	ldd	r7, Z+1	; 0x01
    int fy = pos_y + dy[heading];
     884:	a2 50       	subi	r26, 0x02	; 2
     886:	bf 4f       	sbci	r27, 0xFF	; 255
     888:	4d 90       	ld	r4, X+
     88a:	5c 90       	ld	r5, X

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
     88c:	0e 94 93 06 	call	0xd26	; 0xd26 <IR1_getState>
     890:	88 23       	and	r24, r24
     892:	21 f4       	brne	.+8      	; 0x89c <__stack+0x3d>
     894:	0e 94 96 06 	call	0xd2c	; 0xd2c <IR2_getState>
     898:	88 23       	and	r24, r24
     89a:	11 f1       	breq	.+68     	; 0x8e0 <__stack+0x81>
uint8 update_walls(void) {
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
     89c:	c7 01       	movw	r24, r14
     89e:	82 0d       	add	r24, r2
     8a0:	93 1d       	adc	r25, r3
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
     8a2:	97 fd       	sbrc	r25, 7
     8a4:	1d c0       	rjmp	.+58     	; 0x8e0 <__stack+0x81>
     8a6:	80 31       	cpi	r24, 0x10	; 16
     8a8:	91 05       	cpc	r25, r1
     8aa:	d4 f4       	brge	.+52     	; 0x8e0 <__stack+0x81>
    uint8 updated = 0;

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
     8ac:	f6 01       	movw	r30, r12
     8ae:	e0 0f       	add	r30, r16
     8b0:	f1 1f       	adc	r31, r17
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];

    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
     8b2:	f7 fd       	sbrc	r31, 7
     8b4:	15 c0       	rjmp	.+42     	; 0x8e0 <__stack+0x81>
     8b6:	e0 31       	cpi	r30, 0x10	; 16
     8b8:	f1 05       	cpc	r31, r1
     8ba:	94 f4       	brge	.+36     	; 0x8e0 <__stack+0x81>
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
     8bc:	dc 01       	movw	r26, r24
     8be:	74 e0       	ldi	r23, 0x04	; 4
     8c0:	aa 0f       	add	r26, r26
     8c2:	bb 1f       	adc	r27, r27
     8c4:	7a 95       	dec	r23
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__stack+0x61>
     8c8:	ae 0f       	add	r26, r30
     8ca:	bf 1f       	adc	r27, r31
     8cc:	aa 5e       	subi	r26, 0xEA	; 234
     8ce:	bb 4f       	sbci	r27, 0xFB	; 251
     8d0:	8c 91       	ld	r24, X
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	29 f0       	breq	.+10     	; 0x8e0 <__stack+0x81>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	8c 93       	st	X, r24
     8da:	ff 24       	eor	r15, r15
     8dc:	f3 94       	inc	r15
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	ff 24       	eor	r15, r15
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
     8e2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <IR7_getState>
     8e6:	88 23       	and	r24, r24
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <__stack+0x93>
     8ea:	0e 94 b6 06 	call	0xd6c	; 0xd6c <IR8_getState>
     8ee:	88 23       	and	r24, r24
     8f0:	09 f1       	breq	.+66     	; 0x934 <__stack+0xd5>

    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
     8f2:	c5 01       	movw	r24, r10
     8f4:	82 0d       	add	r24, r2
     8f6:	93 1d       	adc	r25, r3
    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
     8f8:	97 fd       	sbrc	r25, 7
     8fa:	1c c0       	rjmp	.+56     	; 0x934 <__stack+0xd5>
     8fc:	80 31       	cpi	r24, 0x10	; 16
     8fe:	91 05       	cpc	r25, r1
     900:	cc f4       	brge	.+50     	; 0x934 <__stack+0xd5>
    int left_dir = (heading + 3) % 4;
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
     902:	d4 01       	movw	r26, r8
     904:	a0 0f       	add	r26, r16
     906:	b1 1f       	adc	r27, r17
    // اليسار (IR1, IR2)
    if ((IR1_getState() || IR2_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE) {
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    }
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
     908:	b7 fd       	sbrc	r27, 7
     90a:	14 c0       	rjmp	.+40     	; 0x934 <__stack+0xd5>
     90c:	a0 31       	cpi	r26, 0x10	; 16
     90e:	b1 05       	cpc	r27, r1
     910:	8c f4       	brge	.+34     	; 0x934 <__stack+0xd5>
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
     912:	fc 01       	movw	r30, r24
     914:	64 e0       	ldi	r22, 0x04	; 4
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	6a 95       	dec	r22
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0xb7>
     91e:	ea 0f       	add	r30, r26
     920:	fb 1f       	adc	r31, r27
     922:	ea 5e       	subi	r30, 0xEA	; 234
     924:	fb 4f       	sbci	r31, 0xFB	; 251
     926:	80 81       	ld	r24, Z
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	21 f0       	breq	.+8      	; 0x934 <__stack+0xd5>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 83       	st	Z, r24
     930:	ff 24       	eor	r15, r15
     932:	f3 94       	inc	r15
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
     934:	0e 94 9c 06 	call	0xd38	; 0xd38 <IR3_getState>
     938:	88 23       	and	r24, r24
     93a:	21 f4       	brne	.+8      	; 0x944 <__stack+0xe5>
     93c:	0e 94 a4 06 	call	0xd48	; 0xd48 <IR6_getState>
     940:	88 23       	and	r24, r24
     942:	09 f1       	breq	.+66     	; 0x986 <__stack+0x127>
    int right_dir = (heading + 1) % 4;
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
     944:	c3 01       	movw	r24, r6
     946:	82 0d       	add	r24, r2
     948:	93 1d       	adc	r25, r3
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
     94a:	97 fd       	sbrc	r25, 7
     94c:	1c c0       	rjmp	.+56     	; 0x986 <__stack+0x127>
     94e:	80 31       	cpi	r24, 0x10	; 16
     950:	91 05       	cpc	r25, r1
     952:	cc f4       	brge	.+50     	; 0x986 <__stack+0x127>
    int lx = pos_x + dx[left_dir];
    int ly = pos_y + dy[left_dir];
    int rx = pos_x + dx[right_dir];
    int ry = pos_y + dy[right_dir];
    int fx = pos_x + dx[heading];
    int fy = pos_y + dy[heading];
     954:	d2 01       	movw	r26, r4
     956:	a0 0f       	add	r26, r16
     958:	b1 1f       	adc	r27, r17
    // اليمين (IR7, IR8)
    if ((IR7_getState() || IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE) {
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    }
    // امام (IR3, IR6)
    if ((IR3_getState() || IR6_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE) {
     95a:	b7 fd       	sbrc	r27, 7
     95c:	14 c0       	rjmp	.+40     	; 0x986 <__stack+0x127>
     95e:	a0 31       	cpi	r26, 0x10	; 16
     960:	b1 05       	cpc	r27, r1
     962:	8c f4       	brge	.+34     	; 0x986 <__stack+0x127>
        if (maze[fx][fy] != 1) { maze[fx][fy] = 1; updated = 1; }
     964:	fc 01       	movw	r30, r24
     966:	54 e0       	ldi	r21, 0x04	; 4
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	5a 95       	dec	r21
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x109>
     970:	ea 0f       	add	r30, r26
     972:	fb 1f       	adc	r31, r27
     974:	ea 5e       	subi	r30, 0xEA	; 234
     976:	fb 4f       	sbci	r31, 0xFB	; 251
     978:	80 81       	ld	r24, Z
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	21 f0       	breq	.+8      	; 0x986 <__stack+0x127>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 83       	st	Z, r24
     982:	ff 24       	eor	r15, r15
     984:	f3 94       	inc	r15
    }

    return updated;
}
     986:	8f 2d       	mov	r24, r15
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	bf 90       	pop	r11
     99a:	af 90       	pop	r10
     99c:	9f 90       	pop	r9
     99e:	8f 90       	pop	r8
     9a0:	7f 90       	pop	r7
     9a2:	6f 90       	pop	r6
     9a4:	5f 90       	pop	r5
     9a6:	4f 90       	pop	r4
     9a8:	3f 90       	pop	r3
     9aa:	2f 90       	pop	r2
     9ac:	08 95       	ret

000009ae <PWM_Timer0_Start>:
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
     9ae:	bb 9a       	sbi	0x17, 3	; 23

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS02) | (1 << CS00);
     9b0:	9d e6       	ldi	r25, 0x6D	; 109
     9b2:	93 bf       	out	0x33, r25	; 51
    // CS02 and CS00 -> Prescaler = 1024

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	0e 94 ab 09 	call	0x1356	; 0x1356 <__mulsi3>
     9ca:	24 e6       	ldi	r18, 0x64	; 100
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodsi4>
     9d6:	2c bf       	out	0x3c, r18	; 60
}
     9d8:	08 95       	ret

000009da <ext_int0_init>:
#include"ext_int0.h"


void ext_int0_init(void){
    // زرار interrupt على PD2 (INT0)
    DDRD &= ~(1<<PD2);   // input
     9da:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1<<PD2);   // pull-up
     9dc:	92 9a       	sbi	0x12, 2	; 18

    // تهيئة INT0 على falling edge
    GICR |= (1<<INT0);
     9de:	8b b7       	in	r24, 0x3b	; 59
     9e0:	80 64       	ori	r24, 0x40	; 64
     9e2:	8b bf       	out	0x3b, r24	; 59
    MCUCR |= (1<<ISC01);
     9e4:	85 b7       	in	r24, 0x35	; 53
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1<<ISC00);
     9ea:	85 b7       	in	r24, 0x35	; 53
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	85 bf       	out	0x35, r24	; 53


}
     9f0:	08 95       	ret

000009f2 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     9f2:	68 30       	cpi	r22, 0x08	; 8
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <GPIO_setupPinDirection+0x6>
     9f6:	70 c0       	rjmp	.+224    	; 0xad8 <GPIO_setupPinDirection+0xe6>
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <GPIO_setupPinDirection+0xc>
     9fc:	6d c0       	rjmp	.+218    	; 0xad8 <GPIO_setupPinDirection+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	09 f1       	breq	.+66     	; 0xa44 <GPIO_setupPinDirection+0x52>
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	30 f0       	brcs	.+12     	; 0xa12 <GPIO_setupPinDirection+0x20>
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	b1 f1       	breq	.+108    	; 0xa76 <GPIO_setupPinDirection+0x84>
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	09 f0       	breq	.+2      	; 0xa10 <GPIO_setupPinDirection+0x1e>
     a0e:	64 c0       	rjmp	.+200    	; 0xad8 <GPIO_setupPinDirection+0xe6>
     a10:	4b c0       	rjmp	.+150    	; 0xaa8 <GPIO_setupPinDirection+0xb6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     a12:	41 30       	cpi	r20, 0x01	; 1
     a14:	59 f4       	brne	.+22     	; 0xa2c <GPIO_setupPinDirection+0x3a>
			{
				SET_BIT(DDRA,pin_num);
     a16:	2a b3       	in	r18, 0x1a	; 26
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <GPIO_setupPinDirection+0x30>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	6a 95       	dec	r22
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <GPIO_setupPinDirection+0x2c>
     a26:	28 2b       	or	r18, r24
     a28:	2a bb       	out	0x1a, r18	; 26
     a2a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     a2c:	2a b3       	in	r18, 0x1a	; 26
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <GPIO_setupPinDirection+0x46>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	6a 95       	dec	r22
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <GPIO_setupPinDirection+0x42>
     a3c:	80 95       	com	r24
     a3e:	82 23       	and	r24, r18
     a40:	8a bb       	out	0x1a, r24	; 26
     a42:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     a44:	41 30       	cpi	r20, 0x01	; 1
     a46:	59 f4       	brne	.+22     	; 0xa5e <GPIO_setupPinDirection+0x6c>
			{
				SET_BIT(DDRB,pin_num);
     a48:	27 b3       	in	r18, 0x17	; 23
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <GPIO_setupPinDirection+0x62>
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	6a 95       	dec	r22
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <GPIO_setupPinDirection+0x5e>
     a58:	28 2b       	or	r18, r24
     a5a:	27 bb       	out	0x17, r18	; 23
     a5c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     a5e:	27 b3       	in	r18, 0x17	; 23
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <GPIO_setupPinDirection+0x78>
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	6a 95       	dec	r22
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <GPIO_setupPinDirection+0x74>
     a6e:	80 95       	com	r24
     a70:	82 23       	and	r24, r18
     a72:	87 bb       	out	0x17, r24	; 23
     a74:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     a76:	41 30       	cpi	r20, 0x01	; 1
     a78:	59 f4       	brne	.+22     	; 0xa90 <GPIO_setupPinDirection+0x9e>
			{
				SET_BIT(DDRC,pin_num);
     a7a:	24 b3       	in	r18, 0x14	; 20
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <GPIO_setupPinDirection+0x94>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	6a 95       	dec	r22
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <GPIO_setupPinDirection+0x90>
     a8a:	28 2b       	or	r18, r24
     a8c:	24 bb       	out	0x14, r18	; 20
     a8e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     a90:	24 b3       	in	r18, 0x14	; 20
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <GPIO_setupPinDirection+0xaa>
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	6a 95       	dec	r22
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <GPIO_setupPinDirection+0xa6>
     aa0:	80 95       	com	r24
     aa2:	82 23       	and	r24, r18
     aa4:	84 bb       	out	0x14, r24	; 20
     aa6:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     aa8:	41 30       	cpi	r20, 0x01	; 1
     aaa:	59 f4       	brne	.+22     	; 0xac2 <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
     aac:	21 b3       	in	r18, 0x11	; 17
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <GPIO_setupPinDirection+0xc6>
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	6a 95       	dec	r22
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <GPIO_setupPinDirection+0xc2>
     abc:	28 2b       	or	r18, r24
     abe:	21 bb       	out	0x11, r18	; 17
     ac0:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ac2:	21 b3       	in	r18, 0x11	; 17
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <GPIO_setupPinDirection+0xdc>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	6a 95       	dec	r22
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <GPIO_setupPinDirection+0xd8>
     ad2:	80 95       	com	r24
     ad4:	82 23       	and	r24, r18
     ad6:	81 bb       	out	0x11, r24	; 17
     ad8:	08 95       	ret

00000ada <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ada:	68 30       	cpi	r22, 0x08	; 8
     adc:	08 f0       	brcs	.+2      	; 0xae0 <GPIO_writePin+0x6>
     ade:	70 c0       	rjmp	.+224    	; 0xbc0 <GPIO_writePin+0xe6>
     ae0:	84 30       	cpi	r24, 0x04	; 4
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <GPIO_writePin+0xc>
     ae4:	6d c0       	rjmp	.+218    	; 0xbc0 <GPIO_writePin+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f1       	breq	.+66     	; 0xb2c <GPIO_writePin+0x52>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	30 f0       	brcs	.+12     	; 0xafa <GPIO_writePin+0x20>
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	b1 f1       	breq	.+108    	; 0xb5e <GPIO_writePin+0x84>
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	09 f0       	breq	.+2      	; 0xaf8 <GPIO_writePin+0x1e>
     af6:	64 c0       	rjmp	.+200    	; 0xbc0 <GPIO_writePin+0xe6>
     af8:	4b c0       	rjmp	.+150    	; 0xb90 <GPIO_writePin+0xb6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     afa:	41 30       	cpi	r20, 0x01	; 1
     afc:	59 f4       	brne	.+22     	; 0xb14 <GPIO_writePin+0x3a>
			{
				SET_BIT(PORTA,pin_num);
     afe:	2b b3       	in	r18, 0x1b	; 27
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <GPIO_writePin+0x30>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	6a 95       	dec	r22
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <GPIO_writePin+0x2c>
     b0e:	28 2b       	or	r18, r24
     b10:	2b bb       	out	0x1b, r18	; 27
     b12:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     b14:	2b b3       	in	r18, 0x1b	; 27
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <GPIO_writePin+0x46>
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	6a 95       	dec	r22
     b22:	e2 f7       	brpl	.-8      	; 0xb1c <GPIO_writePin+0x42>
     b24:	80 95       	com	r24
     b26:	82 23       	and	r24, r18
     b28:	8b bb       	out	0x1b, r24	; 27
     b2a:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     b2c:	41 30       	cpi	r20, 0x01	; 1
     b2e:	59 f4       	brne	.+22     	; 0xb46 <GPIO_writePin+0x6c>
			{
				SET_BIT(PORTB,pin_num);
     b30:	28 b3       	in	r18, 0x18	; 24
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <GPIO_writePin+0x62>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	6a 95       	dec	r22
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <GPIO_writePin+0x5e>
     b40:	28 2b       	or	r18, r24
     b42:	28 bb       	out	0x18, r18	; 24
     b44:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     b46:	28 b3       	in	r18, 0x18	; 24
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <GPIO_writePin+0x78>
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	6a 95       	dec	r22
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <GPIO_writePin+0x74>
     b56:	80 95       	com	r24
     b58:	82 23       	and	r24, r18
     b5a:	88 bb       	out	0x18, r24	; 24
     b5c:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     b5e:	41 30       	cpi	r20, 0x01	; 1
     b60:	59 f4       	brne	.+22     	; 0xb78 <GPIO_writePin+0x9e>
			{
				SET_BIT(PORTC,pin_num);
     b62:	25 b3       	in	r18, 0x15	; 21
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <GPIO_writePin+0x94>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	6a 95       	dec	r22
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <GPIO_writePin+0x90>
     b72:	28 2b       	or	r18, r24
     b74:	25 bb       	out	0x15, r18	; 21
     b76:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     b78:	25 b3       	in	r18, 0x15	; 21
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <GPIO_writePin+0xaa>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	6a 95       	dec	r22
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <GPIO_writePin+0xa6>
     b88:	80 95       	com	r24
     b8a:	82 23       	and	r24, r18
     b8c:	85 bb       	out	0x15, r24	; 21
     b8e:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     b90:	41 30       	cpi	r20, 0x01	; 1
     b92:	59 f4       	brne	.+22     	; 0xbaa <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
     b94:	22 b3       	in	r18, 0x12	; 18
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <GPIO_writePin+0xc6>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	6a 95       	dec	r22
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <GPIO_writePin+0xc2>
     ba4:	28 2b       	or	r18, r24
     ba6:	22 bb       	out	0x12, r18	; 18
     ba8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     baa:	22 b3       	in	r18, 0x12	; 18
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <GPIO_writePin+0xdc>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <GPIO_writePin+0xd8>
     bba:	80 95       	com	r24
     bbc:	82 23       	and	r24, r18
     bbe:	82 bb       	out	0x12, r24	; 18
     bc0:	08 95       	ret

00000bc2 <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bc2:	68 30       	cpi	r22, 0x08	; 8
     bc4:	d0 f4       	brcc	.+52     	; 0xbfa <GPIO_readPin+0x38>
     bc6:	84 30       	cpi	r24, 0x04	; 4
     bc8:	c0 f4       	brcc	.+48     	; 0xbfa <GPIO_readPin+0x38>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	49 f0       	breq	.+18     	; 0xbe0 <GPIO_readPin+0x1e>
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	28 f0       	brcs	.+10     	; 0xbdc <GPIO_readPin+0x1a>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	39 f0       	breq	.+14     	; 0xbe4 <GPIO_readPin+0x22>
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	81 f4       	brne	.+32     	; 0xbfa <GPIO_readPin+0x38>
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <GPIO_readPin+0x26>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     bdc:	89 b3       	in	r24, 0x19	; 25
     bde:	05 c0       	rjmp	.+10     	; 0xbea <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     be0:	86 b3       	in	r24, 0x16	; 22
     be2:	03 c0       	rjmp	.+6      	; 0xbea <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     be4:	83 b3       	in	r24, 0x13	; 19
     be6:	01 c0       	rjmp	.+2      	; 0xbea <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     be8:	80 b3       	in	r24, 0x10	; 16
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <GPIO_readPin+0x30>
     bee:	95 95       	asr	r25
     bf0:	87 95       	ror	r24
     bf2:	6a 95       	dec	r22
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <GPIO_readPin+0x2c>
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	08 95       	ret
     bfa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     bfc:	08 95       	ret

00000bfe <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	80 f4       	brcc	.+32     	; 0xc22 <GPIO_setupPortDirection+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	49 f0       	breq	.+18     	; 0xc18 <GPIO_setupPortDirection+0x1a>
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	28 f0       	brcs	.+10     	; 0xc14 <GPIO_setupPortDirection+0x16>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	39 f0       	breq	.+14     	; 0xc1c <GPIO_setupPortDirection+0x1e>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	41 f4       	brne	.+16     	; 0xc22 <GPIO_setupPortDirection+0x24>
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <GPIO_setupPortDirection+0x22>
		{
		case PORTA_ID:
			DDRA = direction;
     c14:	6a bb       	out	0x1a, r22	; 26
     c16:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
     c18:	67 bb       	out	0x17, r22	; 23
     c1a:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
     c1c:	64 bb       	out	0x14, r22	; 20
     c1e:	08 95       	ret
			break;
		case PORTD_ID:
			DDRD = direction;
     c20:	61 bb       	out	0x11, r22	; 17
     c22:	08 95       	ret

00000c24 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	80 f4       	brcc	.+32     	; 0xc48 <GPIO_writePort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	49 f0       	breq	.+18     	; 0xc3e <GPIO_writePort+0x1a>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <GPIO_writePort+0x16>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	39 f0       	breq	.+14     	; 0xc42 <GPIO_writePort+0x1e>
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	41 f4       	brne	.+16     	; 0xc48 <GPIO_writePort+0x24>
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <GPIO_writePort+0x22>
		{
		case PORTA_ID:
			PORTA = value;
     c3a:	6b bb       	out	0x1b, r22	; 27
     c3c:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
     c3e:	68 bb       	out	0x18, r22	; 24
     c40:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
     c42:	65 bb       	out	0x15, r22	; 21
     c44:	08 95       	ret
			break;
		case PORTD_ID:
			PORTD = value;
     c46:	62 bb       	out	0x12, r22	; 18
     c48:	08 95       	ret

00000c4a <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	88 f4       	brcc	.+34     	; 0xc70 <GPIO_readPort+0x26>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	49 f0       	breq	.+18     	; 0xc64 <GPIO_readPort+0x1a>
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	28 f0       	brcs	.+10     	; 0xc60 <GPIO_readPort+0x16>
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	39 f0       	breq	.+14     	; 0xc68 <GPIO_readPort+0x1e>
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	49 f4       	brne	.+18     	; 0xc70 <GPIO_readPort+0x26>
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <GPIO_readPort+0x22>
		{
		case PORTA_ID:
			value = PINA;
     c60:	89 b3       	in	r24, 0x19	; 25
     c62:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
     c64:	86 b3       	in	r24, 0x16	; 22
     c66:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
     c68:	83 b3       	in	r24, 0x13	; 19
     c6a:	08 95       	ret
			break;
		case PORTD_ID:
			value = PIND;
     c6c:	80 b3       	in	r24, 0x10	; 16
     c6e:	08 95       	ret
     c70:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
     c72:	08 95       	ret

00000c74 <Motors_init>:
 * Functions Definitions
 * ================================================== */

void Motors_init(void){

	DC_MOTOR_RIGHT_DDR |= (1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2);
     c74:	81 b3       	in	r24, 0x11	; 17
     c76:	83 60       	ori	r24, 0x03	; 3
     c78:	81 bb       	out	0x11, r24	; 17
	PWM_RIGHT_DDR |= (1 << PWM_RIGHT_PIN);
     c7a:	8c 9a       	sbi	0x11, 4	; 17
	DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     c7c:	82 b3       	in	r24, 0x12	; 18
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
     c80:	82 bb       	out	0x12, r24	; 18
	DC_MOTOR_LEFT_DDR |= (1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2);
     c82:	81 b3       	in	r24, 0x11	; 17
     c84:	8c 60       	ori	r24, 0x0C	; 12
     c86:	81 bb       	out	0x11, r24	; 17
	PWM_LEFT_DDR |= (1 << PWM_LEFT_PIN);
     c88:	8d 9a       	sbi	0x11, 5	; 17
	DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     c8a:	82 b3       	in	r24, 0x12	; 18
     c8c:	83 7f       	andi	r24, 0xF3	; 243
     c8e:	82 bb       	out	0x12, r24	; 18

	TCCR1A |= (1 << WGM10) | (1 << COM1B1) | (1 << COM1A1);
     c90:	8f b5       	in	r24, 0x2f	; 47
     c92:	81 6a       	ori	r24, 0xA1	; 161
     c94:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11);
     c96:	8e b5       	in	r24, 0x2e	; 46
     c98:	8a 60       	ori	r24, 0x0A	; 10
     c9a:	8e bd       	out	0x2e, r24	; 46
}
     c9c:	08 95       	ret

00000c9e <DC_RIGHT>:

/* --------- Control Right Motor --------- */
void DC_RIGHT(DcMotor_State state, uint8 speed)
{
	/* Control direction */
	switch(state)
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <DC_RIGHT+0x16>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	18 f0       	brcs	.+6      	; 0xcac <DC_RIGHT+0xe>
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	51 f4       	brne	.+20     	; 0xcbe <DC_RIGHT+0x20>
     caa:	07 c0       	rjmp	.+14     	; 0xcba <DC_RIGHT+0x1c>
	{
	case STOP:
		DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
     cac:	82 b3       	in	r24, 0x12	; 18
     cae:	8c 7f       	andi	r24, 0xFC	; 252
     cb0:	82 bb       	out	0x12, r24	; 18
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <DC_RIGHT+0x20>
		break;

	case CW:
		DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN1);
     cb4:	90 9a       	sbi	0x12, 0	; 18
		DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN2);
     cb6:	91 98       	cbi	0x12, 1	; 18
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DC_RIGHT+0x20>
		break;

	case A_CW:
		DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN2);
     cba:	91 9a       	sbi	0x12, 1	; 18
		DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN1);
     cbc:	90 98       	cbi	0x12, 0	; 18
		break;
	}

	/* Set speed (0 - 100%) */
	OCR1B = (uint8)((speed * 255) / 100);
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	68 9f       	mul	r22, r24
     cc2:	c0 01       	movw	r24, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	64 e6       	ldi	r22, 0x64	; 100
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divmodhi4>
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	79 bd       	out	0x29, r23	; 41
     cd2:	68 bd       	out	0x28, r22	; 40
}
     cd4:	08 95       	ret

00000cd6 <DC_LEFT>:

/* --------- Control Left Motor --------- */
void DC_LEFT(DcMotor_State state, uint8 speed)
{
	/* Control direction */
	switch(state)
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	49 f0       	breq	.+18     	; 0xcec <DC_LEFT+0x16>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	18 f0       	brcs	.+6      	; 0xce4 <DC_LEFT+0xe>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	51 f4       	brne	.+20     	; 0xcf6 <DC_LEFT+0x20>
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <DC_LEFT+0x1c>
	{
	case STOP:
		DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
     ce4:	82 b3       	in	r24, 0x12	; 18
     ce6:	83 7f       	andi	r24, 0xF3	; 243
     ce8:	82 bb       	out	0x12, r24	; 18
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <DC_LEFT+0x20>
		break;

	case CW:
		DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN1);
     cec:	92 9a       	sbi	0x12, 2	; 18
		DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN2);
     cee:	93 98       	cbi	0x12, 3	; 18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DC_LEFT+0x20>
		break;

	case A_CW:
		DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN2);
     cf2:	93 9a       	sbi	0x12, 3	; 18
		DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN1);
     cf4:	92 98       	cbi	0x12, 2	; 18
		break;
	}

	/* Set speed (0 - 100%) */
	OCR1A = (uint8)((speed * 255) / 100);
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	68 9f       	mul	r22, r24
     cfa:	c0 01       	movw	r24, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	64 e6       	ldi	r22, 0x64	; 100
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divmodhi4>
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	7b bd       	out	0x2b, r23	; 43
     d0a:	6a bd       	out	0x2a, r22	; 42
}
     d0c:	08 95       	ret

00000d0e <IR1_init>:
#include "IR_sensor.h"

// ==== INIT Functions ====
void IR1_init(void){ IR_DDR &= ~(1<<IR1_PIN); }
     d0e:	a0 98       	cbi	0x14, 0	; 20
     d10:	08 95       	ret

00000d12 <IR2_init>:
void IR2_init(void){ IR_DDR &= ~(1<<IR2_PIN); }
     d12:	a1 98       	cbi	0x14, 1	; 20
     d14:	08 95       	ret

00000d16 <IR3_init>:
void IR3_init(void){ IR_DDR &= ~(1<<IR3_PIN); }
     d16:	a2 98       	cbi	0x14, 2	; 20
     d18:	08 95       	ret

00000d1a <IR6_init>:
void IR6_init(void){ IR_DDR &= ~(1<<IR6_PIN); }
     d1a:	a5 98       	cbi	0x14, 5	; 20
     d1c:	08 95       	ret

00000d1e <IR7_init>:
void IR7_init(void){ IR_DDR &= ~(1<<IR7_PIN); }
     d1e:	a6 98       	cbi	0x14, 6	; 20
     d20:	08 95       	ret

00000d22 <IR8_init>:
void IR8_init(void){ IR_DDR &= ~(1<<IR8_PIN); }
     d22:	a7 98       	cbi	0x14, 7	; 20
     d24:	08 95       	ret

00000d26 <IR1_getState>:

// ==== GET STATE Functions ====
uint8 IR1_getState(void){ return (IR_PIN_REG & (1<<IR1_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d26:	83 b3       	in	r24, 0x13	; 19
     d28:	81 70       	andi	r24, 0x01	; 1
     d2a:	08 95       	ret

00000d2c <IR2_getState>:
uint8 IR2_getState(void){ return (IR_PIN_REG & (1<<IR2_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d2c:	83 b3       	in	r24, 0x13	; 19
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	96 95       	lsr	r25
     d32:	87 95       	ror	r24
     d34:	81 70       	andi	r24, 0x01	; 1
     d36:	08 95       	ret

00000d38 <IR3_getState>:
uint8 IR3_getState(void){ return (IR_PIN_REG & (1<<IR3_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d38:	83 b3       	in	r24, 0x13	; 19
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	96 95       	lsr	r25
     d3e:	87 95       	ror	r24
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	08 95       	ret

00000d48 <IR6_getState>:
uint8 IR6_getState(void){ return (IR_PIN_REG & (1<<IR6_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d48:	83 b3       	in	r24, 0x13	; 19
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	45 e0       	ldi	r20, 0x05	; 5
     d4e:	96 95       	lsr	r25
     d50:	87 95       	ror	r24
     d52:	4a 95       	dec	r20
     d54:	e1 f7       	brne	.-8      	; 0xd4e <IR6_getState+0x6>
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	08 95       	ret

00000d5a <IR7_getState>:
uint8 IR7_getState(void){ return (IR_PIN_REG & (1<<IR7_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d5a:	83 b3       	in	r24, 0x13	; 19
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	56 e0       	ldi	r21, 0x06	; 6
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	5a 95       	dec	r21
     d66:	e1 f7       	brne	.-8      	; 0xd60 <IR7_getState+0x6>
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	08 95       	ret

00000d6c <IR8_getState>:
uint8 IR8_getState(void){ return (IR_PIN_REG & (1<<IR8_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
     d6c:	83 b3       	in	r24, 0x13	; 19
     d6e:	88 1f       	adc	r24, r24
     d70:	88 27       	eor	r24, r24
     d72:	88 1f       	adc	r24, r24
     d74:	08 95       	ret

00000d76 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     d8c:	e0 ea       	ldi	r30, 0xA0	; 160
     d8e:	ee 2e       	mov	r14, r30
     d90:	ef e0       	ldi	r30, 0x0F	; 15
     d92:	fe 2e       	mov	r15, r30
     d94:	c7 01       	movw	r24, r14
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <LCD_displayCharacter+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     da4:	c7 01       	movw	r24, r14
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <LCD_displayCharacter+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
     daa:	0d 2d       	mov	r16, r13
     dac:	10 e0       	ldi	r17, 0x00	; 0
     dae:	a8 01       	movw	r20, r16
     db0:	40 71       	andi	r20, 0x10	; 16
     db2:	50 70       	andi	r21, 0x00	; 0
     db4:	74 e0       	ldi	r23, 0x04	; 4
     db6:	55 95       	asr	r21
     db8:	47 95       	ror	r20
     dba:	7a 95       	dec	r23
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <LCD_displayCharacter+0x40>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	63 e0       	ldi	r22, 0x03	; 3
     dc2:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
     dc6:	a8 01       	movw	r20, r16
     dc8:	40 72       	andi	r20, 0x20	; 32
     dca:	50 70       	andi	r21, 0x00	; 0
     dcc:	65 e0       	ldi	r22, 0x05	; 5
     dce:	55 95       	asr	r21
     dd0:	47 95       	ror	r20
     dd2:	6a 95       	dec	r22
     dd4:	e1 f7       	brne	.-8      	; 0xdce <LCD_displayCharacter+0x58>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	64 e0       	ldi	r22, 0x04	; 4
     dda:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
     dde:	a8 01       	movw	r20, r16
     de0:	40 74       	andi	r20, 0x40	; 64
     de2:	50 70       	andi	r21, 0x00	; 0
     de4:	36 e0       	ldi	r19, 0x06	; 6
     de6:	55 95       	asr	r21
     de8:	47 95       	ror	r20
     dea:	3a 95       	dec	r19
     dec:	e1 f7       	brne	.-8      	; 0xde6 <LCD_displayCharacter+0x70>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	65 e0       	ldi	r22, 0x05	; 5
     df2:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
     df6:	4d 2d       	mov	r20, r13
     df8:	44 1f       	adc	r20, r20
     dfa:	44 27       	eor	r20, r20
     dfc:	44 1f       	adc	r20, r20
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	66 e0       	ldi	r22, 0x06	; 6
     e02:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     e06:	c7 01       	movw	r24, r14
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <LCD_displayCharacter+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     e16:	c7 01       	movw	r24, r14
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <LCD_displayCharacter+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     e26:	c7 01       	movw	r24, r14
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <LCD_displayCharacter+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	d8 22       	and	r13, r24
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	4d 2d       	mov	r20, r13
     e36:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
     e3a:	a8 01       	movw	r20, r16
     e3c:	42 70       	andi	r20, 0x02	; 2
     e3e:	50 70       	andi	r21, 0x00	; 0
     e40:	55 95       	asr	r21
     e42:	47 95       	ror	r20
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
     e4c:	a8 01       	movw	r20, r16
     e4e:	44 70       	andi	r20, 0x04	; 4
     e50:	50 70       	andi	r21, 0x00	; 0
     e52:	55 95       	asr	r21
     e54:	47 95       	ror	r20
     e56:	55 95       	asr	r21
     e58:	47 95       	ror	r20
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	65 e0       	ldi	r22, 0x05	; 5
     e5e:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
     e62:	08 70       	andi	r16, 0x08	; 8
     e64:	10 70       	andi	r17, 0x00	; 0
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	15 95       	asr	r17
     e6a:	07 95       	ror	r16
     e6c:	8a 95       	dec	r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <LCD_displayCharacter+0xf2>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	66 e0       	ldi	r22, 0x06	; 6
     e74:	40 2f       	mov	r20, r16
     e76:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     e7a:	c7 01       	movw	r24, r14
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <LCD_displayCharacter+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     e8a:	c7 01       	movw	r24, r14
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <LCD_displayCharacter+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	08 95       	ret

00000e9c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <LCD_displayString+0x12>
	uint8 i = 0;
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
     ea8:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_displayCharacter>
		i++;
     eac:	1f 5f       	subi	r17, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     eae:	fe 01       	movw	r30, r28
     eb0:	e1 0f       	add	r30, r17
     eb2:	f1 1d       	adc	r31, r1
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	b9 f7       	brne	.-18     	; 0xea8 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	08 95       	ret

00000ec2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	60 97       	sbiw	r28, 0x10	; 16
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     eda:	8e 01       	movw	r16, r28
     edc:	0f 5f       	subi	r16, 0xFF	; 255
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	b8 01       	movw	r22, r16
     ee2:	4a e0       	ldi	r20, 0x0A	; 10
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	0e 94 13 0a 	call	0x1426	; 0x1426 <itoa>
   LCD_displayString(buff); /* Display the string */
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_displayString>
}
     ef0:	60 96       	adiw	r28, 0x10	; 16
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     f1c:	30 ea       	ldi	r19, 0xA0	; 160
     f1e:	e3 2e       	mov	r14, r19
     f20:	3f e0       	ldi	r19, 0x0F	; 15
     f22:	f3 2e       	mov	r15, r19
     f24:	c7 01       	movw	r24, r14
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <LCD_sendCommand+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     f34:	c7 01       	movw	r24, r14
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <LCD_sendCommand+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
     f3a:	0d 2d       	mov	r16, r13
     f3c:	10 e0       	ldi	r17, 0x00	; 0
     f3e:	a8 01       	movw	r20, r16
     f40:	40 71       	andi	r20, 0x10	; 16
     f42:	50 70       	andi	r21, 0x00	; 0
     f44:	24 e0       	ldi	r18, 0x04	; 4
     f46:	55 95       	asr	r21
     f48:	47 95       	ror	r20
     f4a:	2a 95       	dec	r18
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <LCD_sendCommand+0x40>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
     f56:	a8 01       	movw	r20, r16
     f58:	40 72       	andi	r20, 0x20	; 32
     f5a:	50 70       	andi	r21, 0x00	; 0
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	55 95       	asr	r21
     f60:	47 95       	ror	r20
     f62:	9a 95       	dec	r25
     f64:	e1 f7       	brne	.-8      	; 0xf5e <LCD_sendCommand+0x58>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	64 e0       	ldi	r22, 0x04	; 4
     f6a:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
     f6e:	a8 01       	movw	r20, r16
     f70:	40 74       	andi	r20, 0x40	; 64
     f72:	50 70       	andi	r21, 0x00	; 0
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	55 95       	asr	r21
     f78:	47 95       	ror	r20
     f7a:	8a 95       	dec	r24
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <LCD_sendCommand+0x70>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	65 e0       	ldi	r22, 0x05	; 5
     f82:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
     f86:	4d 2d       	mov	r20, r13
     f88:	44 1f       	adc	r20, r20
     f8a:	44 27       	eor	r20, r20
     f8c:	44 1f       	adc	r20, r20
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	66 e0       	ldi	r22, 0x06	; 6
     f92:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     f96:	c7 01       	movw	r24, r14
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <LCD_sendCommand+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     fa6:	c7 01       	movw	r24, r14
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <LCD_sendCommand+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
     fb6:	c7 01       	movw	r24, r14
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <LCD_sendCommand+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	d8 22       	and	r13, r24
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	63 e0       	ldi	r22, 0x03	; 3
     fc4:	4d 2d       	mov	r20, r13
     fc6:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
     fca:	a8 01       	movw	r20, r16
     fcc:	42 70       	andi	r20, 0x02	; 2
     fce:	50 70       	andi	r21, 0x00	; 0
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	64 e0       	ldi	r22, 0x04	; 4
     fd8:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
     fdc:	a8 01       	movw	r20, r16
     fde:	44 70       	andi	r20, 0x04	; 4
     fe0:	50 70       	andi	r21, 0x00	; 0
     fe2:	55 95       	asr	r21
     fe4:	47 95       	ror	r20
     fe6:	55 95       	asr	r21
     fe8:	47 95       	ror	r20
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	65 e0       	ldi	r22, 0x05	; 5
     fee:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
     ff2:	08 70       	andi	r16, 0x08	; 8
     ff4:	10 70       	andi	r17, 0x00	; 0
     ff6:	f3 e0       	ldi	r31, 0x03	; 3
     ff8:	15 95       	asr	r17
     ffa:	07 95       	ror	r16
     ffc:	fa 95       	dec	r31
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <LCD_sendCommand+0xf2>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	66 e0       	ldi	r22, 0x06	; 6
    1004:	40 2f       	mov	r20, r16
    1006:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
    100a:	c7 01       	movw	r24, r14
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <LCD_sendCommand+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	0e 94 6d 05 	call	0xada	; 0xada <GPIO_writePin>
    101a:	c7 01       	movw	r24, r14
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <LCD_sendCommand+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	08 95       	ret

0000102c <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
}
    1032:	08 95       	ret

00001034 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	39 f0       	breq	.+14     	; 0x1046 <LCD_moveCursor+0x12>
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	50 f0       	brcs	.+20     	; 0x1050 <LCD_moveCursor+0x1c>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	29 f0       	breq	.+10     	; 0x104a <LCD_moveCursor+0x16>
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	31 f4       	brne	.+12     	; 0x1050 <LCD_moveCursor+0x1c>
    1044:	04 c0       	rjmp	.+8      	; 0x104e <LCD_moveCursor+0x1a>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1046:	60 5c       	subi	r22, 0xC0	; 192
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <LCD_moveCursor+0x1c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    104a:	60 5f       	subi	r22, 0xF0	; 240
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <LCD_moveCursor+0x1c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    104e:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1050:	86 2f       	mov	r24, r22
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
}
    1058:	08 95       	ret

0000105a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1060:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1064:	c8 01       	movw	r24, r16
    1066:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_displayString>
}
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	62 e0       	ldi	r22, 0x02	; 2
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>
    1084:	88 ec       	ldi	r24, 0xC8	; 200
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	20 e9       	ldi	r18, 0x90	; 144
    108a:	31 e0       	ldi	r19, 0x01	; 1
    108c:	f9 01       	movw	r30, r18
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_init+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	d9 f7       	brne	.-10     	; 0x108c <LCD_init+0x1c>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	63 e0       	ldi	r22, 0x03	; 3
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	64 e0       	ldi	r22, 0x04	; 4
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	65 e0       	ldi	r22, 0x05	; 5
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	66 e0       	ldi	r22, 0x06	; 6
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    10be:	83 e3       	ldi	r24, 0x33	; 51
    10c0:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    10c4:	82 e3       	ldi	r24, 0x32	; 50
    10c6:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    10ca:	88 e2       	ldi	r24, 0x28	; 40
    10cc:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    10d0:	8c e0       	ldi	r24, 0x0C	; 12
    10d2:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
}
    10dc:	08 95       	ret

000010de <main>:





int main(void) {
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	69 97       	sbiw	r28, 0x19	; 25
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    1106:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_init>
	IR1_init(); IR2_init(); IR3_init();
    110a:	0e 94 87 06 	call	0xd0e	; 0xd0e <IR1_init>
    110e:	0e 94 89 06 	call	0xd12	; 0xd12 <IR2_init>
    1112:	0e 94 8b 06 	call	0xd16	; 0xd16 <IR3_init>
	IR6_init(); IR7_init(); IR8_init();
    1116:	0e 94 8d 06 	call	0xd1a	; 0xd1a <IR6_init>
    111a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <IR7_init>
    111e:	0e 94 91 06 	call	0xd22	; 0xd22 <IR8_init>
	Motors_init();
    1122:	0e 94 3a 06 	call	0xc74	; 0xc74 <Motors_init>
	ext_int0_init();
    1126:	0e 94 ed 04 	call	0x9da	; 0x9da <ext_int0_init>
	sei();
    112a:	78 94       	sei


	LCD_displayString("  EL-MAZARYTA");
    112c:	8f ea       	ldi	r24, 0xAF	; 175
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_displayString>
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	9e e4       	ldi	r25, 0x4E	; 78
    1138:	20 e9       	ldi	r18, 0x90	; 144
    113a:	31 e0       	ldi	r19, 0x01	; 1
    113c:	f9 01       	movw	r30, r18
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <main+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1144:	d9 f7       	brne	.-10     	; 0x113c <main+0x5e>
	_delay_ms(2000);
	LCD_clearScreen();
    1146:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_clearScreen>
    114a:	26 e2       	ldi	r18, 0x26	; 38
    114c:	34 e0       	ldi	r19, 0x04	; 4
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0b c0       	rjmp	.+22     	; 0x116a <main+0x8c>

	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
		for (uint8 y = 0; y < MAZE_SIZE; y++)
			maze[x][y] = 0;
    1154:	11 92       	st	Z+, r1
	_delay_ms(2000);
	LCD_clearScreen();

	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
		for (uint8 y = 0; y < MAZE_SIZE; y++)
    1156:	e2 17       	cp	r30, r18
    1158:	f3 07       	cpc	r31, r19
    115a:	e1 f7       	brne	.-8      	; 0x1154 <main+0x76>
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	9f 01       	movw	r18, r30
    1160:	20 5f       	subi	r18, 0xF0	; 240
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
	LCD_displayString("  EL-MAZARYTA");
	_delay_ms(2000);
	LCD_clearScreen();

	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
    1164:	80 31       	cpi	r24, 0x10	; 16
    1166:	91 05       	cpc	r25, r1
    1168:	49 f0       	breq	.+18     	; 0x117c <main+0x9e>
    116a:	fc 01       	movw	r30, r24
    116c:	74 e0       	ldi	r23, 0x04	; 4
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	7a 95       	dec	r23
    1174:	e1 f7       	brne	.-8      	; 0x116e <main+0x90>
    1176:	ea 5e       	subi	r30, 0xEA	; 234
    1178:	fb 4f       	sbci	r31, 0xFB	; 251
    117a:	ec cf       	rjmp	.-40     	; 0x1154 <main+0x76>
		for (uint8 y = 0; y < MAZE_SIZE; y++)
			maze[x][y] = 0;

	pos_x = 0; pos_y = 0; heading = 0;
    117c:	10 92 10 01 	sts	0x0110, r1
    1180:	10 92 0f 01 	sts	0x010F, r1
    1184:	10 92 12 01 	sts	0x0112, r1
    1188:	10 92 11 01 	sts	0x0111, r1
    118c:	10 92 13 01 	sts	0x0113, r1
	floodfill(); // حساب اولي (قد لايكون دقيق قبل اكتشاف جدران)
    1190:	0e 94 49 00 	call	0x92	; 0x92 <floodfill>
			floodfill();
		}

		// عرض Debug على LCD
		char buf[17];
		char *hd[4] = {"X+","Y-","X-","Y+"};
    1194:	7e 01       	movw	r14, r28
    1196:	08 94       	sec
    1198:	e1 1c       	adc	r14, r1
    119a:	f1 1c       	adc	r15, r1
		snprintf(buf, 17, "X:%2d Y:%2d %s", pos_x, pos_y, hd[heading]);
    119c:	8e 01       	movw	r16, r28
    119e:	07 5f       	subi	r16, 0xF7	; 247
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	61 e1       	ldi	r22, 0x11	; 17
    11a4:	86 2e       	mov	r8, r22
    11a6:	91 2c       	mov	r9, r1
    11a8:	5d eb       	ldi	r21, 0xBD	; 189
    11aa:	a5 2e       	mov	r10, r21
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	b5 2e       	mov	r11, r21
    11b0:	40 e9       	ldi	r20, 0x90	; 144
    11b2:	c4 2e       	mov	r12, r20
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	d4 2e       	mov	r13, r20
	pos_x = 0; pos_y = 0; heading = 0;
	floodfill(); // حساب اولي (قد لايكون دقيق قبل اكتشاف جدران)

	// حلقة الاستكشاف (sensing + planning via floodfill)
	while (1) {
		uint8 changed = update_walls();
    11b8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <update_walls>
		if (changed) {
    11bc:	88 23       	and	r24, r24
    11be:	11 f0       	breq	.+4      	; 0x11c4 <main+0xe6>
			floodfill(); // إذا تغيرت الجدران — أعِد حساب المسافات
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <floodfill>
		}

		// حدد الاتجاه التالي باستخدام الفلودفل
		uint8 next_dir = choose_next_direction();
    11c4:	0e 94 06 02 	call	0x40c	; 0x40c <choose_next_direction>

		// لو next_dir = current heading فهذا يعني امشي قدّام
		rotate_to_dir(next_dir);
    11c8:	0e 94 9e 02 	call	0x53c	; 0x53c <rotate_to_dir>
		// قبل المشي تأكد إن الخلية الامامية ليست جدار (استجابة فورية للسنسور)
		// نحسب الخلية الامامية
		int fx = pos_x + dx[heading];
    11cc:	e0 91 13 01 	lds	r30, 0x0113
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	df 01       	movw	r26, r30
    11d8:	aa 50       	subi	r26, 0x0A	; 10
    11da:	bf 4f       	sbci	r27, 0xFF	; 255
    11dc:	0d 90       	ld	r0, X+
    11de:	bc 91       	ld	r27, X
    11e0:	a0 2d       	mov	r26, r0
    11e2:	80 91 0f 01 	lds	r24, 0x010F
    11e6:	90 91 10 01 	lds	r25, 0x0110
    11ea:	a8 0f       	add	r26, r24
    11ec:	b9 1f       	adc	r27, r25
		int fy = pos_y + dy[heading];
    11ee:	80 91 11 01 	lds	r24, 0x0111
    11f2:	90 91 12 01 	lds	r25, 0x0112
    11f6:	e2 50       	subi	r30, 0x02	; 2
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	01 90       	ld	r0, Z+
    11fc:	f0 81       	ld	r31, Z
    11fe:	e0 2d       	mov	r30, r0
		if (fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE && maze[fx][fy] == 0) {
    1200:	a0 31       	cpi	r26, 0x10	; 16
    1202:	b1 05       	cpc	r27, r1
    1204:	b0 f4       	brcc	.+44     	; 0x1232 <main+0x154>
		// لو next_dir = current heading فهذا يعني امشي قدّام
		rotate_to_dir(next_dir);
		// قبل المشي تأكد إن الخلية الامامية ليست جدار (استجابة فورية للسنسور)
		// نحسب الخلية الامامية
		int fx = pos_x + dx[heading];
		int fy = pos_y + dy[heading];
    1206:	e8 0f       	add	r30, r24
    1208:	f9 1f       	adc	r31, r25
		if (fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE && maze[fx][fy] == 0) {
    120a:	f7 fd       	sbrc	r31, 7
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <main+0x154>
    120e:	e0 31       	cpi	r30, 0x10	; 16
    1210:	f1 05       	cpc	r31, r1
    1212:	7c f4       	brge	.+30     	; 0x1232 <main+0x154>
    1214:	24 e0       	ldi	r18, 0x04	; 4
    1216:	aa 0f       	add	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	2a 95       	dec	r18
    121c:	e1 f7       	brne	.-8      	; 0x1216 <main+0x138>
    121e:	ae 0f       	add	r26, r30
    1220:	bf 1f       	adc	r27, r31
    1222:	aa 5e       	subi	r26, 0xEA	; 234
    1224:	bb 4f       	sbci	r27, 0xFB	; 251
    1226:	8c 91       	ld	r24, X
    1228:	88 23       	and	r24, r24
    122a:	19 f4       	brne	.+6      	; 0x1232 <main+0x154>
			move_forward_one_cell();
    122c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <move_forward_one_cell>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <main+0x15c>
		} else {
			// لو أمامنا حيطه (ربما اكتشفته للتو) حدث الجدران وأعد الـ floodfill ثم استمر
			update_walls();
    1232:	0e 94 fd 03 	call	0x7fa	; 0x7fa <update_walls>
			floodfill();
    1236:	0e 94 49 00 	call	0x92	; 0x92 <floodfill>
		}

		// عرض Debug على LCD
		char buf[17];
		char *hd[4] = {"X+","Y-","X-","Y+"};
    123a:	d7 01       	movw	r26, r14
    123c:	e6 e0       	ldi	r30, 0x06	; 6
    123e:	f1 e0       	ldi	r31, 0x01	; 1
    1240:	88 e0       	ldi	r24, 0x08	; 8
    1242:	01 90       	ld	r0, Z+
    1244:	0d 92       	st	X+, r0
    1246:	81 50       	subi	r24, 0x01	; 1
    1248:	e1 f7       	brne	.-8      	; 0x1242 <main+0x164>
		snprintf(buf, 17, "X:%2d Y:%2d %s", pos_x, pos_y, hd[heading]);
    124a:	8d b7       	in	r24, 0x3d	; 61
    124c:	9e b7       	in	r25, 0x3e	; 62
    124e:	0c 97       	sbiw	r24, 0x0c	; 12
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	9e bf       	out	0x3e, r25	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	8d bf       	out	0x3d, r24	; 61
    125a:	ad b7       	in	r26, 0x3d	; 61
    125c:	be b7       	in	r27, 0x3e	; 62
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	ed b7       	in	r30, 0x3d	; 61
    1262:	fe b7       	in	r31, 0x3e	; 62
    1264:	12 83       	std	Z+2, r17	; 0x02
    1266:	01 83       	std	Z+1, r16	; 0x01
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	9c 92       	st	X, r9
    126c:	8e 92       	st	-X, r8
    126e:	12 97       	sbiw	r26, 0x02	; 2
    1270:	15 96       	adiw	r26, 0x05	; 5
    1272:	bc 92       	st	X, r11
    1274:	ae 92       	st	-X, r10
    1276:	14 97       	sbiw	r26, 0x04	; 4
    1278:	80 91 0f 01 	lds	r24, 0x010F
    127c:	90 91 10 01 	lds	r25, 0x0110
    1280:	17 96       	adiw	r26, 0x07	; 7
    1282:	9c 93       	st	X, r25
    1284:	8e 93       	st	-X, r24
    1286:	16 97       	sbiw	r26, 0x06	; 6
    1288:	80 91 11 01 	lds	r24, 0x0111
    128c:	90 91 12 01 	lds	r25, 0x0112
    1290:	19 96       	adiw	r26, 0x09	; 9
    1292:	9c 93       	st	X, r25
    1294:	8e 93       	st	-X, r24
    1296:	18 97       	sbiw	r26, 0x08	; 8
    1298:	e0 91 13 01 	lds	r30, 0x0113
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	ee 0d       	add	r30, r14
    12a4:	ff 1d       	adc	r31, r15
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	1b 96       	adiw	r26, 0x0b	; 11
    12ac:	9c 93       	st	X, r25
    12ae:	8e 93       	st	-X, r24
    12b0:	1a 97       	sbiw	r26, 0x0a	; 10
    12b2:	0e 94 34 0a 	call	0x1468	; 0x1468 <snprintf>
		LCD_displayStringRowColumn(1,0,buf);
    12b6:	8d b7       	in	r24, 0x3d	; 61
    12b8:	9e b7       	in	r25, 0x3e	; 62
    12ba:	0c 96       	adiw	r24, 0x0c	; 12
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	9e bf       	out	0x3e, r25	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	8d bf       	out	0x3d, r24	; 61
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	a8 01       	movw	r20, r16
    12cc:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
    12d0:	80 eb       	ldi	r24, 0xB0	; 176
    12d2:	94 e0       	ldi	r25, 0x04	; 4
    12d4:	f6 01       	movw	r30, r12
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <main+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <main+0x1f6>

		_delay_ms(120);

		// شرط التوقف عند الهدف (المراكز 7,7 7,8 8,7 8,8)
		if (((pos_x == 7 || pos_x == 8) && (pos_y == 7 || pos_y == 8)) && maze[pos_x][pos_y] == 0) {
    12de:	20 91 0f 01 	lds	r18, 0x010F
    12e2:	30 91 10 01 	lds	r19, 0x0110
    12e6:	c9 01       	movw	r24, r18
    12e8:	07 97       	sbiw	r24, 0x07	; 7
    12ea:	02 97       	sbiw	r24, 0x02	; 2
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <main+0x212>
    12ee:	64 cf       	rjmp	.-312    	; 0x11b8 <main+0xda>
    12f0:	60 91 11 01 	lds	r22, 0x0111
    12f4:	70 91 12 01 	lds	r23, 0x0112
    12f8:	cb 01       	movw	r24, r22
    12fa:	07 97       	sbiw	r24, 0x07	; 7
    12fc:	02 97       	sbiw	r24, 0x02	; 2
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <main+0x224>
    1300:	5b cf       	rjmp	.-330    	; 0x11b8 <main+0xda>
    1302:	f9 01       	movw	r30, r18
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	8a 95       	dec	r24
    130c:	e1 f7       	brne	.-8      	; 0x1306 <main+0x228>
    130e:	e6 0f       	add	r30, r22
    1310:	f7 1f       	adc	r31, r23
    1312:	ea 5e       	subi	r30, 0xEA	; 234
    1314:	fb 4f       	sbci	r31, 0xFB	; 251
    1316:	80 81       	ld	r24, Z
    1318:	88 23       	and	r24, r24
    131a:	09 f0       	breq	.+2      	; 0x131e <main+0x240>
    131c:	4d cf       	rjmp	.-358    	; 0x11b8 <main+0xda>
			// بعد الوصول — ابني المسار القصير بحسب floodfill
			build_shortest_path(pos_x, pos_y);
    131e:	c9 01       	movw	r24, r18
    1320:	0e 94 22 01 	call	0x244	; 0x244 <build_shortest_path>
			LCD_displayStringRowColumn(0,0,"      GOAL      ");
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	4c ec       	ldi	r20, 0xCC	; 204
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
			goal_reached = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 0e 01 	sts	0x010E, r24
    1336:	00 e9       	ldi	r16, 0x90	; 144
    1338:	11 e0       	ldi	r17, 0x01	; 1
	}

	// بعد الوصول — ننتظر ضغطة زر للريلاي عبر الـ INT0 (ISR يتعامل مع الأمر)
	while (1) {
		// ممكن تعرض حالة انتظار أو أي لوجيك آخر
		LCD_displayStringRowColumn(0,0,"PRESS REPLAY");
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	4d ed       	ldi	r20, 0xDD	; 221
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 2d 08 	call	0x105a	; 0x105a <LCD_displayStringRowColumn>
    1346:	88 e8       	ldi	r24, 0x88	; 136
    1348:	93 e1       	ldi	r25, 0x13	; 19
    134a:	f8 01       	movw	r30, r16
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <main+0x26e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	d9 f7       	brne	.-10     	; 0x134a <main+0x26c>
    1354:	f2 cf       	rjmp	.-28     	; 0x133a <main+0x25c>

00001356 <__mulsi3>:
    1356:	62 9f       	mul	r22, r18
    1358:	d0 01       	movw	r26, r0
    135a:	73 9f       	mul	r23, r19
    135c:	f0 01       	movw	r30, r0
    135e:	82 9f       	mul	r24, r18
    1360:	e0 0d       	add	r30, r0
    1362:	f1 1d       	adc	r31, r1
    1364:	64 9f       	mul	r22, r20
    1366:	e0 0d       	add	r30, r0
    1368:	f1 1d       	adc	r31, r1
    136a:	92 9f       	mul	r25, r18
    136c:	f0 0d       	add	r31, r0
    136e:	83 9f       	mul	r24, r19
    1370:	f0 0d       	add	r31, r0
    1372:	74 9f       	mul	r23, r20
    1374:	f0 0d       	add	r31, r0
    1376:	65 9f       	mul	r22, r21
    1378:	f0 0d       	add	r31, r0
    137a:	99 27       	eor	r25, r25
    137c:	72 9f       	mul	r23, r18
    137e:	b0 0d       	add	r27, r0
    1380:	e1 1d       	adc	r30, r1
    1382:	f9 1f       	adc	r31, r25
    1384:	63 9f       	mul	r22, r19
    1386:	b0 0d       	add	r27, r0
    1388:	e1 1d       	adc	r30, r1
    138a:	f9 1f       	adc	r31, r25
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	11 24       	eor	r1, r1
    1392:	08 95       	ret

00001394 <__divmodhi4>:
    1394:	97 fb       	bst	r25, 7
    1396:	09 2e       	mov	r0, r25
    1398:	07 26       	eor	r0, r23
    139a:	0a d0       	rcall	.+20     	; 0x13b0 <__divmodhi4_neg1>
    139c:	77 fd       	sbrc	r23, 7
    139e:	04 d0       	rcall	.+8      	; 0x13a8 <__divmodhi4_neg2>
    13a0:	2e d0       	rcall	.+92     	; 0x13fe <__udivmodhi4>
    13a2:	06 d0       	rcall	.+12     	; 0x13b0 <__divmodhi4_neg1>
    13a4:	00 20       	and	r0, r0
    13a6:	1a f4       	brpl	.+6      	; 0x13ae <__divmodhi4_exit>

000013a8 <__divmodhi4_neg2>:
    13a8:	70 95       	com	r23
    13aa:	61 95       	neg	r22
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255

000013ae <__divmodhi4_exit>:
    13ae:	08 95       	ret

000013b0 <__divmodhi4_neg1>:
    13b0:	f6 f7       	brtc	.-4      	; 0x13ae <__divmodhi4_exit>
    13b2:	90 95       	com	r25
    13b4:	81 95       	neg	r24
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	08 95       	ret

000013ba <__udivmodsi4>:
    13ba:	a1 e2       	ldi	r26, 0x21	; 33
    13bc:	1a 2e       	mov	r1, r26
    13be:	aa 1b       	sub	r26, r26
    13c0:	bb 1b       	sub	r27, r27
    13c2:	fd 01       	movw	r30, r26
    13c4:	0d c0       	rjmp	.+26     	; 0x13e0 <__udivmodsi4_ep>

000013c6 <__udivmodsi4_loop>:
    13c6:	aa 1f       	adc	r26, r26
    13c8:	bb 1f       	adc	r27, r27
    13ca:	ee 1f       	adc	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	a2 17       	cp	r26, r18
    13d0:	b3 07       	cpc	r27, r19
    13d2:	e4 07       	cpc	r30, r20
    13d4:	f5 07       	cpc	r31, r21
    13d6:	20 f0       	brcs	.+8      	; 0x13e0 <__udivmodsi4_ep>
    13d8:	a2 1b       	sub	r26, r18
    13da:	b3 0b       	sbc	r27, r19
    13dc:	e4 0b       	sbc	r30, r20
    13de:	f5 0b       	sbc	r31, r21

000013e0 <__udivmodsi4_ep>:
    13e0:	66 1f       	adc	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	1a 94       	dec	r1
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <__udivmodsi4_loop>
    13ec:	60 95       	com	r22
    13ee:	70 95       	com	r23
    13f0:	80 95       	com	r24
    13f2:	90 95       	com	r25
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	bd 01       	movw	r22, r26
    13fa:	cf 01       	movw	r24, r30
    13fc:	08 95       	ret

000013fe <__udivmodhi4>:
    13fe:	aa 1b       	sub	r26, r26
    1400:	bb 1b       	sub	r27, r27
    1402:	51 e1       	ldi	r21, 0x11	; 17
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <__udivmodhi4_ep>

00001406 <__udivmodhi4_loop>:
    1406:	aa 1f       	adc	r26, r26
    1408:	bb 1f       	adc	r27, r27
    140a:	a6 17       	cp	r26, r22
    140c:	b7 07       	cpc	r27, r23
    140e:	10 f0       	brcs	.+4      	; 0x1414 <__udivmodhi4_ep>
    1410:	a6 1b       	sub	r26, r22
    1412:	b7 0b       	sbc	r27, r23

00001414 <__udivmodhi4_ep>:
    1414:	88 1f       	adc	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	5a 95       	dec	r21
    141a:	a9 f7       	brne	.-22     	; 0x1406 <__udivmodhi4_loop>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	08 95       	ret

00001426 <itoa>:
    1426:	fb 01       	movw	r30, r22
    1428:	9f 01       	movw	r18, r30
    142a:	e8 94       	clt
    142c:	42 30       	cpi	r20, 0x02	; 2
    142e:	c4 f0       	brlt	.+48     	; 0x1460 <itoa+0x3a>
    1430:	45 32       	cpi	r20, 0x25	; 37
    1432:	b4 f4       	brge	.+44     	; 0x1460 <itoa+0x3a>
    1434:	4a 30       	cpi	r20, 0x0A	; 10
    1436:	29 f4       	brne	.+10     	; 0x1442 <itoa+0x1c>
    1438:	97 fb       	bst	r25, 7
    143a:	1e f4       	brtc	.+6      	; 0x1442 <itoa+0x1c>
    143c:	90 95       	com	r25
    143e:	81 95       	neg	r24
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	64 2f       	mov	r22, r20
    1444:	77 27       	eor	r23, r23
    1446:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__udivmodhi4>
    144a:	80 5d       	subi	r24, 0xD0	; 208
    144c:	8a 33       	cpi	r24, 0x3A	; 58
    144e:	0c f0       	brlt	.+2      	; 0x1452 <itoa+0x2c>
    1450:	89 5d       	subi	r24, 0xD9	; 217
    1452:	81 93       	st	Z+, r24
    1454:	cb 01       	movw	r24, r22
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	a1 f7       	brne	.-24     	; 0x1442 <itoa+0x1c>
    145a:	16 f4       	brtc	.+4      	; 0x1460 <itoa+0x3a>
    145c:	5d e2       	ldi	r21, 0x2D	; 45
    145e:	51 93       	st	Z+, r21
    1460:	10 82       	st	Z, r1
    1462:	c9 01       	movw	r24, r18
    1464:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <strrev>

00001468 <snprintf>:
    1468:	ae e0       	ldi	r26, 0x0E	; 14
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	fa e0       	ldi	r31, 0x0A	; 10
    1470:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__+0x1c>
    1474:	0d 89       	ldd	r16, Y+21	; 0x15
    1476:	1e 89       	ldd	r17, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	97 ff       	sbrs	r25, 7
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <snprintf+0x1c>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e8       	ldi	r25, 0x80	; 128
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	1a 83       	std	Y+2, r17	; 0x02
    148c:	09 83       	std	Y+1, r16	; 0x01
    148e:	86 e0       	ldi	r24, 0x06	; 6
    1490:	8c 83       	std	Y+4, r24	; 0x04
    1492:	9e 01       	movw	r18, r28
    1494:	25 5e       	subi	r18, 0xE5	; 229
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	69 8d       	ldd	r22, Y+25	; 0x19
    149e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <vfprintf>
    14a6:	4d 81       	ldd	r20, Y+5	; 0x05
    14a8:	5e 81       	ldd	r21, Y+6	; 0x06
    14aa:	57 fd       	sbrc	r21, 7
    14ac:	0a c0       	rjmp	.+20     	; 0x14c2 <snprintf+0x5a>
    14ae:	2f 81       	ldd	r18, Y+7	; 0x07
    14b0:	38 85       	ldd	r19, Y+8	; 0x08
    14b2:	42 17       	cp	r20, r18
    14b4:	53 07       	cpc	r21, r19
    14b6:	0c f4       	brge	.+2      	; 0x14ba <snprintf+0x52>
    14b8:	9a 01       	movw	r18, r20
    14ba:	02 0f       	add	r16, r18
    14bc:	13 1f       	adc	r17, r19
    14be:	f8 01       	movw	r30, r16
    14c0:	10 82       	st	Z, r1
    14c2:	2e 96       	adiw	r28, 0x0e	; 14
    14c4:	e4 e0       	ldi	r30, 0x04	; 4
    14c6:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__+0x1c>

000014ca <vfprintf>:
    14ca:	ab e0       	ldi	r26, 0x0B	; 11
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e6       	ldi	r30, 0x6B	; 107
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__prologue_saves__>
    14d6:	3c 01       	movw	r6, r24
    14d8:	2b 01       	movw	r4, r22
    14da:	5a 01       	movw	r10, r20
    14dc:	fc 01       	movw	r30, r24
    14de:	17 82       	std	Z+7, r1	; 0x07
    14e0:	16 82       	std	Z+6, r1	; 0x06
    14e2:	83 81       	ldd	r24, Z+3	; 0x03
    14e4:	81 fd       	sbrc	r24, 1
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <vfprintf+0x24>
    14e8:	6f ef       	ldi	r22, 0xFF	; 255
    14ea:	7f ef       	ldi	r23, 0xFF	; 255
    14ec:	c6 c1       	rjmp	.+908    	; 0x187a <vfprintf+0x3b0>
    14ee:	9a e0       	ldi	r25, 0x0A	; 10
    14f0:	89 2e       	mov	r8, r25
    14f2:	1e 01       	movw	r2, r28
    14f4:	08 94       	sec
    14f6:	21 1c       	adc	r2, r1
    14f8:	31 1c       	adc	r3, r1
    14fa:	f3 01       	movw	r30, r6
    14fc:	23 81       	ldd	r18, Z+3	; 0x03
    14fe:	f2 01       	movw	r30, r4
    1500:	23 fd       	sbrc	r18, 3
    1502:	85 91       	lpm	r24, Z+
    1504:	23 ff       	sbrs	r18, 3
    1506:	81 91       	ld	r24, Z+
    1508:	2f 01       	movw	r4, r30
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <vfprintf+0x46>
    150e:	b2 c1       	rjmp	.+868    	; 0x1874 <vfprintf+0x3aa>
    1510:	85 32       	cpi	r24, 0x25	; 37
    1512:	39 f4       	brne	.+14     	; 0x1522 <vfprintf+0x58>
    1514:	23 fd       	sbrc	r18, 3
    1516:	85 91       	lpm	r24, Z+
    1518:	23 ff       	sbrs	r18, 3
    151a:	81 91       	ld	r24, Z+
    151c:	2f 01       	movw	r4, r30
    151e:	85 32       	cpi	r24, 0x25	; 37
    1520:	29 f4       	brne	.+10     	; 0x152c <vfprintf+0x62>
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	b3 01       	movw	r22, r6
    1526:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    152a:	e7 cf       	rjmp	.-50     	; 0x14fa <vfprintf+0x30>
    152c:	98 2f       	mov	r25, r24
    152e:	ff 24       	eor	r15, r15
    1530:	ee 24       	eor	r14, r14
    1532:	99 24       	eor	r9, r9
    1534:	ff e1       	ldi	r31, 0x1F	; 31
    1536:	ff 15       	cp	r31, r15
    1538:	d0 f0       	brcs	.+52     	; 0x156e <vfprintf+0xa4>
    153a:	9b 32       	cpi	r25, 0x2B	; 43
    153c:	69 f0       	breq	.+26     	; 0x1558 <vfprintf+0x8e>
    153e:	9c 32       	cpi	r25, 0x2C	; 44
    1540:	28 f4       	brcc	.+10     	; 0x154c <vfprintf+0x82>
    1542:	90 32       	cpi	r25, 0x20	; 32
    1544:	59 f0       	breq	.+22     	; 0x155c <vfprintf+0x92>
    1546:	93 32       	cpi	r25, 0x23	; 35
    1548:	91 f4       	brne	.+36     	; 0x156e <vfprintf+0xa4>
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <vfprintf+0x9e>
    154c:	9d 32       	cpi	r25, 0x2D	; 45
    154e:	49 f0       	breq	.+18     	; 0x1562 <vfprintf+0x98>
    1550:	90 33       	cpi	r25, 0x30	; 48
    1552:	69 f4       	brne	.+26     	; 0x156e <vfprintf+0xa4>
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	24 c0       	rjmp	.+72     	; 0x15a0 <vfprintf+0xd6>
    1558:	52 e0       	ldi	r21, 0x02	; 2
    155a:	f5 2a       	or	r15, r21
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	f8 2a       	or	r15, r24
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <vfprintf+0xe8>
    1562:	98 e0       	ldi	r25, 0x08	; 8
    1564:	f9 2a       	or	r15, r25
    1566:	25 c0       	rjmp	.+74     	; 0x15b2 <vfprintf+0xe8>
    1568:	e0 e1       	ldi	r30, 0x10	; 16
    156a:	fe 2a       	or	r15, r30
    156c:	22 c0       	rjmp	.+68     	; 0x15b2 <vfprintf+0xe8>
    156e:	f7 fc       	sbrc	r15, 7
    1570:	29 c0       	rjmp	.+82     	; 0x15c4 <vfprintf+0xfa>
    1572:	89 2f       	mov	r24, r25
    1574:	80 53       	subi	r24, 0x30	; 48
    1576:	8a 30       	cpi	r24, 0x0A	; 10
    1578:	70 f4       	brcc	.+28     	; 0x1596 <vfprintf+0xcc>
    157a:	f6 fe       	sbrs	r15, 6
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <vfprintf+0xbe>
    157e:	98 9c       	mul	r9, r8
    1580:	90 2c       	mov	r9, r0
    1582:	11 24       	eor	r1, r1
    1584:	98 0e       	add	r9, r24
    1586:	15 c0       	rjmp	.+42     	; 0x15b2 <vfprintf+0xe8>
    1588:	e8 9c       	mul	r14, r8
    158a:	e0 2c       	mov	r14, r0
    158c:	11 24       	eor	r1, r1
    158e:	e8 0e       	add	r14, r24
    1590:	f0 e2       	ldi	r31, 0x20	; 32
    1592:	ff 2a       	or	r15, r31
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <vfprintf+0xe8>
    1596:	9e 32       	cpi	r25, 0x2E	; 46
    1598:	29 f4       	brne	.+10     	; 0x15a4 <vfprintf+0xda>
    159a:	f6 fc       	sbrc	r15, 6
    159c:	6b c1       	rjmp	.+726    	; 0x1874 <vfprintf+0x3aa>
    159e:	40 e4       	ldi	r20, 0x40	; 64
    15a0:	f4 2a       	or	r15, r20
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <vfprintf+0xe8>
    15a4:	9c 36       	cpi	r25, 0x6C	; 108
    15a6:	19 f4       	brne	.+6      	; 0x15ae <vfprintf+0xe4>
    15a8:	50 e8       	ldi	r21, 0x80	; 128
    15aa:	f5 2a       	or	r15, r21
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <vfprintf+0xe8>
    15ae:	98 36       	cpi	r25, 0x68	; 104
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <vfprintf+0xfa>
    15b2:	f2 01       	movw	r30, r4
    15b4:	23 fd       	sbrc	r18, 3
    15b6:	95 91       	lpm	r25, Z+
    15b8:	23 ff       	sbrs	r18, 3
    15ba:	91 91       	ld	r25, Z+
    15bc:	2f 01       	movw	r4, r30
    15be:	99 23       	and	r25, r25
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <vfprintf+0xfa>
    15c2:	b8 cf       	rjmp	.-144    	; 0x1534 <vfprintf+0x6a>
    15c4:	89 2f       	mov	r24, r25
    15c6:	85 54       	subi	r24, 0x45	; 69
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	18 f0       	brcs	.+6      	; 0x15d2 <vfprintf+0x108>
    15cc:	80 52       	subi	r24, 0x20	; 32
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	38 f4       	brcc	.+14     	; 0x15e0 <vfprintf+0x116>
    15d2:	44 e0       	ldi	r20, 0x04	; 4
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	a4 0e       	add	r10, r20
    15d8:	b5 1e       	adc	r11, r21
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	59 83       	std	Y+1, r21	; 0x01
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <vfprintf+0x134>
    15e0:	93 36       	cpi	r25, 0x63	; 99
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <vfprintf+0x126>
    15e4:	93 37       	cpi	r25, 0x73	; 115
    15e6:	79 f0       	breq	.+30     	; 0x1606 <vfprintf+0x13c>
    15e8:	93 35       	cpi	r25, 0x53	; 83
    15ea:	09 f0       	breq	.+2      	; 0x15ee <vfprintf+0x124>
    15ec:	56 c0       	rjmp	.+172    	; 0x169a <vfprintf+0x1d0>
    15ee:	20 c0       	rjmp	.+64     	; 0x1630 <vfprintf+0x166>
    15f0:	f5 01       	movw	r30, r10
    15f2:	80 81       	ld	r24, Z
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	42 e0       	ldi	r20, 0x02	; 2
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	a4 0e       	add	r10, r20
    15fc:	b5 1e       	adc	r11, r21
    15fe:	61 01       	movw	r12, r2
    1600:	01 e0       	ldi	r16, 0x01	; 1
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	12 c0       	rjmp	.+36     	; 0x162a <vfprintf+0x160>
    1606:	f5 01       	movw	r30, r10
    1608:	c0 80       	ld	r12, Z
    160a:	d1 80       	ldd	r13, Z+1	; 0x01
    160c:	f6 fc       	sbrc	r15, 6
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <vfprintf+0x14c>
    1610:	6f ef       	ldi	r22, 0xFF	; 255
    1612:	7f ef       	ldi	r23, 0xFF	; 255
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x150>
    1616:	69 2d       	mov	r22, r9
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	42 e0       	ldi	r20, 0x02	; 2
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	a4 0e       	add	r10, r20
    1620:	b5 1e       	adc	r11, r21
    1622:	c6 01       	movw	r24, r12
    1624:	0e 94 4d 0c 	call	0x189a	; 0x189a <strnlen>
    1628:	8c 01       	movw	r16, r24
    162a:	5f e7       	ldi	r21, 0x7F	; 127
    162c:	f5 22       	and	r15, r21
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <vfprintf+0x18e>
    1630:	f5 01       	movw	r30, r10
    1632:	c0 80       	ld	r12, Z
    1634:	d1 80       	ldd	r13, Z+1	; 0x01
    1636:	f6 fc       	sbrc	r15, 6
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <vfprintf+0x176>
    163a:	6f ef       	ldi	r22, 0xFF	; 255
    163c:	7f ef       	ldi	r23, 0xFF	; 255
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <vfprintf+0x17a>
    1640:	69 2d       	mov	r22, r9
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	42 e0       	ldi	r20, 0x02	; 2
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	a4 0e       	add	r10, r20
    164a:	b5 1e       	adc	r11, r21
    164c:	c6 01       	movw	r24, r12
    164e:	0e 94 42 0c 	call	0x1884	; 0x1884 <strnlen_P>
    1652:	8c 01       	movw	r16, r24
    1654:	50 e8       	ldi	r21, 0x80	; 128
    1656:	f5 2a       	or	r15, r21
    1658:	f3 fe       	sbrs	r15, 3
    165a:	07 c0       	rjmp	.+14     	; 0x166a <vfprintf+0x1a0>
    165c:	1a c0       	rjmp	.+52     	; 0x1692 <vfprintf+0x1c8>
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	b3 01       	movw	r22, r6
    1664:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    1668:	ea 94       	dec	r14
    166a:	8e 2d       	mov	r24, r14
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	08 17       	cp	r16, r24
    1670:	19 07       	cpc	r17, r25
    1672:	a8 f3       	brcs	.-22     	; 0x165e <vfprintf+0x194>
    1674:	0e c0       	rjmp	.+28     	; 0x1692 <vfprintf+0x1c8>
    1676:	f6 01       	movw	r30, r12
    1678:	f7 fc       	sbrc	r15, 7
    167a:	85 91       	lpm	r24, Z+
    167c:	f7 fe       	sbrs	r15, 7
    167e:	81 91       	ld	r24, Z+
    1680:	6f 01       	movw	r12, r30
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b3 01       	movw	r22, r6
    1686:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    168a:	e1 10       	cpse	r14, r1
    168c:	ea 94       	dec	r14
    168e:	01 50       	subi	r16, 0x01	; 1
    1690:	10 40       	sbci	r17, 0x00	; 0
    1692:	01 15       	cp	r16, r1
    1694:	11 05       	cpc	r17, r1
    1696:	79 f7       	brne	.-34     	; 0x1676 <vfprintf+0x1ac>
    1698:	ea c0       	rjmp	.+468    	; 0x186e <vfprintf+0x3a4>
    169a:	94 36       	cpi	r25, 0x64	; 100
    169c:	11 f0       	breq	.+4      	; 0x16a2 <vfprintf+0x1d8>
    169e:	99 36       	cpi	r25, 0x69	; 105
    16a0:	69 f5       	brne	.+90     	; 0x16fc <vfprintf+0x232>
    16a2:	f7 fe       	sbrs	r15, 7
    16a4:	08 c0       	rjmp	.+16     	; 0x16b6 <vfprintf+0x1ec>
    16a6:	f5 01       	movw	r30, r10
    16a8:	20 81       	ld	r18, Z
    16aa:	31 81       	ldd	r19, Z+1	; 0x01
    16ac:	42 81       	ldd	r20, Z+2	; 0x02
    16ae:	53 81       	ldd	r21, Z+3	; 0x03
    16b0:	84 e0       	ldi	r24, 0x04	; 4
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <vfprintf+0x200>
    16b6:	f5 01       	movw	r30, r10
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	9c 01       	movw	r18, r24
    16be:	44 27       	eor	r20, r20
    16c0:	37 fd       	sbrc	r19, 7
    16c2:	40 95       	com	r20
    16c4:	54 2f       	mov	r21, r20
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a8 0e       	add	r10, r24
    16cc:	b9 1e       	adc	r11, r25
    16ce:	9f e6       	ldi	r25, 0x6F	; 111
    16d0:	f9 22       	and	r15, r25
    16d2:	57 ff       	sbrs	r21, 7
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x21e>
    16d6:	50 95       	com	r21
    16d8:	40 95       	com	r20
    16da:	30 95       	com	r19
    16dc:	21 95       	neg	r18
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	4f 4f       	sbci	r20, 0xFF	; 255
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	e0 e8       	ldi	r30, 0x80	; 128
    16e6:	fe 2a       	or	r15, r30
    16e8:	ca 01       	movw	r24, r20
    16ea:	b9 01       	movw	r22, r18
    16ec:	a1 01       	movw	r20, r2
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	0e 94 94 0c 	call	0x1928	; 0x1928 <__ultoa_invert>
    16f6:	d8 2e       	mov	r13, r24
    16f8:	d2 18       	sub	r13, r2
    16fa:	40 c0       	rjmp	.+128    	; 0x177c <vfprintf+0x2b2>
    16fc:	95 37       	cpi	r25, 0x75	; 117
    16fe:	29 f4       	brne	.+10     	; 0x170a <vfprintf+0x240>
    1700:	1f 2d       	mov	r17, r15
    1702:	1f 7e       	andi	r17, 0xEF	; 239
    1704:	2a e0       	ldi	r18, 0x0A	; 10
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	1d c0       	rjmp	.+58     	; 0x1744 <vfprintf+0x27a>
    170a:	1f 2d       	mov	r17, r15
    170c:	19 7f       	andi	r17, 0xF9	; 249
    170e:	9f 36       	cpi	r25, 0x6F	; 111
    1710:	61 f0       	breq	.+24     	; 0x172a <vfprintf+0x260>
    1712:	90 37       	cpi	r25, 0x70	; 112
    1714:	20 f4       	brcc	.+8      	; 0x171e <vfprintf+0x254>
    1716:	98 35       	cpi	r25, 0x58	; 88
    1718:	09 f0       	breq	.+2      	; 0x171c <vfprintf+0x252>
    171a:	ac c0       	rjmp	.+344    	; 0x1874 <vfprintf+0x3aa>
    171c:	0f c0       	rjmp	.+30     	; 0x173c <vfprintf+0x272>
    171e:	90 37       	cpi	r25, 0x70	; 112
    1720:	39 f0       	breq	.+14     	; 0x1730 <vfprintf+0x266>
    1722:	98 37       	cpi	r25, 0x78	; 120
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x25e>
    1726:	a6 c0       	rjmp	.+332    	; 0x1874 <vfprintf+0x3aa>
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <vfprintf+0x268>
    172a:	28 e0       	ldi	r18, 0x08	; 8
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <vfprintf+0x27a>
    1730:	10 61       	ori	r17, 0x10	; 16
    1732:	14 fd       	sbrc	r17, 4
    1734:	14 60       	ori	r17, 0x04	; 4
    1736:	20 e1       	ldi	r18, 0x10	; 16
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <vfprintf+0x27a>
    173c:	14 fd       	sbrc	r17, 4
    173e:	16 60       	ori	r17, 0x06	; 6
    1740:	20 e1       	ldi	r18, 0x10	; 16
    1742:	32 e0       	ldi	r19, 0x02	; 2
    1744:	17 ff       	sbrs	r17, 7
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <vfprintf+0x28e>
    1748:	f5 01       	movw	r30, r10
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	44 e0       	ldi	r20, 0x04	; 4
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0x29e>
    1758:	f5 01       	movw	r30, r10
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	bc 01       	movw	r22, r24
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	42 e0       	ldi	r20, 0x02	; 2
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	a4 0e       	add	r10, r20
    176a:	b5 1e       	adc	r11, r21
    176c:	a1 01       	movw	r20, r2
    176e:	0e 94 94 0c 	call	0x1928	; 0x1928 <__ultoa_invert>
    1772:	d8 2e       	mov	r13, r24
    1774:	d2 18       	sub	r13, r2
    1776:	8f e7       	ldi	r24, 0x7F	; 127
    1778:	f8 2e       	mov	r15, r24
    177a:	f1 22       	and	r15, r17
    177c:	f6 fe       	sbrs	r15, 6
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <vfprintf+0x2cc>
    1780:	5e ef       	ldi	r21, 0xFE	; 254
    1782:	f5 22       	and	r15, r21
    1784:	d9 14       	cp	r13, r9
    1786:	38 f4       	brcc	.+14     	; 0x1796 <vfprintf+0x2cc>
    1788:	f4 fe       	sbrs	r15, 4
    178a:	07 c0       	rjmp	.+14     	; 0x179a <vfprintf+0x2d0>
    178c:	f2 fc       	sbrc	r15, 2
    178e:	05 c0       	rjmp	.+10     	; 0x179a <vfprintf+0x2d0>
    1790:	8f ee       	ldi	r24, 0xEF	; 239
    1792:	f8 22       	and	r15, r24
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x2d0>
    1796:	1d 2d       	mov	r17, r13
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vfprintf+0x2d2>
    179a:	19 2d       	mov	r17, r9
    179c:	f4 fe       	sbrs	r15, 4
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <vfprintf+0x2f0>
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 0d       	add	r30, r13
    17a4:	f1 1d       	adc	r31, r1
    17a6:	80 81       	ld	r24, Z
    17a8:	80 33       	cpi	r24, 0x30	; 48
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <vfprintf+0x2e8>
    17ac:	99 ee       	ldi	r25, 0xE9	; 233
    17ae:	f9 22       	and	r15, r25
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x2f8>
    17b2:	1f 5f       	subi	r17, 0xFF	; 255
    17b4:	f2 fe       	sbrs	r15, 2
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <vfprintf+0x2f8>
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <vfprintf+0x2f6>
    17ba:	8f 2d       	mov	r24, r15
    17bc:	86 78       	andi	r24, 0x86	; 134
    17be:	09 f0       	breq	.+2      	; 0x17c2 <vfprintf+0x2f8>
    17c0:	1f 5f       	subi	r17, 0xFF	; 255
    17c2:	0f 2d       	mov	r16, r15
    17c4:	f3 fc       	sbrc	r15, 3
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <vfprintf+0x326>
    17c8:	f0 fe       	sbrs	r15, 0
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <vfprintf+0x320>
    17cc:	1e 15       	cp	r17, r14
    17ce:	10 f0       	brcs	.+4      	; 0x17d4 <vfprintf+0x30a>
    17d0:	9d 2c       	mov	r9, r13
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <vfprintf+0x320>
    17d4:	9d 2c       	mov	r9, r13
    17d6:	9e 0c       	add	r9, r14
    17d8:	91 1a       	sub	r9, r17
    17da:	1e 2d       	mov	r17, r14
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <vfprintf+0x320>
    17de:	80 e2       	ldi	r24, 0x20	; 32
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	b3 01       	movw	r22, r6
    17e4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    17e8:	1f 5f       	subi	r17, 0xFF	; 255
    17ea:	1e 15       	cp	r17, r14
    17ec:	c0 f3       	brcs	.-16     	; 0x17de <vfprintf+0x314>
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <vfprintf+0x32e>
    17f0:	1e 15       	cp	r17, r14
    17f2:	10 f4       	brcc	.+4      	; 0x17f8 <vfprintf+0x32e>
    17f4:	e1 1a       	sub	r14, r17
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <vfprintf+0x330>
    17f8:	ee 24       	eor	r14, r14
    17fa:	04 ff       	sbrs	r16, 4
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <vfprintf+0x352>
    17fe:	80 e3       	ldi	r24, 0x30	; 48
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	b3 01       	movw	r22, r6
    1804:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    1808:	02 ff       	sbrs	r16, 2
    180a:	1d c0       	rjmp	.+58     	; 0x1846 <vfprintf+0x37c>
    180c:	01 fd       	sbrc	r16, 1
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <vfprintf+0x34c>
    1810:	88 e7       	ldi	r24, 0x78	; 120
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <vfprintf+0x368>
    1816:	88 e5       	ldi	r24, 0x58	; 88
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <vfprintf+0x368>
    181c:	80 2f       	mov	r24, r16
    181e:	86 78       	andi	r24, 0x86	; 134
    1820:	91 f0       	breq	.+36     	; 0x1846 <vfprintf+0x37c>
    1822:	01 ff       	sbrs	r16, 1
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x360>
    1826:	8b e2       	ldi	r24, 0x2B	; 43
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x362>
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	f7 fc       	sbrc	r15, 7
    182e:	8d e2       	ldi	r24, 0x2D	; 45
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	b3 01       	movw	r22, r6
    1834:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x37c>
    183a:	80 e3       	ldi	r24, 0x30	; 48
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b3 01       	movw	r22, r6
    1840:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    1844:	9a 94       	dec	r9
    1846:	d9 14       	cp	r13, r9
    1848:	c0 f3       	brcs	.-16     	; 0x183a <vfprintf+0x370>
    184a:	da 94       	dec	r13
    184c:	f1 01       	movw	r30, r2
    184e:	ed 0d       	add	r30, r13
    1850:	f1 1d       	adc	r31, r1
    1852:	80 81       	ld	r24, Z
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	b3 01       	movw	r22, r6
    1858:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    185c:	dd 20       	and	r13, r13
    185e:	a9 f7       	brne	.-22     	; 0x184a <vfprintf+0x380>
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x3a4>
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b3 01       	movw	r22, r6
    1868:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fputc>
    186c:	ea 94       	dec	r14
    186e:	ee 20       	and	r14, r14
    1870:	c1 f7       	brne	.-16     	; 0x1862 <vfprintf+0x398>
    1872:	43 ce       	rjmp	.-890    	; 0x14fa <vfprintf+0x30>
    1874:	f3 01       	movw	r30, r6
    1876:	66 81       	ldd	r22, Z+6	; 0x06
    1878:	77 81       	ldd	r23, Z+7	; 0x07
    187a:	cb 01       	movw	r24, r22
    187c:	2b 96       	adiw	r28, 0x0b	; 11
    187e:	e2 e1       	ldi	r30, 0x12	; 18
    1880:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__epilogue_restores__>

00001884 <strnlen_P>:
    1884:	fc 01       	movw	r30, r24
    1886:	05 90       	lpm	r0, Z+
    1888:	61 50       	subi	r22, 0x01	; 1
    188a:	70 40       	sbci	r23, 0x00	; 0
    188c:	01 10       	cpse	r0, r1
    188e:	d8 f7       	brcc	.-10     	; 0x1886 <strnlen_P+0x2>
    1890:	80 95       	com	r24
    1892:	90 95       	com	r25
    1894:	8e 0f       	add	r24, r30
    1896:	9f 1f       	adc	r25, r31
    1898:	08 95       	ret

0000189a <strnlen>:
    189a:	fc 01       	movw	r30, r24
    189c:	61 50       	subi	r22, 0x01	; 1
    189e:	70 40       	sbci	r23, 0x00	; 0
    18a0:	01 90       	ld	r0, Z+
    18a2:	01 10       	cpse	r0, r1
    18a4:	d8 f7       	brcc	.-10     	; 0x189c <strnlen+0x2>
    18a6:	80 95       	com	r24
    18a8:	90 95       	com	r25
    18aa:	8e 0f       	add	r24, r30
    18ac:	9f 1f       	adc	r25, r31
    18ae:	08 95       	ret

000018b0 <strrev>:
    18b0:	dc 01       	movw	r26, r24
    18b2:	fc 01       	movw	r30, r24
    18b4:	67 2f       	mov	r22, r23
    18b6:	71 91       	ld	r23, Z+
    18b8:	77 23       	and	r23, r23
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <strrev+0x4>
    18bc:	32 97       	sbiw	r30, 0x02	; 2
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <strrev+0x18>
    18c0:	7c 91       	ld	r23, X
    18c2:	6d 93       	st	X+, r22
    18c4:	70 83       	st	Z, r23
    18c6:	62 91       	ld	r22, -Z
    18c8:	ae 17       	cp	r26, r30
    18ca:	bf 07       	cpc	r27, r31
    18cc:	c8 f3       	brcs	.-14     	; 0x18c0 <strrev+0x10>
    18ce:	08 95       	ret

000018d0 <fputc>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	8c 01       	movw	r16, r24
    18da:	eb 01       	movw	r28, r22
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	81 ff       	sbrs	r24, 1
    18e0:	1b c0       	rjmp	.+54     	; 0x1918 <fputc+0x48>
    18e2:	82 ff       	sbrs	r24, 2
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <fputc+0x30>
    18e6:	2e 81       	ldd	r18, Y+6	; 0x06
    18e8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	28 17       	cp	r18, r24
    18f0:	39 07       	cpc	r19, r25
    18f2:	64 f4       	brge	.+24     	; 0x190c <fputc+0x3c>
    18f4:	e8 81       	ld	r30, Y
    18f6:	f9 81       	ldd	r31, Y+1	; 0x01
    18f8:	01 93       	st	Z+, r16
    18fa:	f9 83       	std	Y+1, r31	; 0x01
    18fc:	e8 83       	st	Y, r30
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <fputc+0x3c>
    1900:	e8 85       	ldd	r30, Y+8	; 0x08
    1902:	f9 85       	ldd	r31, Y+9	; 0x09
    1904:	80 2f       	mov	r24, r16
    1906:	09 95       	icall
    1908:	89 2b       	or	r24, r25
    190a:	31 f4       	brne	.+12     	; 0x1918 <fputc+0x48>
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	9f 81       	ldd	r25, Y+7	; 0x07
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	9f 83       	std	Y+7, r25	; 0x07
    1914:	8e 83       	std	Y+6, r24	; 0x06
    1916:	02 c0       	rjmp	.+4      	; 0x191c <fputc+0x4c>
    1918:	0f ef       	ldi	r16, 0xFF	; 255
    191a:	1f ef       	ldi	r17, 0xFF	; 255
    191c:	c8 01       	movw	r24, r16
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <__ultoa_invert>:
    1928:	fa 01       	movw	r30, r20
    192a:	aa 27       	eor	r26, r26
    192c:	28 30       	cpi	r18, 0x08	; 8
    192e:	51 f1       	breq	.+84     	; 0x1984 <__ultoa_invert+0x5c>
    1930:	20 31       	cpi	r18, 0x10	; 16
    1932:	81 f1       	breq	.+96     	; 0x1994 <__ultoa_invert+0x6c>
    1934:	e8 94       	clt
    1936:	6f 93       	push	r22
    1938:	6e 7f       	andi	r22, 0xFE	; 254
    193a:	6e 5f       	subi	r22, 0xFE	; 254
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	af 4f       	sbci	r26, 0xFF	; 255
    1944:	b1 e0       	ldi	r27, 0x01	; 1
    1946:	3e d0       	rcall	.+124    	; 0x19c4 <__ultoa_invert+0x9c>
    1948:	b4 e0       	ldi	r27, 0x04	; 4
    194a:	3c d0       	rcall	.+120    	; 0x19c4 <__ultoa_invert+0x9c>
    194c:	67 0f       	add	r22, r23
    194e:	78 1f       	adc	r23, r24
    1950:	89 1f       	adc	r24, r25
    1952:	9a 1f       	adc	r25, r26
    1954:	a1 1d       	adc	r26, r1
    1956:	68 0f       	add	r22, r24
    1958:	79 1f       	adc	r23, r25
    195a:	8a 1f       	adc	r24, r26
    195c:	91 1d       	adc	r25, r1
    195e:	a1 1d       	adc	r26, r1
    1960:	6a 0f       	add	r22, r26
    1962:	71 1d       	adc	r23, r1
    1964:	81 1d       	adc	r24, r1
    1966:	91 1d       	adc	r25, r1
    1968:	a1 1d       	adc	r26, r1
    196a:	20 d0       	rcall	.+64     	; 0x19ac <__ultoa_invert+0x84>
    196c:	09 f4       	brne	.+2      	; 0x1970 <__ultoa_invert+0x48>
    196e:	68 94       	set
    1970:	3f 91       	pop	r19
    1972:	2a e0       	ldi	r18, 0x0A	; 10
    1974:	26 9f       	mul	r18, r22
    1976:	11 24       	eor	r1, r1
    1978:	30 19       	sub	r19, r0
    197a:	30 5d       	subi	r19, 0xD0	; 208
    197c:	31 93       	st	Z+, r19
    197e:	de f6       	brtc	.-74     	; 0x1936 <__ultoa_invert+0xe>
    1980:	cf 01       	movw	r24, r30
    1982:	08 95       	ret
    1984:	46 2f       	mov	r20, r22
    1986:	47 70       	andi	r20, 0x07	; 7
    1988:	40 5d       	subi	r20, 0xD0	; 208
    198a:	41 93       	st	Z+, r20
    198c:	b3 e0       	ldi	r27, 0x03	; 3
    198e:	0f d0       	rcall	.+30     	; 0x19ae <__ultoa_invert+0x86>
    1990:	c9 f7       	brne	.-14     	; 0x1984 <__ultoa_invert+0x5c>
    1992:	f6 cf       	rjmp	.-20     	; 0x1980 <__ultoa_invert+0x58>
    1994:	46 2f       	mov	r20, r22
    1996:	4f 70       	andi	r20, 0x0F	; 15
    1998:	40 5d       	subi	r20, 0xD0	; 208
    199a:	4a 33       	cpi	r20, 0x3A	; 58
    199c:	18 f0       	brcs	.+6      	; 0x19a4 <__ultoa_invert+0x7c>
    199e:	49 5d       	subi	r20, 0xD9	; 217
    19a0:	31 fd       	sbrc	r19, 1
    19a2:	40 52       	subi	r20, 0x20	; 32
    19a4:	41 93       	st	Z+, r20
    19a6:	02 d0       	rcall	.+4      	; 0x19ac <__ultoa_invert+0x84>
    19a8:	a9 f7       	brne	.-22     	; 0x1994 <__ultoa_invert+0x6c>
    19aa:	ea cf       	rjmp	.-44     	; 0x1980 <__ultoa_invert+0x58>
    19ac:	b4 e0       	ldi	r27, 0x04	; 4
    19ae:	a6 95       	lsr	r26
    19b0:	97 95       	ror	r25
    19b2:	87 95       	ror	r24
    19b4:	77 95       	ror	r23
    19b6:	67 95       	ror	r22
    19b8:	ba 95       	dec	r27
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__ultoa_invert+0x86>
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	61 05       	cpc	r22, r1
    19c0:	71 05       	cpc	r23, r1
    19c2:	08 95       	ret
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	0a 2e       	mov	r0, r26
    19ca:	06 94       	lsr	r0
    19cc:	57 95       	ror	r21
    19ce:	47 95       	ror	r20
    19d0:	37 95       	ror	r19
    19d2:	27 95       	ror	r18
    19d4:	ba 95       	dec	r27
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0xa2>
    19d8:	62 0f       	add	r22, r18
    19da:	73 1f       	adc	r23, r19
    19dc:	84 1f       	adc	r24, r20
    19de:	95 1f       	adc	r25, r21
    19e0:	a0 1d       	adc	r26, r0
    19e2:	08 95       	ret

000019e4 <__prologue_saves__>:
    19e4:	2f 92       	push	r2
    19e6:	3f 92       	push	r3
    19e8:	4f 92       	push	r4
    19ea:	5f 92       	push	r5
    19ec:	6f 92       	push	r6
    19ee:	7f 92       	push	r7
    19f0:	8f 92       	push	r8
    19f2:	9f 92       	push	r9
    19f4:	af 92       	push	r10
    19f6:	bf 92       	push	r11
    19f8:	cf 92       	push	r12
    19fa:	df 92       	push	r13
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	ca 1b       	sub	r28, r26
    1a0e:	db 0b       	sbc	r29, r27
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	09 94       	ijmp

00001a1c <__epilogue_restores__>:
    1a1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a1e:	39 88       	ldd	r3, Y+17	; 0x11
    1a20:	48 88       	ldd	r4, Y+16	; 0x10
    1a22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a30:	c8 84       	ldd	r12, Y+8	; 0x08
    1a32:	df 80       	ldd	r13, Y+7	; 0x07
    1a34:	ee 80       	ldd	r14, Y+6	; 0x06
    1a36:	fd 80       	ldd	r15, Y+5	; 0x05
    1a38:	0c 81       	ldd	r16, Y+4	; 0x04
    1a3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a40:	ce 0f       	add	r28, r30
    1a42:	d1 1d       	adc	r29, r1
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	ed 01       	movw	r28, r26
    1a50:	08 95       	ret

00001a52 <_exit>:
    1a52:	f8 94       	cli

00001a54 <__stop_program>:
    1a54:	ff cf       	rjmp	.-2      	; 0x1a54 <__stop_program>
