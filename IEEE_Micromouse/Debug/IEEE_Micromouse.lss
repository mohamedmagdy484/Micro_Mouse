
IEEE_Micromouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000565e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  0000565e  000056f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000768  008001a2  008001a2  00005834  2**0
                  ALLOC
  3 .stab         0000435c  00000000  00000000  00005834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e92  00000000  00000000  00009b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ba22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000bdb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000e1be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000f535  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010710  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00010bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011591  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__vector_1>
       8:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_2>
       c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_3>
      10:	0c 94 20 25 	jmp	0x4a40	; 0x4a40 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	19 e0       	ldi	r17, 0x09	; 9
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 30       	cpi	r26, 0x0A	; 10
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <main>
      8a:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 28 	jmp	0x502e	; 0x502e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 28 	jmp	0x502e	; 0x502e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 28 	jmp	0x503e	; 0x503e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 20 28 	jmp	0x5040	; 0x5040 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 27 28 	jmp	0x504e	; 0x504e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ee 56       	subi	r30, 0x6E	; 110
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <PID_Init>:
/* Initialize PID controller parameters */
void PID_Init(PID_Controller_t *pid,
                        float Kp, float Ki, float Kd,
                        float Ts,
                        float out_min, float out_max)
{
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	62 97       	sbiw	r28, 0x12	; 18
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	4b 83       	std	Y+3, r20	; 0x03
     e26:	5c 83       	std	Y+4, r21	; 0x04
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	7e 83       	std	Y+6, r23	; 0x06
     e2c:	0f 83       	std	Y+7, r16	; 0x07
     e2e:	18 87       	std	Y+8, r17	; 0x08
     e30:	29 87       	std	Y+9, r18	; 0x09
     e32:	3a 87       	std	Y+10, r19	; 0x0a
     e34:	cb 86       	std	Y+11, r12	; 0x0b
     e36:	dc 86       	std	Y+12, r13	; 0x0c
     e38:	ed 86       	std	Y+13, r14	; 0x0d
     e3a:	fe 86       	std	Y+14, r15	; 0x0e
     e3c:	8f 86       	std	Y+15, r8	; 0x0f
     e3e:	98 8a       	std	Y+16, r9	; 0x10
     e40:	a9 8a       	std	Y+17, r10	; 0x11
     e42:	ba 8a       	std	Y+18, r11	; 0x12
    if (pid == 0 || Ts <= 0.0f) {
        
    }
    pid->Kp = Kp;
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	ad 81       	ldd	r26, Y+5	; 0x05
     e4e:	be 81       	ldd	r27, Y+6	; 0x06
     e50:	80 83       	st	Z, r24
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	a2 83       	std	Z+2, r26	; 0x02
     e56:	b3 83       	std	Z+3, r27	; 0x03
    pid->Ki = Ki;
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	8f 81       	ldd	r24, Y+7	; 0x07
     e5e:	98 85       	ldd	r25, Y+8	; 0x08
     e60:	a9 85       	ldd	r26, Y+9	; 0x09
     e62:	ba 85       	ldd	r27, Y+10	; 0x0a
     e64:	84 83       	std	Z+4, r24	; 0x04
     e66:	95 83       	std	Z+5, r25	; 0x05
     e68:	a6 83       	std	Z+6, r26	; 0x06
     e6a:	b7 83       	std	Z+7, r27	; 0x07
    pid->Kd = Kd;
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	8b 85       	ldd	r24, Y+11	; 0x0b
     e72:	9c 85       	ldd	r25, Y+12	; 0x0c
     e74:	ad 85       	ldd	r26, Y+13	; 0x0d
     e76:	be 85       	ldd	r27, Y+14	; 0x0e
     e78:	80 87       	std	Z+8, r24	; 0x08
     e7a:	91 87       	std	Z+9, r25	; 0x09
     e7c:	a2 87       	std	Z+10, r26	; 0x0a
     e7e:	b3 87       	std	Z+11, r27	; 0x0b
    pid->Ts = Ts;
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	fa 81       	ldd	r31, Y+2	; 0x02
     e84:	8f 85       	ldd	r24, Y+15	; 0x0f
     e86:	98 89       	ldd	r25, Y+16	; 0x10
     e88:	a9 89       	ldd	r26, Y+17	; 0x11
     e8a:	ba 89       	ldd	r27, Y+18	; 0x12
     e8c:	84 87       	std	Z+12, r24	; 0x0c
     e8e:	95 87       	std	Z+13, r25	; 0x0d
     e90:	a6 87       	std	Z+14, r26	; 0x0e
     e92:	b7 87       	std	Z+15, r27	; 0x0f

    pid->integral = 0.0f;
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	a0 e0       	ldi	r26, 0x00	; 0
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	80 8b       	std	Z+16, r24	; 0x10
     ea2:	91 8b       	std	Z+17, r25	; 0x11
     ea4:	a2 8b       	std	Z+18, r26	; 0x12
     ea6:	b3 8b       	std	Z+19, r27	; 0x13
    pid->prev_error = 0.0f;
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	84 8b       	std	Z+20, r24	; 0x14
     eb6:	95 8b       	std	Z+21, r25	; 0x15
     eb8:	a6 8b       	std	Z+22, r26	; 0x16
     eba:	b7 8b       	std	Z+23, r27	; 0x17

    pid->out_min = out_min;
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	89 a1       	ldd	r24, Y+33	; 0x21
     ec2:	9a a1       	ldd	r25, Y+34	; 0x22
     ec4:	ab a1       	ldd	r26, Y+35	; 0x23
     ec6:	bc a1       	ldd	r27, Y+36	; 0x24
     ec8:	80 8f       	std	Z+24, r24	; 0x18
     eca:	91 8f       	std	Z+25, r25	; 0x19
     ecc:	a2 8f       	std	Z+26, r26	; 0x1a
     ece:	b3 8f       	std	Z+27, r27	; 0x1b
    pid->out_max = out_max;    
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	8d a1       	ldd	r24, Y+37	; 0x25
     ed6:	9e a1       	ldd	r25, Y+38	; 0x26
     ed8:	af a1       	ldd	r26, Y+39	; 0x27
     eda:	b8 a5       	ldd	r27, Y+40	; 0x28
     edc:	84 8f       	std	Z+28, r24	; 0x1c
     ede:	95 8f       	std	Z+29, r25	; 0x1d
     ee0:	a6 8f       	std	Z+30, r26	; 0x1e
     ee2:	b7 8f       	std	Z+31, r27	; 0x1f
}
     ee4:	62 96       	adiw	r28, 0x12	; 18
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	08 95       	ret

00000f0a <PID_Compute>:

/* Compute PID output */
float PID_Compute(PID_Controller_t *pid, float setpoint, float measured)
{
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	66 97       	sbiw	r28, 0x16	; 22
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	9e 87       	std	Y+14, r25	; 0x0e
     f28:	8d 87       	std	Y+13, r24	; 0x0d
     f2a:	4f 87       	std	Y+15, r20	; 0x0f
     f2c:	58 8b       	std	Y+16, r21	; 0x10
     f2e:	69 8b       	std	Y+17, r22	; 0x11
     f30:	7a 8b       	std	Y+18, r23	; 0x12
     f32:	0b 8b       	std	Y+19, r16	; 0x13
     f34:	1c 8b       	std	Y+20, r17	; 0x14
     f36:	2d 8b       	std	Y+21, r18	; 0x15
     f38:	3e 8b       	std	Y+22, r19	; 0x16
   

    float error = setpoint - measured;
     f3a:	6f 85       	ldd	r22, Y+15	; 0x0f
     f3c:	78 89       	ldd	r23, Y+16	; 0x10
     f3e:	89 89       	ldd	r24, Y+17	; 0x11
     f40:	9a 89       	ldd	r25, Y+18	; 0x12
     f42:	2b 89       	ldd	r18, Y+19	; 0x13
     f44:	3c 89       	ldd	r19, Y+20	; 0x14
     f46:	4d 89       	ldd	r20, Y+21	; 0x15
     f48:	5e 89       	ldd	r21, Y+22	; 0x16
     f4a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	89 87       	std	Y+9, r24	; 0x09
     f54:	9a 87       	std	Y+10, r25	; 0x0a
     f56:	ab 87       	std	Y+11, r26	; 0x0b
     f58:	bc 87       	std	Y+12, r27	; 0x0c

    /* Integral term (with accumulation) */
    pid->integral += error * pid->Ts;
     f5a:	ed 85       	ldd	r30, Y+13	; 0x0d
     f5c:	fe 85       	ldd	r31, Y+14	; 0x0e
     f5e:	e0 88       	ldd	r14, Z+16	; 0x10
     f60:	f1 88       	ldd	r15, Z+17	; 0x11
     f62:	02 89       	ldd	r16, Z+18	; 0x12
     f64:	13 89       	ldd	r17, Z+19	; 0x13
     f66:	ed 85       	ldd	r30, Y+13	; 0x0d
     f68:	fe 85       	ldd	r31, Y+14	; 0x0e
     f6a:	84 85       	ldd	r24, Z+12	; 0x0c
     f6c:	95 85       	ldd	r25, Z+13	; 0x0d
     f6e:	a6 85       	ldd	r26, Z+14	; 0x0e
     f70:	b7 85       	ldd	r27, Z+15	; 0x0f
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	29 85       	ldd	r18, Y+9	; 0x09
     f78:	3a 85       	ldd	r19, Y+10	; 0x0a
     f7a:	4b 85       	ldd	r20, Y+11	; 0x0b
     f7c:	5c 85       	ldd	r21, Y+12	; 0x0c
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9c 01       	movw	r18, r24
     f88:	ad 01       	movw	r20, r26
     f8a:	c8 01       	movw	r24, r16
     f8c:	b7 01       	movw	r22, r14
     f8e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	ed 85       	ldd	r30, Y+13	; 0x0d
     f98:	fe 85       	ldd	r31, Y+14	; 0x0e
     f9a:	80 8b       	std	Z+16, r24	; 0x10
     f9c:	91 8b       	std	Z+17, r25	; 0x11
     f9e:	a2 8b       	std	Z+18, r26	; 0x12
     fa0:	b3 8b       	std	Z+19, r27	; 0x13

    /* Anti-windup: clamp integral */
    if (pid->integral * pid->Ki > pid->out_max) {
     fa2:	ed 85       	ldd	r30, Y+13	; 0x0d
     fa4:	fe 85       	ldd	r31, Y+14	; 0x0e
     fa6:	80 89       	ldd	r24, Z+16	; 0x10
     fa8:	91 89       	ldd	r25, Z+17	; 0x11
     faa:	a2 89       	ldd	r26, Z+18	; 0x12
     fac:	b3 89       	ldd	r27, Z+19	; 0x13
     fae:	ed 85       	ldd	r30, Y+13	; 0x0d
     fb0:	fe 85       	ldd	r31, Y+14	; 0x0e
     fb2:	24 81       	ldd	r18, Z+4	; 0x04
     fb4:	35 81       	ldd	r19, Z+5	; 0x05
     fb6:	46 81       	ldd	r20, Z+6	; 0x06
     fb8:	57 81       	ldd	r21, Z+7	; 0x07
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	ed 85       	ldd	r30, Y+13	; 0x0d
     fc8:	fe 85       	ldd	r31, Y+14	; 0x0e
     fca:	24 8d       	ldd	r18, Z+28	; 0x1c
     fcc:	35 8d       	ldd	r19, Z+29	; 0x1d
     fce:	46 8d       	ldd	r20, Z+30	; 0x1e
     fd0:	57 8d       	ldd	r21, Z+31	; 0x1f
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fda:	18 16       	cp	r1, r24
     fdc:	cc f4       	brge	.+50     	; 0x1010 <PID_Compute+0x106>
        pid->integral = pid->out_max / pid->Ki;
     fde:	ed 85       	ldd	r30, Y+13	; 0x0d
     fe0:	fe 85       	ldd	r31, Y+14	; 0x0e
     fe2:	84 8d       	ldd	r24, Z+28	; 0x1c
     fe4:	95 8d       	ldd	r25, Z+29	; 0x1d
     fe6:	a6 8d       	ldd	r26, Z+30	; 0x1e
     fe8:	b7 8d       	ldd	r27, Z+31	; 0x1f
     fea:	ed 85       	ldd	r30, Y+13	; 0x0d
     fec:	fe 85       	ldd	r31, Y+14	; 0x0e
     fee:	24 81       	ldd	r18, Z+4	; 0x04
     ff0:	35 81       	ldd	r19, Z+5	; 0x05
     ff2:	46 81       	ldd	r20, Z+6	; 0x06
     ff4:	57 81       	ldd	r21, Z+7	; 0x07
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	ed 85       	ldd	r30, Y+13	; 0x0d
    1004:	fe 85       	ldd	r31, Y+14	; 0x0e
    1006:	80 8b       	std	Z+16, r24	; 0x10
    1008:	91 8b       	std	Z+17, r25	; 0x11
    100a:	a2 8b       	std	Z+18, r26	; 0x12
    100c:	b3 8b       	std	Z+19, r27	; 0x13
    100e:	36 c0       	rjmp	.+108    	; 0x107c <PID_Compute+0x172>
    } else if (pid->integral * pid->Ki < pid->out_min) {
    1010:	ed 85       	ldd	r30, Y+13	; 0x0d
    1012:	fe 85       	ldd	r31, Y+14	; 0x0e
    1014:	80 89       	ldd	r24, Z+16	; 0x10
    1016:	91 89       	ldd	r25, Z+17	; 0x11
    1018:	a2 89       	ldd	r26, Z+18	; 0x12
    101a:	b3 89       	ldd	r27, Z+19	; 0x13
    101c:	ed 85       	ldd	r30, Y+13	; 0x0d
    101e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1020:	24 81       	ldd	r18, Z+4	; 0x04
    1022:	35 81       	ldd	r19, Z+5	; 0x05
    1024:	46 81       	ldd	r20, Z+6	; 0x06
    1026:	57 81       	ldd	r21, Z+7	; 0x07
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	ed 85       	ldd	r30, Y+13	; 0x0d
    1036:	fe 85       	ldd	r31, Y+14	; 0x0e
    1038:	20 8d       	ldd	r18, Z+24	; 0x18
    103a:	31 8d       	ldd	r19, Z+25	; 0x19
    103c:	42 8d       	ldd	r20, Z+26	; 0x1a
    103e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	c4 f4       	brge	.+48     	; 0x107c <PID_Compute+0x172>
        pid->integral = pid->out_min / pid->Ki;
    104c:	ed 85       	ldd	r30, Y+13	; 0x0d
    104e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1050:	80 8d       	ldd	r24, Z+24	; 0x18
    1052:	91 8d       	ldd	r25, Z+25	; 0x19
    1054:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1056:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1058:	ed 85       	ldd	r30, Y+13	; 0x0d
    105a:	fe 85       	ldd	r31, Y+14	; 0x0e
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	35 81       	ldd	r19, Z+5	; 0x05
    1060:	46 81       	ldd	r20, Z+6	; 0x06
    1062:	57 81       	ldd	r21, Z+7	; 0x07
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	ed 85       	ldd	r30, Y+13	; 0x0d
    1072:	fe 85       	ldd	r31, Y+14	; 0x0e
    1074:	80 8b       	std	Z+16, r24	; 0x10
    1076:	91 8b       	std	Z+17, r25	; 0x11
    1078:	a2 8b       	std	Z+18, r26	; 0x12
    107a:	b3 8b       	std	Z+19, r27	; 0x13
    }
    /* Derivative term */
    float derivative = (error - pid->prev_error) / pid->Ts;
    107c:	ed 85       	ldd	r30, Y+13	; 0x0d
    107e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1080:	24 89       	ldd	r18, Z+20	; 0x14
    1082:	35 89       	ldd	r19, Z+21	; 0x15
    1084:	46 89       	ldd	r20, Z+22	; 0x16
    1086:	57 89       	ldd	r21, Z+23	; 0x17
    1088:	69 85       	ldd	r22, Y+9	; 0x09
    108a:	7a 85       	ldd	r23, Y+10	; 0x0a
    108c:	8b 85       	ldd	r24, Y+11	; 0x0b
    108e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1090:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	ed 85       	ldd	r30, Y+13	; 0x0d
    109a:	fe 85       	ldd	r31, Y+14	; 0x0e
    109c:	24 85       	ldd	r18, Z+12	; 0x0c
    109e:	35 85       	ldd	r19, Z+13	; 0x0d
    10a0:	46 85       	ldd	r20, Z+14	; 0x0e
    10a2:	57 85       	ldd	r21, Z+15	; 0x0f
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	af 83       	std	Y+7, r26	; 0x07
    10b6:	b8 87       	std	Y+8, r27	; 0x08

    /* PID output */
    float u = (pid->Kp * error) +
              (pid->Ki * pid->integral) +
              (pid->Kd * derivative);
    10b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    10ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	a2 81       	ldd	r26, Z+2	; 0x02
    10c2:	b3 81       	ldd	r27, Z+3	; 0x03
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	29 85       	ldd	r18, Y+9	; 0x09
    10ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    10cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    10ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	8d 01       	movw	r16, r26
    10dc:	ed 85       	ldd	r30, Y+13	; 0x0d
    10de:	fe 85       	ldd	r31, Y+14	; 0x0e
    10e0:	84 81       	ldd	r24, Z+4	; 0x04
    10e2:	95 81       	ldd	r25, Z+5	; 0x05
    10e4:	a6 81       	ldd	r26, Z+6	; 0x06
    10e6:	b7 81       	ldd	r27, Z+7	; 0x07
    10e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    10ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    10ec:	20 89       	ldd	r18, Z+16	; 0x10
    10ee:	31 89       	ldd	r19, Z+17	; 0x11
    10f0:	42 89       	ldd	r20, Z+18	; 0x12
    10f2:	53 89       	ldd	r21, Z+19	; 0x13
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9c 01       	movw	r18, r24
    1102:	ad 01       	movw	r20, r26
    1104:	c8 01       	movw	r24, r16
    1106:	b7 01       	movw	r22, r14
    1108:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	7c 01       	movw	r14, r24
    1112:	8d 01       	movw	r16, r26
    1114:	ed 85       	ldd	r30, Y+13	; 0x0d
    1116:	fe 85       	ldd	r31, Y+14	; 0x0e
    1118:	80 85       	ldd	r24, Z+8	; 0x08
    111a:	91 85       	ldd	r25, Z+9	; 0x09
    111c:	a2 85       	ldd	r26, Z+10	; 0x0a
    111e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	2d 81       	ldd	r18, Y+5	; 0x05
    1126:	3e 81       	ldd	r19, Y+6	; 0x06
    1128:	4f 81       	ldd	r20, Y+7	; 0x07
    112a:	58 85       	ldd	r21, Y+8	; 0x08
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9c 01       	movw	r18, r24
    1136:	ad 01       	movw	r20, r26
    1138:	c8 01       	movw	r24, r16
    113a:	b7 01       	movw	r22, r14
    113c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	ab 83       	std	Y+3, r26	; 0x03
    114a:	bc 83       	std	Y+4, r27	; 0x04

    /* Clamp output */
    if (u > pid->out_max) {
    114c:	ed 85       	ldd	r30, Y+13	; 0x0d
    114e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1150:	84 8d       	ldd	r24, Z+28	; 0x1c
    1152:	95 8d       	ldd	r25, Z+29	; 0x1d
    1154:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1156:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	29 81       	ldd	r18, Y+1	; 0x01
    115e:	3a 81       	ldd	r19, Y+2	; 0x02
    1160:	4b 81       	ldd	r20, Y+3	; 0x03
    1162:	5c 81       	ldd	r21, Y+4	; 0x04
    1164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	5c f4       	brge	.+22     	; 0x1182 <PID_Compute+0x278>
        u = pid->out_max;
    116c:	ed 85       	ldd	r30, Y+13	; 0x0d
    116e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1170:	84 8d       	ldd	r24, Z+28	; 0x1c
    1172:	95 8d       	ldd	r25, Z+29	; 0x1d
    1174:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1176:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	ab 83       	std	Y+3, r26	; 0x03
    117e:	bc 83       	std	Y+4, r27	; 0x04
    1180:	1a c0       	rjmp	.+52     	; 0x11b6 <PID_Compute+0x2ac>
    } else if (u < pid->out_min) {
    1182:	ed 85       	ldd	r30, Y+13	; 0x0d
    1184:	fe 85       	ldd	r31, Y+14	; 0x0e
    1186:	80 8d       	ldd	r24, Z+24	; 0x18
    1188:	91 8d       	ldd	r25, Z+25	; 0x19
    118a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    118c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	29 81       	ldd	r18, Y+1	; 0x01
    1194:	3a 81       	ldd	r19, Y+2	; 0x02
    1196:	4b 81       	ldd	r20, Y+3	; 0x03
    1198:	5c 81       	ldd	r21, Y+4	; 0x04
    119a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    119e:	18 16       	cp	r1, r24
    11a0:	54 f4       	brge	.+20     	; 0x11b6 <PID_Compute+0x2ac>
        u = pid->out_min;
    11a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    11a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    11a6:	80 8d       	ldd	r24, Z+24	; 0x18
    11a8:	91 8d       	ldd	r25, Z+25	; 0x19
    11aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    11ac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	ab 83       	std	Y+3, r26	; 0x03
    11b4:	bc 83       	std	Y+4, r27	; 0x04
    }

    /* Save error for next iteration */
    pid->prev_error = error;
    11b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    11b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	ab 85       	ldd	r26, Y+11	; 0x0b
    11c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    11c2:	84 8b       	std	Z+20, r24	; 0x14
    11c4:	95 8b       	std	Z+21, r25	; 0x15
    11c6:	a6 8b       	std	Z+22, r26	; 0x16
    11c8:	b7 8b       	std	Z+23, r27	; 0x17

    return u;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	ab 81       	ldd	r26, Y+3	; 0x03
    11d0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	66 96       	adiw	r28, 0x16	; 22
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	08 95       	ret

000011f0 <PID_Reset>:

/* Reset PID state */
void PID_Reset(PID_Controller_t *pid)
{   
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <PID_Reset+0x6>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
    pid->integral = 0.0f;
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	80 8b       	std	Z+16, r24	; 0x10
    120c:	91 8b       	std	Z+17, r25	; 0x11
    120e:	a2 8b       	std	Z+18, r26	; 0x12
    1210:	b3 8b       	std	Z+19, r27	; 0x13
    pid->prev_error = 0.0f;   
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	84 8b       	std	Z+20, r24	; 0x14
    1220:	95 8b       	std	Z+21, r25	; 0x15
    1222:	a6 8b       	std	Z+22, r26	; 0x16
    1224:	b7 8b       	std	Z+23, r27	; 0x17
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__vector_2>:
#define Ts 0.02f   // 20ms

extern volatile long encoder_count1;
extern volatile long encoder_count2;

ISR(INT1_vect) {
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62

	encoder_count1++;
    124a:	80 91 ba 01 	lds	r24, 0x01BA
    124e:	90 91 bb 01 	lds	r25, 0x01BB
    1252:	a0 91 bc 01 	lds	r26, 0x01BC
    1256:	b0 91 bd 01 	lds	r27, 0x01BD
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	a1 1d       	adc	r26, r1
    125e:	b1 1d       	adc	r27, r1
    1260:	80 93 ba 01 	sts	0x01BA, r24
    1264:	90 93 bb 01 	sts	0x01BB, r25
    1268:	a0 93 bc 01 	sts	0x01BC, r26
    126c:	b0 93 bd 01 	sts	0x01BD, r27

}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_3>:

ISR(INT2_vect) {
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62

	encoder_count2++;
    12a0:	80 91 be 01 	lds	r24, 0x01BE
    12a4:	90 91 bf 01 	lds	r25, 0x01BF
    12a8:	a0 91 c0 01 	lds	r26, 0x01C0
    12ac:	b0 91 c1 01 	lds	r27, 0x01C1
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	a1 1d       	adc	r26, r1
    12b4:	b1 1d       	adc	r27, r1
    12b6:	80 93 be 01 	sts	0x01BE, r24
    12ba:	90 93 bf 01 	sts	0x01BF, r25
    12be:	a0 93 c0 01 	sts	0x01C0, r26
    12c2:	b0 93 c1 01 	sts	0x01C1, r27

}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <get_measured_velocity>:

/*
 * احسب السرعة (مم/ثانية) من RPM الإنكودر
 */
float get_measured_velocity()
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	60 97       	sbiw	r28, 0x10	; 16
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    float rpm_left = Encoder_GetRPM(&encoder_count1);
    12f0:	8a eb       	ldi	r24, 0xBA	; 186
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 fd 19 	call	0x33fa	; 0x33fa <Encoder_GetRPM>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8d 87       	std	Y+13, r24	; 0x0d
    12fe:	9e 87       	std	Y+14, r25	; 0x0e
    1300:	af 87       	std	Y+15, r26	; 0x0f
    1302:	b8 8b       	std	Y+16, r27	; 0x10
    float rpm_right = Encoder_GetRPM(&encoder_count2);
    1304:	8e eb       	ldi	r24, 0xBE	; 190
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 fd 19 	call	0x33fa	; 0x33fa <Encoder_GetRPM>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	89 87       	std	Y+9, r24	; 0x09
    1312:	9a 87       	std	Y+10, r25	; 0x0a
    1314:	ab 87       	std	Y+11, r26	; 0x0b
    1316:	bc 87       	std	Y+12, r27	; 0x0c
    float velocity_left = (rpm_left * M_PI * WHEEL_DIAMETER_MM) / 60.0f;
    1318:	6d 85       	ldd	r22, Y+13	; 0x0d
    131a:	7e 85       	ldd	r23, Y+14	; 0x0e
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 89       	ldd	r25, Y+16	; 0x10
    1320:	2b ed       	ldi	r18, 0xDB	; 219
    1322:	3f e0       	ldi	r19, 0x0F	; 15
    1324:	49 e4       	ldi	r20, 0x49	; 73
    1326:	50 e4       	ldi	r21, 0x40	; 64
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	48 e2       	ldi	r20, 0x28	; 40
    133a:	52 e4       	ldi	r21, 0x42	; 66
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e7       	ldi	r20, 0x70	; 112
    134e:	52 e4       	ldi	r21, 0x42	; 66
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	af 83       	std	Y+7, r26	; 0x07
    135e:	b8 87       	std	Y+8, r27	; 0x08
    float velocity_right = (rpm_right * M_PI * WHEEL_DIAMETER_MM) / 60.0f;
    1360:	69 85       	ldd	r22, Y+9	; 0x09
    1362:	7a 85       	ldd	r23, Y+10	; 0x0a
    1364:	8b 85       	ldd	r24, Y+11	; 0x0b
    1366:	9c 85       	ldd	r25, Y+12	; 0x0c
    1368:	2b ed       	ldi	r18, 0xDB	; 219
    136a:	3f e0       	ldi	r19, 0x0F	; 15
    136c:	49 e4       	ldi	r20, 0x49	; 73
    136e:	50 e4       	ldi	r21, 0x40	; 64
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	48 e2       	ldi	r20, 0x28	; 40
    1382:	52 e4       	ldi	r21, 0x42	; 66
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e7       	ldi	r20, 0x70	; 112
    1396:	52 e4       	ldi	r21, 0x42	; 66
    1398:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	ab 83       	std	Y+3, r26	; 0x03
    13a6:	bc 83       	std	Y+4, r27	; 0x04
    return (velocity_left + velocity_right) / 2.0f;
    13a8:	6d 81       	ldd	r22, Y+5	; 0x05
    13aa:	7e 81       	ldd	r23, Y+6	; 0x06
    13ac:	8f 81       	ldd	r24, Y+7	; 0x07
    13ae:	98 85       	ldd	r25, Y+8	; 0x08
    13b0:	29 81       	ldd	r18, Y+1	; 0x01
    13b2:	3a 81       	ldd	r19, Y+2	; 0x02
    13b4:	4b 81       	ldd	r20, Y+3	; 0x03
    13b6:	5c 81       	ldd	r21, Y+4	; 0x04
    13b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
}
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	60 96       	adiw	r28, 0x10	; 16
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <get_measured_angle>:

/*
 * احسب الزاوية من فرق النبضات بين العجلتين (تقريب بسيط)
 */
float get_measured_angle()
{
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2c 97       	sbiw	r28, 0x0c	; 12
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    static long prev_left = 0, prev_right = 0;
    long delta_left = encoder_count1 - prev_left;
    1406:	20 91 ba 01 	lds	r18, 0x01BA
    140a:	30 91 bb 01 	lds	r19, 0x01BB
    140e:	40 91 bc 01 	lds	r20, 0x01BC
    1412:	50 91 bd 01 	lds	r21, 0x01BD
    1416:	80 91 a6 01 	lds	r24, 0x01A6
    141a:	90 91 a7 01 	lds	r25, 0x01A7
    141e:	a0 91 a8 01 	lds	r26, 0x01A8
    1422:	b0 91 a9 01 	lds	r27, 0x01A9
    1426:	79 01       	movw	r14, r18
    1428:	8a 01       	movw	r16, r20
    142a:	e8 1a       	sub	r14, r24
    142c:	f9 0a       	sbc	r15, r25
    142e:	0a 0b       	sbc	r16, r26
    1430:	1b 0b       	sbc	r17, r27
    1432:	d8 01       	movw	r26, r16
    1434:	c7 01       	movw	r24, r14
    1436:	89 87       	std	Y+9, r24	; 0x09
    1438:	9a 87       	std	Y+10, r25	; 0x0a
    143a:	ab 87       	std	Y+11, r26	; 0x0b
    143c:	bc 87       	std	Y+12, r27	; 0x0c
    long delta_right = encoder_count2 - prev_right;
    143e:	20 91 be 01 	lds	r18, 0x01BE
    1442:	30 91 bf 01 	lds	r19, 0x01BF
    1446:	40 91 c0 01 	lds	r20, 0x01C0
    144a:	50 91 c1 01 	lds	r21, 0x01C1
    144e:	80 91 a2 01 	lds	r24, 0x01A2
    1452:	90 91 a3 01 	lds	r25, 0x01A3
    1456:	a0 91 a4 01 	lds	r26, 0x01A4
    145a:	b0 91 a5 01 	lds	r27, 0x01A5
    145e:	79 01       	movw	r14, r18
    1460:	8a 01       	movw	r16, r20
    1462:	e8 1a       	sub	r14, r24
    1464:	f9 0a       	sbc	r15, r25
    1466:	0a 0b       	sbc	r16, r26
    1468:	1b 0b       	sbc	r17, r27
    146a:	d8 01       	movw	r26, r16
    146c:	c7 01       	movw	r24, r14
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	af 83       	std	Y+7, r26	; 0x07
    1474:	b8 87       	std	Y+8, r27	; 0x08
    prev_left = encoder_count1;
    1476:	80 91 ba 01 	lds	r24, 0x01BA
    147a:	90 91 bb 01 	lds	r25, 0x01BB
    147e:	a0 91 bc 01 	lds	r26, 0x01BC
    1482:	b0 91 bd 01 	lds	r27, 0x01BD
    1486:	80 93 a6 01 	sts	0x01A6, r24
    148a:	90 93 a7 01 	sts	0x01A7, r25
    148e:	a0 93 a8 01 	sts	0x01A8, r26
    1492:	b0 93 a9 01 	sts	0x01A9, r27
    prev_right = encoder_count2;
    1496:	80 91 be 01 	lds	r24, 0x01BE
    149a:	90 91 bf 01 	lds	r25, 0x01BF
    149e:	a0 91 c0 01 	lds	r26, 0x01C0
    14a2:	b0 91 c1 01 	lds	r27, 0x01C1
    14a6:	80 93 a2 01 	sts	0x01A2, r24
    14aa:	90 93 a3 01 	sts	0x01A3, r25
    14ae:	a0 93 a4 01 	sts	0x01A4, r26
    14b2:	b0 93 a5 01 	sts	0x01A5, r27

    float angle = ((float)(delta_right - delta_left) / PPR) * (WHEEL_DIAMETER_MM / WHEEL_BASE_MM) * 360.0f;
    14b6:	2d 81       	ldd	r18, Y+5	; 0x05
    14b8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ba:	4f 81       	ldd	r20, Y+7	; 0x07
    14bc:	58 85       	ldd	r21, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    14c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    14c6:	79 01       	movw	r14, r18
    14c8:	8a 01       	movw	r16, r20
    14ca:	e8 1a       	sub	r14, r24
    14cc:	f9 0a       	sbc	r15, r25
    14ce:	0a 0b       	sbc	r16, r26
    14d0:	1b 0b       	sbc	r17, r27
    14d2:	d8 01       	movw	r26, r16
    14d4:	c7 01       	movw	r24, r14
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	48 e4       	ldi	r20, 0x48	; 72
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	bc 01       	movw	r22, r24
    14f8:	cd 01       	movw	r24, r26
    14fa:	21 e3       	ldi	r18, 0x31	; 49
    14fc:	38 e0       	ldi	r19, 0x08	; 8
    14fe:	4c ea       	ldi	r20, 0xAC	; 172
    1500:	5e e3       	ldi	r21, 0x3E	; 62
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	44 eb       	ldi	r20, 0xB4	; 180
    1514:	53 e4       	ldi	r21, 0x43	; 67
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	ab 83       	std	Y+3, r26	; 0x03
    1524:	bc 83       	std	Y+4, r27	; 0x04
    return angle; // زاوية الدوران خلال العينة (تقريب)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	ab 81       	ldd	r26, Y+3	; 0x03
    152c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	2c 96       	adiw	r28, 0x0c	; 12
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	08 95       	ret

0000154c <Control_Update>:
 */
void Control_Update(ControlSystem_t *ctrl,
                    float set_velocity,    // من الالجو
                    float set_angle,       // من الالجو
                    float *leftMotorOut, float *rightMotorOut)
{
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	6e 97       	sbiw	r28, 0x1e	; 30
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	9a 8b       	std	Y+18, r25	; 0x12
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	4b 8b       	std	Y+19, r20	; 0x13
    1572:	5c 8b       	std	Y+20, r21	; 0x14
    1574:	6d 8b       	std	Y+21, r22	; 0x15
    1576:	7e 8b       	std	Y+22, r23	; 0x16
    1578:	0f 8b       	std	Y+23, r16	; 0x17
    157a:	18 8f       	std	Y+24, r17	; 0x18
    157c:	29 8f       	std	Y+25, r18	; 0x19
    157e:	3a 8f       	std	Y+26, r19	; 0x1a
    1580:	fc 8e       	std	Y+28, r15	; 0x1c
    1582:	eb 8e       	std	Y+27, r14	; 0x1b
    1584:	de 8e       	std	Y+30, r13	; 0x1e
    1586:	cd 8e       	std	Y+29, r12	; 0x1d
    float measured_velocity = get_measured_velocity();
    1588:	0e 94 6e 09 	call	0x12dc	; 0x12dc <get_measured_velocity>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8d 87       	std	Y+13, r24	; 0x0d
    1592:	9e 87       	std	Y+14, r25	; 0x0e
    1594:	af 87       	std	Y+15, r26	; 0x0f
    1596:	b8 8b       	std	Y+16, r27	; 0x10
    float measured_angle = get_measured_angle();
    1598:	0e 94 f5 09 	call	0x13ea	; 0x13ea <get_measured_angle>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	89 87       	std	Y+9, r24	; 0x09
    15a2:	9a 87       	std	Y+10, r25	; 0x0a
    15a4:	ab 87       	std	Y+11, r26	; 0x0b
    15a6:	bc 87       	std	Y+12, r27	; 0x0c

    // PID للسرعة الأمامية
    float forwardOut = PID_Compute(&ctrl->forwardPID, set_velocity, measured_velocity);
    15a8:	89 89       	ldd	r24, Y+17	; 0x11
    15aa:	9a 89       	ldd	r25, Y+18	; 0x12
    15ac:	2b 89       	ldd	r18, Y+19	; 0x13
    15ae:	3c 89       	ldd	r19, Y+20	; 0x14
    15b0:	4d 89       	ldd	r20, Y+21	; 0x15
    15b2:	5e 89       	ldd	r21, Y+22	; 0x16
    15b4:	ed 84       	ldd	r14, Y+13	; 0x0d
    15b6:	fe 84       	ldd	r15, Y+14	; 0x0e
    15b8:	0f 85       	ldd	r16, Y+15	; 0x0f
    15ba:	18 89       	ldd	r17, Y+16	; 0x10
    15bc:	ba 01       	movw	r22, r20
    15be:	a9 01       	movw	r20, r18
    15c0:	98 01       	movw	r18, r16
    15c2:	87 01       	movw	r16, r14
    15c4:	0e 94 85 07 	call	0xf0a	; 0xf0a <PID_Compute>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	af 83       	std	Y+7, r26	; 0x07
    15d2:	b8 87       	std	Y+8, r27	; 0x08

    // PID للزاوية (heading)
    float rotationOut = PID_Compute(&ctrl->rotationPID, set_angle, measured_angle);
    15d4:	89 89       	ldd	r24, Y+17	; 0x11
    15d6:	9a 89       	ldd	r25, Y+18	; 0x12
    15d8:	80 96       	adiw	r24, 0x20	; 32
    15da:	2f 89       	ldd	r18, Y+23	; 0x17
    15dc:	38 8d       	ldd	r19, Y+24	; 0x18
    15de:	49 8d       	ldd	r20, Y+25	; 0x19
    15e0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    15e2:	e9 84       	ldd	r14, Y+9	; 0x09
    15e4:	fa 84       	ldd	r15, Y+10	; 0x0a
    15e6:	0b 85       	ldd	r16, Y+11	; 0x0b
    15e8:	1c 85       	ldd	r17, Y+12	; 0x0c
    15ea:	ba 01       	movw	r22, r20
    15ec:	a9 01       	movw	r20, r18
    15ee:	98 01       	movw	r18, r16
    15f0:	87 01       	movw	r16, r14
    15f2:	0e 94 85 07 	call	0xf0a	; 0xf0a <PID_Compute>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	ab 83       	std	Y+3, r26	; 0x03
    1600:	bc 83       	std	Y+4, r27	; 0x04

    // تركيبة الإخراج النهائي للموتورين
    *leftMotorOut  = forwardOut - rotationOut;
    1602:	6d 81       	ldd	r22, Y+5	; 0x05
    1604:	7e 81       	ldd	r23, Y+6	; 0x06
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	29 81       	ldd	r18, Y+1	; 0x01
    160c:	3a 81       	ldd	r19, Y+2	; 0x02
    160e:	4b 81       	ldd	r20, Y+3	; 0x03
    1610:	5c 81       	ldd	r21, Y+4	; 0x04
    1612:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    161c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    161e:	80 83       	st	Z, r24
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	a2 83       	std	Z+2, r26	; 0x02
    1624:	b3 83       	std	Z+3, r27	; 0x03
    *rightMotorOut = forwardOut + rotationOut;
    1626:	6d 81       	ldd	r22, Y+5	; 0x05
    1628:	7e 81       	ldd	r23, Y+6	; 0x06
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	98 85       	ldd	r25, Y+8	; 0x08
    162e:	29 81       	ldd	r18, Y+1	; 0x01
    1630:	3a 81       	ldd	r19, Y+2	; 0x02
    1632:	4b 81       	ldd	r20, Y+3	; 0x03
    1634:	5c 81       	ldd	r21, Y+4	; 0x04
    1636:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1640:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
}
    164a:	6e 96       	adiw	r28, 0x1e	; 30
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	08 95       	ret

00001668 <update_walls>:
#define WHEEL_BASE_MM 100.0f
#define CELL_SIZE_MM 180.0f
#define DIST_PER_COUNT_MM ((M_PI * WHEEL_DIAMETER_MM) / (float)PPR)

// ================== Update Walls ==================
uint8 update_walls(void) {
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	61 97       	sbiw	r28, 0x11	; 17
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    uint8 updated = 0;
    167c:	19 8a       	std	Y+17, r1	; 0x11

    int left_dir = (heading + 3) % 4;
    167e:	80 91 af 01 	lds	r24, 0x01AF
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	03 96       	adiw	r24, 0x03	; 3
    1688:	24 e0       	ldi	r18, 0x04	; 4
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	b9 01       	movw	r22, r18
    168e:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__divmodhi4>
    1692:	98 8b       	std	Y+16, r25	; 0x10
    1694:	8f 87       	std	Y+15, r24	; 0x0f
    int right_dir = (heading + 1) % 4;
    1696:	80 91 af 01 	lds	r24, 0x01AF
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	24 e0       	ldi	r18, 0x04	; 4
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__divmodhi4>
    16aa:	9e 87       	std	Y+14, r25	; 0x0e
    16ac:	8d 87       	std	Y+13, r24	; 0x0d
    int lx = pos_x + dx[left_dir];
    16ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b0:	98 89       	ldd	r25, Y+16	; 0x10
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	fc 01       	movw	r30, r24
    16b8:	ee 56       	subi	r30, 0x6E	; 110
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    16c0:	80 91 ab 01 	lds	r24, 0x01AB
    16c4:	90 91 ac 01 	lds	r25, 0x01AC
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	9c 87       	std	Y+12, r25	; 0x0c
    16ce:	8b 87       	std	Y+11, r24	; 0x0b
    int ly = pos_y + dy[left_dir];
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	98 89       	ldd	r25, Y+16	; 0x10
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	fc 01       	movw	r30, r24
    16da:	e6 56       	subi	r30, 0x66	; 102
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	20 81       	ld	r18, Z
    16e0:	31 81       	ldd	r19, Z+1	; 0x01
    16e2:	80 91 ad 01 	lds	r24, 0x01AD
    16e6:	90 91 ae 01 	lds	r25, 0x01AE
    16ea:	82 0f       	add	r24, r18
    16ec:	93 1f       	adc	r25, r19
    16ee:	9a 87       	std	Y+10, r25	; 0x0a
    16f0:	89 87       	std	Y+9, r24	; 0x09
    int rx = pos_x + dx[right_dir];
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	fc 01       	movw	r30, r24
    16fc:	ee 56       	subi	r30, 0x6E	; 110
    16fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	80 91 ab 01 	lds	r24, 0x01AB
    1708:	90 91 ac 01 	lds	r25, 0x01AC
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	98 87       	std	Y+8, r25	; 0x08
    1712:	8f 83       	std	Y+7, r24	; 0x07
    int ry = pos_y + dy[right_dir];
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	fc 01       	movw	r30, r24
    171e:	e6 56       	subi	r30, 0x66	; 102
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	20 81       	ld	r18, Z
    1724:	31 81       	ldd	r19, Z+1	; 0x01
    1726:	80 91 ad 01 	lds	r24, 0x01AD
    172a:	90 91 ae 01 	lds	r25, 0x01AE
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    int fx = pos_x + dx[heading];
    1736:	80 91 af 01 	lds	r24, 0x01AF
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	fc 01       	movw	r30, r24
    1744:	ee 56       	subi	r30, 0x6E	; 110
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	20 81       	ld	r18, Z
    174a:	31 81       	ldd	r19, Z+1	; 0x01
    174c:	80 91 ab 01 	lds	r24, 0x01AB
    1750:	90 91 ac 01 	lds	r25, 0x01AC
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
    int fy = pos_y + dy[heading];
    175c:	80 91 af 01 	lds	r24, 0x01AF
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	fc 01       	movw	r30, r24
    176a:	e6 56       	subi	r30, 0x66	; 102
    176c:	fe 4f       	sbci	r31, 0xFE	; 254
    176e:	20 81       	ld	r18, Z
    1770:	31 81       	ldd	r19, Z+1	; 0x01
    1772:	80 91 ad 01 	lds	r24, 0x01AD
    1776:	90 91 ae 01 	lds	r25, 0x01AE
    177a:	82 0f       	add	r24, r18
    177c:	93 1f       	adc	r25, r19
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01

    if ((IR1_getState()) && lx >= 0 && lx < MAZE_SIZE && ly >= 0 && ly < MAZE_SIZE)
    1782:	0e 94 be 19 	call	0x337c	; 0x337c <IR1_getState>
    1786:	88 23       	and	r24, r24
    1788:	b9 f1       	breq	.+110    	; 0x17f8 <update_walls+0x190>
    178a:	8b 85       	ldd	r24, Y+11	; 0x0b
    178c:	9c 85       	ldd	r25, Y+12	; 0x0c
    178e:	99 23       	and	r25, r25
    1790:	9c f1       	brlt	.+102    	; 0x17f8 <update_walls+0x190>
    1792:	8b 85       	ldd	r24, Y+11	; 0x0b
    1794:	9c 85       	ldd	r25, Y+12	; 0x0c
    1796:	80 31       	cpi	r24, 0x10	; 16
    1798:	91 05       	cpc	r25, r1
    179a:	74 f5       	brge	.+92     	; 0x17f8 <update_walls+0x190>
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	99 23       	and	r25, r25
    17a2:	54 f1       	brlt	.+84     	; 0x17f8 <update_walls+0x190>
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	80 31       	cpi	r24, 0x10	; 16
    17aa:	91 05       	cpc	r25, r1
    17ac:	2c f5       	brge	.+74     	; 0x17f8 <update_walls+0x190>
        if (maze[lx][ly] != 1) { maze[lx][ly] = 1; updated = 1; }
    17ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b2:	29 85       	ldd	r18, Y+9	; 0x09
    17b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b6:	82 95       	swap	r24
    17b8:	92 95       	swap	r25
    17ba:	90 7f       	andi	r25, 0xF0	; 240
    17bc:	98 27       	eor	r25, r24
    17be:	80 7f       	andi	r24, 0xF0	; 240
    17c0:	98 27       	eor	r25, r24
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	fc 01       	movw	r30, r24
    17c8:	e6 5f       	subi	r30, 0xF6	; 246
    17ca:	fa 4f       	sbci	r31, 0xFA	; 250
    17cc:	80 81       	ld	r24, Z
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	99 f0       	breq	.+38     	; 0x17f8 <update_walls+0x190>
    17d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d6:	29 85       	ldd	r18, Y+9	; 0x09
    17d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17da:	82 95       	swap	r24
    17dc:	92 95       	swap	r25
    17de:	90 7f       	andi	r25, 0xF0	; 240
    17e0:	98 27       	eor	r25, r24
    17e2:	80 7f       	andi	r24, 0xF0	; 240
    17e4:	98 27       	eor	r25, r24
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	fc 01       	movw	r30, r24
    17ec:	e6 5f       	subi	r30, 0xF6	; 246
    17ee:	fa 4f       	sbci	r31, 0xFA	; 250
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	80 83       	st	Z, r24
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 8b       	std	Y+17, r24	; 0x11
    if ((IR8_getState()) && rx >= 0 && rx < MAZE_SIZE && ry >= 0 && ry < MAZE_SIZE)
    17f8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <IR8_getState>
    17fc:	88 23       	and	r24, r24
    17fe:	b9 f1       	breq	.+110    	; 0x186e <update_walls+0x206>
    1800:	8f 81       	ldd	r24, Y+7	; 0x07
    1802:	98 85       	ldd	r25, Y+8	; 0x08
    1804:	99 23       	and	r25, r25
    1806:	9c f1       	brlt	.+102    	; 0x186e <update_walls+0x206>
    1808:	8f 81       	ldd	r24, Y+7	; 0x07
    180a:	98 85       	ldd	r25, Y+8	; 0x08
    180c:	80 31       	cpi	r24, 0x10	; 16
    180e:	91 05       	cpc	r25, r1
    1810:	74 f5       	brge	.+92     	; 0x186e <update_walls+0x206>
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	99 23       	and	r25, r25
    1818:	54 f1       	brlt	.+84     	; 0x186e <update_walls+0x206>
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	80 31       	cpi	r24, 0x10	; 16
    1820:	91 05       	cpc	r25, r1
    1822:	2c f5       	brge	.+74     	; 0x186e <update_walls+0x206>
        if (maze[rx][ry] != 1) { maze[rx][ry] = 1; updated = 1; }
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	98 85       	ldd	r25, Y+8	; 0x08
    1828:	2d 81       	ldd	r18, Y+5	; 0x05
    182a:	3e 81       	ldd	r19, Y+6	; 0x06
    182c:	82 95       	swap	r24
    182e:	92 95       	swap	r25
    1830:	90 7f       	andi	r25, 0xF0	; 240
    1832:	98 27       	eor	r25, r24
    1834:	80 7f       	andi	r24, 0xF0	; 240
    1836:	98 27       	eor	r25, r24
    1838:	82 0f       	add	r24, r18
    183a:	93 1f       	adc	r25, r19
    183c:	fc 01       	movw	r30, r24
    183e:	e6 5f       	subi	r30, 0xF6	; 246
    1840:	fa 4f       	sbci	r31, 0xFA	; 250
    1842:	80 81       	ld	r24, Z
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	99 f0       	breq	.+38     	; 0x186e <update_walls+0x206>
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	98 85       	ldd	r25, Y+8	; 0x08
    184c:	2d 81       	ldd	r18, Y+5	; 0x05
    184e:	3e 81       	ldd	r19, Y+6	; 0x06
    1850:	82 95       	swap	r24
    1852:	92 95       	swap	r25
    1854:	90 7f       	andi	r25, 0xF0	; 240
    1856:	98 27       	eor	r25, r24
    1858:	80 7f       	andi	r24, 0xF0	; 240
    185a:	98 27       	eor	r25, r24
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	fc 01       	movw	r30, r24
    1862:	e6 5f       	subi	r30, 0xF6	; 246
    1864:	fa 4f       	sbci	r31, 0xFA	; 250
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 83       	st	Z, r24
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 8b       	std	Y+17, r24	; 0x11
    if ((IR3_getState()) && fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE)
    186e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <IR3_getState>
    1872:	88 23       	and	r24, r24
    1874:	b9 f1       	breq	.+110    	; 0x18e4 <update_walls+0x27c>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	99 23       	and	r25, r25
    187c:	9c f1       	brlt	.+102    	; 0x18e4 <update_walls+0x27c>
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	80 31       	cpi	r24, 0x10	; 16
    1884:	91 05       	cpc	r25, r1
    1886:	74 f5       	brge	.+92     	; 0x18e4 <update_walls+0x27c>
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	99 23       	and	r25, r25
    188e:	54 f1       	brlt	.+84     	; 0x18e4 <update_walls+0x27c>
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	80 31       	cpi	r24, 0x10	; 16
    1896:	91 05       	cpc	r25, r1
    1898:	2c f5       	brge	.+74     	; 0x18e4 <update_walls+0x27c>
        if (maze[fx][fy] != 1) { maze[fx][fy] = 1; updated = 1; }
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	29 81       	ldd	r18, Y+1	; 0x01
    18a0:	3a 81       	ldd	r19, Y+2	; 0x02
    18a2:	82 95       	swap	r24
    18a4:	92 95       	swap	r25
    18a6:	90 7f       	andi	r25, 0xF0	; 240
    18a8:	98 27       	eor	r25, r24
    18aa:	80 7f       	andi	r24, 0xF0	; 240
    18ac:	98 27       	eor	r25, r24
    18ae:	82 0f       	add	r24, r18
    18b0:	93 1f       	adc	r25, r19
    18b2:	fc 01       	movw	r30, r24
    18b4:	e6 5f       	subi	r30, 0xF6	; 246
    18b6:	fa 4f       	sbci	r31, 0xFA	; 250
    18b8:	80 81       	ld	r24, Z
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	99 f0       	breq	.+38     	; 0x18e4 <update_walls+0x27c>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	29 81       	ldd	r18, Y+1	; 0x01
    18c4:	3a 81       	ldd	r19, Y+2	; 0x02
    18c6:	82 95       	swap	r24
    18c8:	92 95       	swap	r25
    18ca:	90 7f       	andi	r25, 0xF0	; 240
    18cc:	98 27       	eor	r25, r24
    18ce:	80 7f       	andi	r24, 0xF0	; 240
    18d0:	98 27       	eor	r25, r24
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	fc 01       	movw	r30, r24
    18d8:	e6 5f       	subi	r30, 0xF6	; 246
    18da:	fa 4f       	sbci	r31, 0xFA	; 250
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	80 83       	st	Z, r24
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	89 8b       	std	Y+17, r24	; 0x11

    return updated;
    18e4:	89 89       	ldd	r24, Y+17	; 0x11
}
    18e6:	61 96       	adiw	r28, 0x11	; 17
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <floodfill>:

// ================== Flood Fill ==================
void floodfill(void) {
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	66 97       	sbiw	r28, 0x16	; 22
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    for (uint8 x = 0; x < MAZE_SIZE; x++)
    190c:	1a 86       	std	Y+10, r1	; 0x0a
    190e:	1f c0       	rjmp	.+62     	; 0x194e <floodfill+0x56>
        for (uint8 y = 0; y < MAZE_SIZE; y++)
    1910:	19 86       	std	Y+9, r1	; 0x09
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <floodfill+0x4a>
            distance[x][y] = 255;
    1914:	8a 85       	ldd	r24, Y+10	; 0x0a
    1916:	48 2f       	mov	r20, r24
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	ca 01       	movw	r24, r20
    1922:	82 95       	swap	r24
    1924:	92 95       	swap	r25
    1926:	90 7f       	andi	r25, 0xF0	; 240
    1928:	98 27       	eor	r25, r24
    192a:	80 7f       	andi	r24, 0xF0	; 240
    192c:	98 27       	eor	r25, r24
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	e6 5f       	subi	r30, 0xF6	; 246
    1936:	fb 4f       	sbci	r31, 0xFB	; 251
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	80 83       	st	Z, r24
}

// ================== Flood Fill ==================
void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
        for (uint8 y = 0; y < MAZE_SIZE; y++)
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	89 87       	std	Y+9, r24	; 0x09
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	80 31       	cpi	r24, 0x10	; 16
    1946:	30 f3       	brcs	.-52     	; 0x1914 <floodfill+0x1c>
    return updated;
}

// ================== Flood Fill ==================
void floodfill(void) {
    for (uint8 x = 0; x < MAZE_SIZE; x++)
    1948:	8a 85       	ldd	r24, Y+10	; 0x0a
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	8a 87       	std	Y+10, r24	; 0x0a
    194e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1950:	80 31       	cpi	r24, 0x10	; 16
    1952:	f0 f2       	brcs	.-68     	; 0x1910 <floodfill+0x18>
        for (uint8 y = 0; y < MAZE_SIZE; y++)
            distance[x][y] = 255;

    uint8 center_x[4] = {7,7,8,8};
    1954:	87 e0       	ldi	r24, 0x07	; 7
    1956:	8f 87       	std	Y+15, r24	; 0x0f
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	88 8b       	std	Y+16, r24	; 0x10
    195c:	88 e0       	ldi	r24, 0x08	; 8
    195e:	89 8b       	std	Y+17, r24	; 0x11
    1960:	88 e0       	ldi	r24, 0x08	; 8
    1962:	8a 8b       	std	Y+18, r24	; 0x12
    uint8 center_y[4] = {7,8,7,8};
    1964:	87 e0       	ldi	r24, 0x07	; 7
    1966:	8b 8b       	std	Y+19, r24	; 0x13
    1968:	88 e0       	ldi	r24, 0x08	; 8
    196a:	8c 8b       	std	Y+20, r24	; 0x14
    196c:	87 e0       	ldi	r24, 0x07	; 7
    196e:	8d 8b       	std	Y+21, r24	; 0x15
    1970:	88 e0       	ldi	r24, 0x08	; 8
    1972:	8e 8b       	std	Y+22, r24	; 0x16
    uint16 front = 0, rear = 0;
    1974:	1e 86       	std	Y+14, r1	; 0x0e
    1976:	1d 86       	std	Y+13, r1	; 0x0d
    1978:	1c 86       	std	Y+12, r1	; 0x0c
    197a:	1b 86       	std	Y+11, r1	; 0x0b

    for (uint8 i = 0; i < 4; i++) {
    197c:	18 86       	std	Y+8, r1	; 0x08
    197e:	49 c0       	rjmp	.+146    	; 0x1a12 <floodfill+0x11a>
        distance[center_x[i]][center_y[i]] = 0;
    1980:	88 85       	ldd	r24, Y+8	; 0x08
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	ce 01       	movw	r24, r28
    1988:	0f 96       	adiw	r24, 0x0f	; 15
    198a:	fc 01       	movw	r30, r24
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	88 85       	ldd	r24, Y+8	; 0x08
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	ce 01       	movw	r24, r28
    199e:	43 96       	adiw	r24, 0x13	; 19
    19a0:	fc 01       	movw	r30, r24
    19a2:	e2 0f       	add	r30, r18
    19a4:	f3 1f       	adc	r31, r19
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	ca 01       	movw	r24, r20
    19ae:	82 95       	swap	r24
    19b0:	92 95       	swap	r25
    19b2:	90 7f       	andi	r25, 0xF0	; 240
    19b4:	98 27       	eor	r25, r24
    19b6:	80 7f       	andi	r24, 0xF0	; 240
    19b8:	98 27       	eor	r25, r24
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	fc 01       	movw	r30, r24
    19c0:	e6 5f       	subi	r30, 0xF6	; 246
    19c2:	fb 4f       	sbci	r31, 0xFB	; 251
    19c4:	10 82       	st	Z, r1
        queue_x[rear] = center_x[i];
    19c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    19c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    19ca:	88 85       	ldd	r24, Y+8	; 0x08
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	ce 01       	movw	r24, r28
    19d2:	0f 96       	adiw	r24, 0x0f	; 15
    19d4:	fc 01       	movw	r30, r24
    19d6:	e2 0f       	add	r30, r18
    19d8:	f3 1f       	adc	r31, r19
    19da:	80 81       	ld	r24, Z
    19dc:	fa 01       	movw	r30, r20
    19de:	e6 5f       	subi	r30, 0xF6	; 246
    19e0:	f9 4f       	sbci	r31, 0xF9	; 249
    19e2:	80 83       	st	Z, r24
        queue_y[rear] = center_y[i];
    19e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    19e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    19e8:	88 85       	ldd	r24, Y+8	; 0x08
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	ce 01       	movw	r24, r28
    19f0:	43 96       	adiw	r24, 0x13	; 19
    19f2:	fc 01       	movw	r30, r24
    19f4:	e2 0f       	add	r30, r18
    19f6:	f3 1f       	adc	r31, r19
    19f8:	80 81       	ld	r24, Z
    19fa:	fa 01       	movw	r30, r20
    19fc:	e6 5f       	subi	r30, 0xF6	; 246
    19fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1a00:	80 83       	st	Z, r24
        rear++;
    1a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	9c 87       	std	Y+12, r25	; 0x0c
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b

    uint8 center_x[4] = {7,7,8,8};
    uint8 center_y[4] = {7,8,7,8};
    uint16 front = 0, rear = 0;

    for (uint8 i = 0; i < 4; i++) {
    1a0c:	88 85       	ldd	r24, Y+8	; 0x08
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	88 87       	std	Y+8, r24	; 0x08
    1a12:	88 85       	ldd	r24, Y+8	; 0x08
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <floodfill+0x122>
    1a18:	b3 cf       	rjmp	.-154    	; 0x1980 <floodfill+0x88>
    1a1a:	b2 c0       	rjmp	.+356    	; 0x1b80 <floodfill+0x288>
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
        uint8 x = queue_x[front];
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	fc 01       	movw	r30, r24
    1a22:	e6 5f       	subi	r30, 0xF6	; 246
    1a24:	f9 4f       	sbci	r31, 0xF9	; 249
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 83       	std	Y+7, r24	; 0x07
        uint8 y = queue_y[front];
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e6 5f       	subi	r30, 0xF6	; 246
    1a32:	fc 4f       	sbci	r31, 0xFC	; 252
    1a34:	80 81       	ld	r24, Z
    1a36:	8e 83       	std	Y+6, r24	; 0x06
        front++;
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	9e 87       	std	Y+14, r25	; 0x0e
    1a40:	8d 87       	std	Y+13, r24	; 0x0d
        for (uint8 dir = 0; dir < 4; dir++) {
    1a42:	1d 82       	std	Y+5, r1	; 0x05
    1a44:	99 c0       	rjmp	.+306    	; 0x1b78 <floodfill+0x280>
            int nx = x + dx[dir];
    1a46:	8f 81       	ldd	r24, Y+7	; 0x07
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	fc 01       	movw	r30, r24
    1a58:	ee 56       	subi	r30, 0x6E	; 110
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	82 0f       	add	r24, r18
    1a62:	93 1f       	adc	r25, r19
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	8b 83       	std	Y+3, r24	; 0x03
            int ny = y + dy[dir];
    1a68:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e6 56       	subi	r30, 0x66	; 102
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	82 0f       	add	r24, r18
    1a84:	93 1f       	adc	r25, r19
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	99 23       	and	r25, r25
    1a90:	0c f4       	brge	.+2      	; 0x1a94 <floodfill+0x19c>
    1a92:	6f c0       	rjmp	.+222    	; 0x1b72 <floodfill+0x27a>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	80 31       	cpi	r24, 0x10	; 16
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <floodfill+0x1a8>
    1a9e:	69 c0       	rjmp	.+210    	; 0x1b72 <floodfill+0x27a>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	99 23       	and	r25, r25
    1aa6:	0c f4       	brge	.+2      	; 0x1aaa <floodfill+0x1b2>
    1aa8:	64 c0       	rjmp	.+200    	; 0x1b72 <floodfill+0x27a>
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	80 31       	cpi	r24, 0x10	; 16
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	0c f0       	brlt	.+2      	; 0x1ab6 <floodfill+0x1be>
    1ab4:	5e c0       	rjmp	.+188    	; 0x1b72 <floodfill+0x27a>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	82 95       	swap	r24
    1ac0:	92 95       	swap	r25
    1ac2:	90 7f       	andi	r25, 0xF0	; 240
    1ac4:	98 27       	eor	r25, r24
    1ac6:	80 7f       	andi	r24, 0xF0	; 240
    1ac8:	98 27       	eor	r25, r24
    1aca:	82 0f       	add	r24, r18
    1acc:	93 1f       	adc	r25, r19
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e6 5f       	subi	r30, 0xF6	; 246
    1ad2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <floodfill+0x1e4>
    1ada:	4b c0       	rjmp	.+150    	; 0x1b72 <floodfill+0x27a>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	29 81       	ldd	r18, Y+1	; 0x01
    1ae2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae4:	82 95       	swap	r24
    1ae6:	92 95       	swap	r25
    1ae8:	90 7f       	andi	r25, 0xF0	; 240
    1aea:	98 27       	eor	r25, r24
    1aec:	80 7f       	andi	r24, 0xF0	; 240
    1aee:	98 27       	eor	r25, r24
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	fc 01       	movw	r30, r24
    1af6:	e6 5f       	subi	r30, 0xF6	; 246
    1af8:	fb 4f       	sbci	r31, 0xFB	; 251
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 3f       	cpi	r24, 0xFF	; 255
    1afe:	c9 f5       	brne	.+114    	; 0x1b72 <floodfill+0x27a>
                maze[nx][ny] == 0 && distance[nx][ny] == 255) {
                distance[nx][ny] = distance[x][y] + 1;
    1b00:	6b 81       	ldd	r22, Y+3	; 0x03
    1b02:	7c 81       	ldd	r23, Y+4	; 0x04
    1b04:	a9 81       	ldd	r26, Y+1	; 0x01
    1b06:	ba 81       	ldd	r27, Y+2	; 0x02
    1b08:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	ca 01       	movw	r24, r20
    1b16:	82 95       	swap	r24
    1b18:	92 95       	swap	r25
    1b1a:	90 7f       	andi	r25, 0xF0	; 240
    1b1c:	98 27       	eor	r25, r24
    1b1e:	80 7f       	andi	r24, 0xF0	; 240
    1b20:	98 27       	eor	r25, r24
    1b22:	82 0f       	add	r24, r18
    1b24:	93 1f       	adc	r25, r19
    1b26:	fc 01       	movw	r30, r24
    1b28:	e6 5f       	subi	r30, 0xF6	; 246
    1b2a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	cb 01       	movw	r24, r22
    1b34:	82 95       	swap	r24
    1b36:	92 95       	swap	r25
    1b38:	90 7f       	andi	r25, 0xF0	; 240
    1b3a:	98 27       	eor	r25, r24
    1b3c:	80 7f       	andi	r24, 0xF0	; 240
    1b3e:	98 27       	eor	r25, r24
    1b40:	8a 0f       	add	r24, r26
    1b42:	9b 1f       	adc	r25, r27
    1b44:	fc 01       	movw	r30, r24
    1b46:	e6 5f       	subi	r30, 0xF6	; 246
    1b48:	fb 4f       	sbci	r31, 0xFB	; 251
    1b4a:	20 83       	st	Z, r18
                queue_x[rear] = nx;
    1b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	fc 01       	movw	r30, r24
    1b54:	e6 5f       	subi	r30, 0xF6	; 246
    1b56:	f9 4f       	sbci	r31, 0xF9	; 249
    1b58:	20 83       	st	Z, r18
                queue_y[rear] = ny;
    1b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b5e:	29 81       	ldd	r18, Y+1	; 0x01
    1b60:	fc 01       	movw	r30, r24
    1b62:	e6 5f       	subi	r30, 0xF6	; 246
    1b64:	fc 4f       	sbci	r31, 0xFC	; 252
    1b66:	20 83       	st	Z, r18
                rear++;
    1b68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	9c 87       	std	Y+12, r25	; 0x0c
    1b70:	8b 87       	std	Y+11, r24	; 0x0b

    while (front < rear) {
        uint8 x = queue_x[front];
        uint8 y = queue_y[front];
        front++;
        for (uint8 dir = 0; dir < 4; dir++) {
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	08 f4       	brcc	.+2      	; 0x1b80 <floodfill+0x288>
    1b7e:	63 cf       	rjmp	.-314    	; 0x1a46 <floodfill+0x14e>
        queue_x[rear] = center_x[i];
        queue_y[rear] = center_y[i];
        rear++;
    }

    while (front < rear) {
    1b80:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b82:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b88:	28 17       	cp	r18, r24
    1b8a:	39 07       	cpc	r19, r25
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <floodfill+0x298>
    1b8e:	46 cf       	rjmp	.-372    	; 0x1a1c <floodfill+0x124>
                queue_y[rear] = ny;
                rear++;
            }
        }
    }
}
    1b90:	66 96       	adiw	r28, 0x16	; 22
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <choose_next_direction>:

// ================== Choose Next Direction ==================
uint8 choose_next_direction(void) {
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	27 97       	sbiw	r28, 0x07	; 7
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    uint8 best_dir = heading;
    1bb6:	80 91 af 01 	lds	r24, 0x01AF
    1bba:	8f 83       	std	Y+7, r24	; 0x07
    uint8 min_dist = 255;
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	8e 83       	std	Y+6, r24	; 0x06
    for (uint8 dir = 0; dir < 4; dir++) {
    1bc0:	1d 82       	std	Y+5, r1	; 0x05
    1bc2:	73 c0       	rjmp	.+230    	; 0x1caa <choose_next_direction+0x108>
        int nx = pos_x + dx[dir];
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	fc 01       	movw	r30, r24
    1bd0:	ee 56       	subi	r30, 0x6E	; 110
    1bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd4:	20 81       	ld	r18, Z
    1bd6:	31 81       	ldd	r19, Z+1	; 0x01
    1bd8:	80 91 ab 01 	lds	r24, 0x01AB
    1bdc:	90 91 ac 01 	lds	r25, 0x01AC
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
        int ny = pos_y + dy[dir];
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e6 56       	subi	r30, 0x66	; 102
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	20 81       	ld	r18, Z
    1bfa:	31 81       	ldd	r19, Z+1	; 0x01
    1bfc:	80 91 ad 01 	lds	r24, 0x01AD
    1c00:	90 91 ae 01 	lds	r25, 0x01AE
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	99 23       	and	r25, r25
    1c12:	0c f4       	brge	.+2      	; 0x1c16 <choose_next_direction+0x74>
    1c14:	47 c0       	rjmp	.+142    	; 0x1ca4 <choose_next_direction+0x102>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	80 31       	cpi	r24, 0x10	; 16
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <choose_next_direction+0x80>
    1c20:	41 c0       	rjmp	.+130    	; 0x1ca4 <choose_next_direction+0x102>
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	99 23       	and	r25, r25
    1c28:	ec f1       	brlt	.+122    	; 0x1ca4 <choose_next_direction+0x102>
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	80 31       	cpi	r24, 0x10	; 16
    1c30:	91 05       	cpc	r25, r1
    1c32:	c4 f5       	brge	.+112    	; 0x1ca4 <choose_next_direction+0x102>
            if (maze[nx][ny] == 0 && distance[nx][ny] < min_dist) {
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	29 81       	ldd	r18, Y+1	; 0x01
    1c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3c:	82 95       	swap	r24
    1c3e:	92 95       	swap	r25
    1c40:	90 7f       	andi	r25, 0xF0	; 240
    1c42:	98 27       	eor	r25, r24
    1c44:	80 7f       	andi	r24, 0xF0	; 240
    1c46:	98 27       	eor	r25, r24
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	e6 5f       	subi	r30, 0xF6	; 246
    1c50:	fa 4f       	sbci	r31, 0xFA	; 250
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	31 f5       	brne	.+76     	; 0x1ca4 <choose_next_direction+0x102>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	29 81       	ldd	r18, Y+1	; 0x01
    1c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c60:	82 95       	swap	r24
    1c62:	92 95       	swap	r25
    1c64:	90 7f       	andi	r25, 0xF0	; 240
    1c66:	98 27       	eor	r25, r24
    1c68:	80 7f       	andi	r24, 0xF0	; 240
    1c6a:	98 27       	eor	r25, r24
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	fc 01       	movw	r30, r24
    1c72:	e6 5f       	subi	r30, 0xF6	; 246
    1c74:	fb 4f       	sbci	r31, 0xFB	; 251
    1c76:	90 81       	ld	r25, Z
    1c78:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7a:	98 17       	cp	r25, r24
    1c7c:	98 f4       	brcc	.+38     	; 0x1ca4 <choose_next_direction+0x102>
                min_dist = distance[nx][ny];
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	29 81       	ldd	r18, Y+1	; 0x01
    1c84:	3a 81       	ldd	r19, Y+2	; 0x02
    1c86:	82 95       	swap	r24
    1c88:	92 95       	swap	r25
    1c8a:	90 7f       	andi	r25, 0xF0	; 240
    1c8c:	98 27       	eor	r25, r24
    1c8e:	80 7f       	andi	r24, 0xF0	; 240
    1c90:	98 27       	eor	r25, r24
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	fc 01       	movw	r30, r24
    1c98:	e6 5f       	subi	r30, 0xF6	; 246
    1c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8e 83       	std	Y+6, r24	; 0x06
                best_dir = dir;
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	8f 83       	std	Y+7, r24	; 0x07

// ================== Choose Next Direction ==================
uint8 choose_next_direction(void) {
    uint8 best_dir = heading;
    uint8 min_dist = 255;
    for (uint8 dir = 0; dir < 4; dir++) {
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f4       	brcc	.+2      	; 0x1cb2 <choose_next_direction+0x110>
    1cb0:	89 cf       	rjmp	.-238    	; 0x1bc4 <choose_next_direction+0x22>
                min_dist = distance[nx][ny];
                best_dir = dir;
            }
        }
    }
    return best_dir;
    1cb2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1cb4:	27 96       	adiw	r28, 0x07	; 7
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <rotate_to_dir>:

// ================== Rotate To Direction ==================
void rotate_to_dir(uint8 target_dir)
{
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	a8 97       	sbiw	r28, 0x28	; 40
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	88 a7       	std	Y+40, r24	; 0x28
    uint8 diff = (target_dir + 4 - heading) % 4;
    1ce4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 01       	movw	r18, r24
    1cec:	2c 5f       	subi	r18, 0xFC	; 252
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	80 91 af 01 	lds	r24, 0x01AF
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	79 01       	movw	r14, r18
    1cfa:	e8 1a       	sub	r14, r24
    1cfc:	f9 0a       	sbc	r15, r25
    1cfe:	c7 01       	movw	r24, r14
    1d00:	24 e0       	ldi	r18, 0x04	; 4
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	b9 01       	movw	r22, r18
    1d06:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__divmodhi4>
    1d0a:	8f a3       	std	Y+39, r24	; 0x27
    if (diff == 0) return;
    1d0c:	8f a1       	ldd	r24, Y+39	; 0x27
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <rotate_to_dir+0x4e>
    1d12:	60 c1       	rjmp	.+704    	; 0x1fd4 <rotate_to_dir+0x30e>

    float target_angle = 0.0f;
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	8b a3       	std	Y+35, r24	; 0x23
    1d1e:	9c a3       	std	Y+36, r25	; 0x24
    1d20:	ad a3       	std	Y+37, r26	; 0x25
    1d22:	be a3       	std	Y+38, r27	; 0x26
    if (diff == 1)      target_angle = 90.0f;
    1d24:	8f a1       	ldd	r24, Y+39	; 0x27
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	49 f4       	brne	.+18     	; 0x1d3c <rotate_to_dir+0x76>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a4 eb       	ldi	r26, 0xB4	; 180
    1d30:	b2 e4       	ldi	r27, 0x42	; 66
    1d32:	8b a3       	std	Y+35, r24	; 0x23
    1d34:	9c a3       	std	Y+36, r25	; 0x24
    1d36:	ad a3       	std	Y+37, r26	; 0x25
    1d38:	be a3       	std	Y+38, r27	; 0x26
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <rotate_to_dir+0x9e>
    else if (diff == 3) target_angle = -90.0f;
    1d3c:	8f a1       	ldd	r24, Y+39	; 0x27
    1d3e:	83 30       	cpi	r24, 0x03	; 3
    1d40:	49 f4       	brne	.+18     	; 0x1d54 <rotate_to_dir+0x8e>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a4 eb       	ldi	r26, 0xB4	; 180
    1d48:	b2 ec       	ldi	r27, 0xC2	; 194
    1d4a:	8b a3       	std	Y+35, r24	; 0x23
    1d4c:	9c a3       	std	Y+36, r25	; 0x24
    1d4e:	ad a3       	std	Y+37, r26	; 0x25
    1d50:	be a3       	std	Y+38, r27	; 0x26
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <rotate_to_dir+0x9e>
    else                target_angle = 180.0f;
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a4 e3       	ldi	r26, 0x34	; 52
    1d5a:	b3 e4       	ldi	r27, 0x43	; 67
    1d5c:	8b a3       	std	Y+35, r24	; 0x23
    1d5e:	9c a3       	std	Y+36, r25	; 0x24
    1d60:	ad a3       	std	Y+37, r26	; 0x25
    1d62:	be a3       	std	Y+38, r27	; 0x26

    set_velocity = 0.0f;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	80 93 b2 01 	sts	0x01B2, r24
    1d70:	90 93 b3 01 	sts	0x01B3, r25
    1d74:	a0 93 b4 01 	sts	0x01B4, r26
    1d78:	b0 93 b5 01 	sts	0x01B5, r27
    set_angle = target_angle;
    1d7c:	8b a1       	ldd	r24, Y+35	; 0x23
    1d7e:	9c a1       	ldd	r25, Y+36	; 0x24
    1d80:	ad a1       	ldd	r26, Y+37	; 0x25
    1d82:	be a1       	ldd	r27, Y+38	; 0x26
    1d84:	80 93 b6 01 	sts	0x01B6, r24
    1d88:	90 93 b7 01 	sts	0x01B7, r25
    1d8c:	a0 93 b8 01 	sts	0x01B8, r26
    1d90:	b0 93 b9 01 	sts	0x01B9, r27

    long start_count1 = encoder_count1;
    1d94:	80 91 ba 01 	lds	r24, 0x01BA
    1d98:	90 91 bb 01 	lds	r25, 0x01BB
    1d9c:	a0 91 bc 01 	lds	r26, 0x01BC
    1da0:	b0 91 bd 01 	lds	r27, 0x01BD
    1da4:	8f 8f       	std	Y+31, r24	; 0x1f
    1da6:	98 a3       	std	Y+32, r25	; 0x20
    1da8:	a9 a3       	std	Y+33, r26	; 0x21
    1daa:	ba a3       	std	Y+34, r27	; 0x22
    long start_count2 = encoder_count2;
    1dac:	80 91 be 01 	lds	r24, 0x01BE
    1db0:	90 91 bf 01 	lds	r25, 0x01BF
    1db4:	a0 91 c0 01 	lds	r26, 0x01C0
    1db8:	b0 91 c1 01 	lds	r27, 0x01C1
    1dbc:	8b 8f       	std	Y+27, r24	; 0x1b
    1dbe:	9c 8f       	std	Y+28, r25	; 0x1c
    1dc0:	ad 8f       	std	Y+29, r26	; 0x1d
    1dc2:	be 8f       	std	Y+30, r27	; 0x1e
    float current_angle = 0.0f;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e0       	ldi	r26, 0x00	; 0
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	8f 8b       	std	Y+23, r24	; 0x17
    1dce:	98 8f       	std	Y+24, r25	; 0x18
    1dd0:	a9 8f       	std	Y+25, r26	; 0x19
    1dd2:	ba 8f       	std	Y+26, r27	; 0x1a
    1dd4:	da c0       	rjmp	.+436    	; 0x1f8a <rotate_to_dir+0x2c4>
    while (fabs(current_angle) < fabs(target_angle)) {
        long delta_left = encoder_count1 - start_count1;
    1dd6:	20 91 ba 01 	lds	r18, 0x01BA
    1dda:	30 91 bb 01 	lds	r19, 0x01BB
    1dde:	40 91 bc 01 	lds	r20, 0x01BC
    1de2:	50 91 bd 01 	lds	r21, 0x01BD
    1de6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de8:	98 a1       	ldd	r25, Y+32	; 0x20
    1dea:	a9 a1       	ldd	r26, Y+33	; 0x21
    1dec:	ba a1       	ldd	r27, Y+34	; 0x22
    1dee:	79 01       	movw	r14, r18
    1df0:	8a 01       	movw	r16, r20
    1df2:	e8 1a       	sub	r14, r24
    1df4:	f9 0a       	sbc	r15, r25
    1df6:	0a 0b       	sbc	r16, r26
    1df8:	1b 0b       	sbc	r17, r27
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	8b 8b       	std	Y+19, r24	; 0x13
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	ad 8b       	std	Y+21, r26	; 0x15
    1e04:	be 8b       	std	Y+22, r27	; 0x16
        long delta_right = encoder_count2 - start_count2;
    1e06:	20 91 be 01 	lds	r18, 0x01BE
    1e0a:	30 91 bf 01 	lds	r19, 0x01BF
    1e0e:	40 91 c0 01 	lds	r20, 0x01C0
    1e12:	50 91 c1 01 	lds	r21, 0x01C1
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e1c:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e1e:	79 01       	movw	r14, r18
    1e20:	8a 01       	movw	r16, r20
    1e22:	e8 1a       	sub	r14, r24
    1e24:	f9 0a       	sbc	r15, r25
    1e26:	0a 0b       	sbc	r16, r26
    1e28:	1b 0b       	sbc	r17, r27
    1e2a:	d8 01       	movw	r26, r16
    1e2c:	c7 01       	movw	r24, r14
    1e2e:	8f 87       	std	Y+15, r24	; 0x0f
    1e30:	98 8b       	std	Y+16, r25	; 0x10
    1e32:	a9 8b       	std	Y+17, r26	; 0x11
    1e34:	ba 8b       	std	Y+18, r27	; 0x12
        current_angle = ((float)(delta_right - delta_left) / PPR) * (WHEEL_DIAMETER_MM / WHEEL_BASE_MM) * 360.0f;
    1e36:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e38:	38 89       	ldd	r19, Y+16	; 0x10
    1e3a:	49 89       	ldd	r20, Y+17	; 0x11
    1e3c:	5a 89       	ldd	r21, Y+18	; 0x12
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	ad 89       	ldd	r26, Y+21	; 0x15
    1e44:	be 89       	ldd	r27, Y+22	; 0x16
    1e46:	79 01       	movw	r14, r18
    1e48:	8a 01       	movw	r16, r20
    1e4a:	e8 1a       	sub	r14, r24
    1e4c:	f9 0a       	sbc	r15, r25
    1e4e:	0a 0b       	sbc	r16, r26
    1e50:	1b 0b       	sbc	r17, r27
    1e52:	d8 01       	movw	r26, r16
    1e54:	c7 01       	movw	r24, r14
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	48 e4       	ldi	r20, 0x48	; 72
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	2a e9       	ldi	r18, 0x9A	; 154
    1e7c:	39 e9       	ldi	r19, 0x99	; 153
    1e7e:	49 e1       	ldi	r20, 0x19	; 25
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	44 eb       	ldi	r20, 0xB4	; 180
    1e94:	53 e4       	ldi	r21, 0x43	; 67
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8f 8b       	std	Y+23, r24	; 0x17
    1ea0:	98 8f       	std	Y+24, r25	; 0x18
    1ea2:	a9 8f       	std	Y+25, r26	; 0x19
    1ea4:	ba 8f       	std	Y+26, r27	; 0x1a
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 ea       	ldi	r26, 0xA0	; 160
    1eac:	b0 e4       	ldi	r27, 0x40	; 64
    1eae:	8b 87       	std	Y+11, r24	; 0x0b
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	ad 87       	std	Y+13, r26	; 0x0d
    1eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a e7       	ldi	r20, 0x7A	; 122
    1ec4:	55 e4       	ldi	r21, 0x45	; 69
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <rotate_to_dir+0x232>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <rotate_to_dir+0x2b0>
	else if (__tmp > 65535)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <rotate_to_dir+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <rotate_to_dir+0x292>
    1f3a:	80 e9       	ldi	r24, 0x90	; 144
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <rotate_to_dir+0x280>
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <rotate_to_dir+0x274>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <rotate_to_dir+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <rotate_to_dir+0x2bc>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    set_angle = target_angle;

    long start_count1 = encoder_count1;
    long start_count2 = encoder_count2;
    float current_angle = 0.0f;
    while (fabs(current_angle) < fabs(target_angle)) {
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f90:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f92:	7c 01       	movw	r14, r24
    1f94:	8d 01       	movw	r16, r26
    1f96:	e8 94       	clt
    1f98:	17 f9       	bld	r17, 7
    1f9a:	8b a1       	ldd	r24, Y+35	; 0x23
    1f9c:	9c a1       	ldd	r25, Y+36	; 0x24
    1f9e:	ad a1       	ldd	r26, Y+37	; 0x25
    1fa0:	be a1       	ldd	r27, Y+38	; 0x26
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	ad 01       	movw	r20, r26
    1fa6:	5f 77       	andi	r21, 0x7F	; 127
    1fa8:	c8 01       	movw	r24, r16
    1faa:	b7 01       	movw	r22, r14
    1fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	0c f4       	brge	.+2      	; 0x1fb6 <rotate_to_dir+0x2f0>
    1fb4:	10 cf       	rjmp	.-480    	; 0x1dd6 <rotate_to_dir+0x110>
        long delta_right = encoder_count2 - start_count2;
        current_angle = ((float)(delta_right - delta_left) / PPR) * (WHEEL_DIAMETER_MM / WHEEL_BASE_MM) * 360.0f;
        _delay_ms(5);
    }

    set_angle = 0.0f;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	80 93 b6 01 	sts	0x01B6, r24
    1fc2:	90 93 b7 01 	sts	0x01B7, r25
    1fc6:	a0 93 b8 01 	sts	0x01B8, r26
    1fca:	b0 93 b9 01 	sts	0x01B9, r27
    heading = target_dir;
    1fce:	88 a5       	ldd	r24, Y+40	; 0x28
    1fd0:	80 93 af 01 	sts	0x01AF, r24
}
    1fd4:	a8 96       	adiw	r28, 0x28	; 40
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	08 95       	ret

00001fee <move_forward_one_cell>:

// ================== Move Forward One Cell ==================
void move_forward_one_cell(void)
{
    1fee:	af 92       	push	r10
    1ff0:	bf 92       	push	r11
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	6e 97       	sbiw	r28, 0x1e	; 30
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    set_velocity = 100.0f;
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a8 ec       	ldi	r26, 0xC8	; 200
    2018:	b2 e4       	ldi	r27, 0x42	; 66
    201a:	80 93 b2 01 	sts	0x01B2, r24
    201e:	90 93 b3 01 	sts	0x01B3, r25
    2022:	a0 93 b4 01 	sts	0x01B4, r26
    2026:	b0 93 b5 01 	sts	0x01B5, r27
    set_angle = 0.0f;
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	80 93 b6 01 	sts	0x01B6, r24
    2036:	90 93 b7 01 	sts	0x01B7, r25
    203a:	a0 93 b8 01 	sts	0x01B8, r26
    203e:	b0 93 b9 01 	sts	0x01B9, r27

    long start_count1 = encoder_count1;
    2042:	80 91 ba 01 	lds	r24, 0x01BA
    2046:	90 91 bb 01 	lds	r25, 0x01BB
    204a:	a0 91 bc 01 	lds	r26, 0x01BC
    204e:	b0 91 bd 01 	lds	r27, 0x01BD
    2052:	8b 8f       	std	Y+27, r24	; 0x1b
    2054:	9c 8f       	std	Y+28, r25	; 0x1c
    2056:	ad 8f       	std	Y+29, r26	; 0x1d
    2058:	be 8f       	std	Y+30, r27	; 0x1e
    long start_count2 = encoder_count2;
    205a:	80 91 be 01 	lds	r24, 0x01BE
    205e:	90 91 bf 01 	lds	r25, 0x01BF
    2062:	a0 91 c0 01 	lds	r26, 0x01C0
    2066:	b0 91 c1 01 	lds	r27, 0x01C1
    206a:	8f 8b       	std	Y+23, r24	; 0x17
    206c:	98 8f       	std	Y+24, r25	; 0x18
    206e:	a9 8f       	std	Y+25, r26	; 0x19
    2070:	ba 8f       	std	Y+26, r27	; 0x1a
    float current_distance = 0.0f;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	ad 8b       	std	Y+21, r26	; 0x15
    2080:	be 8b       	std	Y+22, r27	; 0x16
    2082:	c0 c0       	rjmp	.+384    	; 0x2204 <move_forward_one_cell+0x216>

    while (current_distance < CELL_SIZE_MM) {
        long avg_counts = ((encoder_count1 - start_count1) + (encoder_count2 - start_count2)) / 2;
    2084:	20 91 ba 01 	lds	r18, 0x01BA
    2088:	30 91 bb 01 	lds	r19, 0x01BB
    208c:	40 91 bc 01 	lds	r20, 0x01BC
    2090:	50 91 bd 01 	lds	r21, 0x01BD
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	ad 8d       	ldd	r26, Y+29	; 0x1d
    209a:	be 8d       	ldd	r27, Y+30	; 0x1e
    209c:	79 01       	movw	r14, r18
    209e:	8a 01       	movw	r16, r20
    20a0:	e8 1a       	sub	r14, r24
    20a2:	f9 0a       	sbc	r15, r25
    20a4:	0a 0b       	sbc	r16, r26
    20a6:	1b 0b       	sbc	r17, r27
    20a8:	20 91 be 01 	lds	r18, 0x01BE
    20ac:	30 91 bf 01 	lds	r19, 0x01BF
    20b0:	40 91 c0 01 	lds	r20, 0x01C0
    20b4:	50 91 c1 01 	lds	r21, 0x01C1
    20b8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ba:	98 8d       	ldd	r25, Y+24	; 0x18
    20bc:	a9 8d       	ldd	r26, Y+25	; 0x19
    20be:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20c0:	59 01       	movw	r10, r18
    20c2:	6a 01       	movw	r12, r20
    20c4:	a8 1a       	sub	r10, r24
    20c6:	b9 0a       	sbc	r11, r25
    20c8:	ca 0a       	sbc	r12, r26
    20ca:	db 0a       	sbc	r13, r27
    20cc:	d6 01       	movw	r26, r12
    20ce:	c5 01       	movw	r24, r10
    20d0:	8e 0d       	add	r24, r14
    20d2:	9f 1d       	adc	r25, r15
    20d4:	a0 1f       	adc	r26, r16
    20d6:	b1 1f       	adc	r27, r17
    20d8:	22 e0       	ldi	r18, 0x02	; 2
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <__divmodsi4>
    20e8:	da 01       	movw	r26, r20
    20ea:	c9 01       	movw	r24, r18
    20ec:	8f 87       	std	Y+15, r24	; 0x0f
    20ee:	98 8b       	std	Y+16, r25	; 0x10
    20f0:	a9 8b       	std	Y+17, r26	; 0x11
    20f2:	ba 8b       	std	Y+18, r27	; 0x12
        current_distance = (float)avg_counts * DIST_PER_COUNT_MM;
    20f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    20f6:	78 89       	ldd	r23, Y+16	; 0x10
    20f8:	89 89       	ldd	r24, Y+17	; 0x11
    20fa:	9a 89       	ldd	r25, Y+18	; 0x12
    20fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	2a e3       	ldi	r18, 0x3A	; 58
    210a:	36 e4       	ldi	r19, 0x46	; 70
    210c:	41 e7       	ldi	r20, 0x71	; 113
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	ad 8b       	std	Y+21, r26	; 0x15
    211e:	be 8b       	std	Y+22, r27	; 0x16
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 ea       	ldi	r26, 0xA0	; 160
    2126:	b0 e4       	ldi	r27, 0x40	; 64
    2128:	8b 87       	std	Y+11, r24	; 0x0b
    212a:	9c 87       	std	Y+12, r25	; 0x0c
    212c:	ad 87       	std	Y+13, r26	; 0x0d
    212e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6b 85       	ldd	r22, Y+11	; 0x0b
    2132:	7c 85       	ldd	r23, Y+12	; 0x0c
    2134:	8d 85       	ldd	r24, Y+13	; 0x0d
    2136:	9e 85       	ldd	r25, Y+14	; 0x0e
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	55 e4       	ldi	r21, 0x45	; 69
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8f 83       	std	Y+7, r24	; 0x07
    214a:	98 87       	std	Y+8, r25	; 0x08
    214c:	a9 87       	std	Y+9, r26	; 0x09
    214e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <move_forward_one_cell+0x184>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <move_forward_one_cell+0x202>
	else if (__tmp > 65535)
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <move_forward_one_cell+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <move_forward_one_cell+0x1e4>
    21b4:	80 e9       	ldi	r24, 0x90	; 144
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <move_forward_one_cell+0x1d2>
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <move_forward_one_cell+0x1c6>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <move_forward_one_cell+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <move_forward_one_cell+0x20e>
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01

    long start_count1 = encoder_count1;
    long start_count2 = encoder_count2;
    float current_distance = 0.0f;

    while (current_distance < CELL_SIZE_MM) {
    2204:	6b 89       	ldd	r22, Y+19	; 0x13
    2206:	7c 89       	ldd	r23, Y+20	; 0x14
    2208:	8d 89       	ldd	r24, Y+21	; 0x15
    220a:	9e 89       	ldd	r25, Y+22	; 0x16
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	44 e3       	ldi	r20, 0x34	; 52
    2212:	53 e4       	ldi	r21, 0x43	; 67
    2214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	0c f4       	brge	.+2      	; 0x221e <move_forward_one_cell+0x230>
    221c:	33 cf       	rjmp	.-410    	; 0x2084 <move_forward_one_cell+0x96>
        long avg_counts = ((encoder_count1 - start_count1) + (encoder_count2 - start_count2)) / 2;
        current_distance = (float)avg_counts * DIST_PER_COUNT_MM;
        _delay_ms(5);
    }
    set_velocity = 0.0f;
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a0 e0       	ldi	r26, 0x00	; 0
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	80 93 b2 01 	sts	0x01B2, r24
    222a:	90 93 b3 01 	sts	0x01B3, r25
    222e:	a0 93 b4 01 	sts	0x01B4, r26
    2232:	b0 93 b5 01 	sts	0x01B5, r27

    pos_x += dx[heading];
    2236:	80 91 af 01 	lds	r24, 0x01AF
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	fc 01       	movw	r30, r24
    2244:	ee 56       	subi	r30, 0x6E	; 110
    2246:	fe 4f       	sbci	r31, 0xFE	; 254
    2248:	20 81       	ld	r18, Z
    224a:	31 81       	ldd	r19, Z+1	; 0x01
    224c:	80 91 ab 01 	lds	r24, 0x01AB
    2250:	90 91 ac 01 	lds	r25, 0x01AC
    2254:	82 0f       	add	r24, r18
    2256:	93 1f       	adc	r25, r19
    2258:	90 93 ac 01 	sts	0x01AC, r25
    225c:	80 93 ab 01 	sts	0x01AB, r24
    pos_y += dy[heading];
    2260:	80 91 af 01 	lds	r24, 0x01AF
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	fc 01       	movw	r30, r24
    226e:	e6 56       	subi	r30, 0x66	; 102
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	20 81       	ld	r18, Z
    2274:	31 81       	ldd	r19, Z+1	; 0x01
    2276:	80 91 ad 01 	lds	r24, 0x01AD
    227a:	90 91 ae 01 	lds	r25, 0x01AE
    227e:	82 0f       	add	r24, r18
    2280:	93 1f       	adc	r25, r19
    2282:	90 93 ae 01 	sts	0x01AE, r25
    2286:	80 93 ad 01 	sts	0x01AD, r24
}
    228a:	6e 96       	adiw	r28, 0x1e	; 30
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	bf 90       	pop	r11
    22a8:	af 90       	pop	r10
    22aa:	08 95       	ret

000022ac <build_shortest_path>:

// ================== Build Shortest Path ==================
void build_shortest_path(int goal_x, int goal_y) {
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	ca 51       	subi	r28, 0x1A	; 26
    22b6:	d4 40       	sbci	r29, 0x04	; 4
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	fe 01       	movw	r30, r28
    22c4:	e9 5e       	subi	r30, 0xE9	; 233
    22c6:	fb 4f       	sbci	r31, 0xFB	; 251
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 5e       	subi	r30, 0xE7	; 231
    22d0:	fb 4f       	sbci	r31, 0xFB	; 251
    22d2:	71 83       	std	Z+1, r23	; 0x01
    22d4:	60 83       	st	Z, r22
    path_len = 0;
    22d6:	10 92 b1 01 	sts	0x01B1, r1
    22da:	10 92 b0 01 	sts	0x01B0, r1
    int cx = 0, cy = 0;
    22de:	1e 8a       	std	Y+22, r1	; 0x16
    22e0:	1d 8a       	std	Y+21, r1	; 0x15
    22e2:	1c 8a       	std	Y+20, r1	; 0x14
    22e4:	1b 8a       	std	Y+19, r1	; 0x13
    int gx = goal_x, gy = goal_y;
    22e6:	fe 01       	movw	r30, r28
    22e8:	e9 5e       	subi	r30, 0xE9	; 233
    22ea:	fb 4f       	sbci	r31, 0xFB	; 251
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	9a 8b       	std	Y+18, r25	; 0x12
    22f2:	89 8b       	std	Y+17, r24	; 0x11
    22f4:	fe 01       	movw	r30, r28
    22f6:	e7 5e       	subi	r30, 0xE7	; 231
    22f8:	fb 4f       	sbci	r31, 0xFB	; 251
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	98 8b       	std	Y+16, r25	; 0x10
    2300:	8f 87       	std	Y+15, r24	; 0x0f
    if (distance[gx][gy] == 255) return;
    2302:	89 89       	ldd	r24, Y+17	; 0x11
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	2f 85       	ldd	r18, Y+15	; 0x0f
    2308:	38 89       	ldd	r19, Y+16	; 0x10
    230a:	82 95       	swap	r24
    230c:	92 95       	swap	r25
    230e:	90 7f       	andi	r25, 0xF0	; 240
    2310:	98 27       	eor	r25, r24
    2312:	80 7f       	andi	r24, 0xF0	; 240
    2314:	98 27       	eor	r25, r24
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
    231a:	fc 01       	movw	r30, r24
    231c:	e6 5f       	subi	r30, 0xF6	; 246
    231e:	fb 4f       	sbci	r31, 0xFB	; 251
    2320:	80 81       	ld	r24, Z
    2322:	8f 3f       	cpi	r24, 0xFF	; 255
    2324:	09 f4       	brne	.+2      	; 0x2328 <build_shortest_path+0x7c>
    2326:	21 c1       	rjmp	.+578    	; 0x256a <build_shortest_path+0x2be>

    int temp_path_x[MAX_PATH];
    int temp_path_y[MAX_PATH];
    int temp_path_len = 0;
    2328:	1e 86       	std	Y+14, r1	; 0x0e
    232a:	1d 86       	std	Y+13, r1	; 0x0d

    int x = cx, y = cy;
    232c:	8d 89       	ldd	r24, Y+21	; 0x15
    232e:	9e 89       	ldd	r25, Y+22	; 0x16
    2330:	9c 87       	std	Y+12, r25	; 0x0c
    2332:	8b 87       	std	Y+11, r24	; 0x0b
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	9a 87       	std	Y+10, r25	; 0x0a
    233a:	89 87       	std	Y+9, r24	; 0x09
    233c:	ca c0       	rjmp	.+404    	; 0x24d2 <build_shortest_path+0x226>
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	88 87       	std	Y+8, r24	; 0x08
        for (uint8 dir = 0; dir < 4; dir++) {
    2342:	1f 82       	std	Y+7, r1	; 0x07
    2344:	5a c0       	rjmp	.+180    	; 0x23fa <build_shortest_path+0x14e>
            int nx = x + dx[dir];
    2346:	8f 81       	ldd	r24, Y+7	; 0x07
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	fc 01       	movw	r30, r24
    2352:	ee 56       	subi	r30, 0x6E	; 110
    2354:	fe 4f       	sbci	r31, 0xFE	; 254
    2356:	20 81       	ld	r18, Z
    2358:	31 81       	ldd	r19, Z+1	; 0x01
    235a:	8b 85       	ldd	r24, Y+11	; 0x0b
    235c:	9c 85       	ldd	r25, Y+12	; 0x0c
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
            int ny = y + dy[dir];
    2366:	8f 81       	ldd	r24, Y+7	; 0x07
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	fc 01       	movw	r30, r24
    2372:	e6 56       	subi	r30, 0x66	; 102
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	20 81       	ld	r18, Z
    2378:	31 81       	ldd	r19, Z+1	; 0x01
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	82 0f       	add	r24, r18
    2380:	93 1f       	adc	r25, r19
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	99 23       	and	r25, r25
    238c:	9c f1       	brlt	.+102    	; 0x23f4 <build_shortest_path+0x148>
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	80 31       	cpi	r24, 0x10	; 16
    2394:	91 05       	cpc	r25, r1
    2396:	74 f5       	brge	.+92     	; 0x23f4 <build_shortest_path+0x148>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	99 23       	and	r25, r25
    239e:	54 f1       	brlt	.+84     	; 0x23f4 <build_shortest_path+0x148>
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	80 31       	cpi	r24, 0x10	; 16
    23a6:	91 05       	cpc	r25, r1
    23a8:	2c f5       	brge	.+74     	; 0x23f4 <build_shortest_path+0x148>
                if (distance[nx][ny] < distance[x][y]) {
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	2b 81       	ldd	r18, Y+3	; 0x03
    23b0:	3c 81       	ldd	r19, Y+4	; 0x04
    23b2:	82 95       	swap	r24
    23b4:	92 95       	swap	r25
    23b6:	90 7f       	andi	r25, 0xF0	; 240
    23b8:	98 27       	eor	r25, r24
    23ba:	80 7f       	andi	r24, 0xF0	; 240
    23bc:	98 27       	eor	r25, r24
    23be:	82 0f       	add	r24, r18
    23c0:	93 1f       	adc	r25, r19
    23c2:	fc 01       	movw	r30, r24
    23c4:	e6 5f       	subi	r30, 0xF6	; 246
    23c6:	fb 4f       	sbci	r31, 0xFB	; 251
    23c8:	40 81       	ld	r20, Z
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	29 85       	ldd	r18, Y+9	; 0x09
    23d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    23d2:	82 95       	swap	r24
    23d4:	92 95       	swap	r25
    23d6:	90 7f       	andi	r25, 0xF0	; 240
    23d8:	98 27       	eor	r25, r24
    23da:	80 7f       	andi	r24, 0xF0	; 240
    23dc:	98 27       	eor	r25, r24
    23de:	82 0f       	add	r24, r18
    23e0:	93 1f       	adc	r25, r19
    23e2:	fc 01       	movw	r30, r24
    23e4:	e6 5f       	subi	r30, 0xF6	; 246
    23e6:	fb 4f       	sbci	r31, 0xFB	; 251
    23e8:	80 81       	ld	r24, Z
    23ea:	48 17       	cp	r20, r24
    23ec:	18 f4       	brcc	.+6      	; 0x23f4 <build_shortest_path+0x148>
                    next_dir = dir;
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	88 87       	std	Y+8, r24	; 0x08
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <build_shortest_path+0x156>
    int temp_path_len = 0;

    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
        uint8 next_dir = 0xFF;
        for (uint8 dir = 0; dir < 4; dir++) {
    23f4:	8f 81       	ldd	r24, Y+7	; 0x07
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	8f 83       	std	Y+7, r24	; 0x07
    23fa:	8f 81       	ldd	r24, Y+7	; 0x07
    23fc:	84 30       	cpi	r24, 0x04	; 4
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <build_shortest_path+0x156>
    2400:	a2 cf       	rjmp	.-188    	; 0x2346 <build_shortest_path+0x9a>
                    next_dir = dir;
                    break;
                }
            }
        }
        if (next_dir == 0xFF) break;
    2402:	88 85       	ldd	r24, Y+8	; 0x08
    2404:	8f 3f       	cpi	r24, 0xFF	; 255
    2406:	09 f4       	brne	.+2      	; 0x240a <build_shortest_path+0x15e>
    2408:	74 c0       	rjmp	.+232    	; 0x24f2 <build_shortest_path+0x246>
        temp_path_x[temp_path_len] = x + dx[next_dir];
    240a:	6d 85       	ldd	r22, Y+13	; 0x0d
    240c:	7e 85       	ldd	r23, Y+14	; 0x0e
    240e:	88 85       	ldd	r24, Y+8	; 0x08
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	fc 01       	movw	r30, r24
    241a:	ee 56       	subi	r30, 0x6E	; 110
    241c:	fe 4f       	sbci	r31, 0xFE	; 254
    241e:	20 81       	ld	r18, Z
    2420:	31 81       	ldd	r19, Z+1	; 0x01
    2422:	8b 85       	ldd	r24, Y+11	; 0x0b
    2424:	9c 85       	ldd	r25, Y+12	; 0x0c
    2426:	a9 01       	movw	r20, r18
    2428:	48 0f       	add	r20, r24
    242a:	59 1f       	adc	r21, r25
    242c:	9b 01       	movw	r18, r22
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	ce 01       	movw	r24, r28
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	82 0f       	add	r24, r18
    2438:	93 1f       	adc	r25, r19
    243a:	fc 01       	movw	r30, r24
    243c:	76 96       	adiw	r30, 0x16	; 22
    243e:	51 83       	std	Z+1, r21	; 0x01
    2440:	40 83       	st	Z, r20
        temp_path_y[temp_path_len] = y + dy[next_dir];
    2442:	6d 85       	ldd	r22, Y+13	; 0x0d
    2444:	7e 85       	ldd	r23, Y+14	; 0x0e
    2446:	88 85       	ldd	r24, Y+8	; 0x08
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	fc 01       	movw	r30, r24
    2452:	e6 56       	subi	r30, 0x66	; 102
    2454:	fe 4f       	sbci	r31, 0xFE	; 254
    2456:	20 81       	ld	r18, Z
    2458:	31 81       	ldd	r19, Z+1	; 0x01
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	a9 01       	movw	r20, r18
    2460:	48 0f       	add	r20, r24
    2462:	59 1f       	adc	r21, r25
    2464:	9e 01       	movw	r18, r28
    2466:	29 5e       	subi	r18, 0xE9	; 233
    2468:	3d 4f       	sbci	r19, 0xFD	; 253
    246a:	cb 01       	movw	r24, r22
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	f9 01       	movw	r30, r18
    2472:	e8 0f       	add	r30, r24
    2474:	f9 1f       	adc	r31, r25
    2476:	51 83       	std	Z+1, r21	; 0x01
    2478:	40 83       	st	Z, r20
        path_dir[temp_path_len] = next_dir;
    247a:	8d 85       	ldd	r24, Y+13	; 0x0d
    247c:	9e 85       	ldd	r25, Y+14	; 0x0e
    247e:	fc 01       	movw	r30, r24
    2480:	e6 5f       	subi	r30, 0xF6	; 246
    2482:	f8 4f       	sbci	r31, 0xF8	; 248
    2484:	88 85       	ldd	r24, Y+8	; 0x08
    2486:	80 83       	st	Z, r24
        temp_path_len++;
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	9e 85       	ldd	r25, Y+14	; 0x0e
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	9e 87       	std	Y+14, r25	; 0x0e
    2490:	8d 87       	std	Y+13, r24	; 0x0d
        x += dx[next_dir];
    2492:	88 85       	ldd	r24, Y+8	; 0x08
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	fc 01       	movw	r30, r24
    249e:	ee 56       	subi	r30, 0x6E	; 110
    24a0:	fe 4f       	sbci	r31, 0xFE	; 254
    24a2:	20 81       	ld	r18, Z
    24a4:	31 81       	ldd	r19, Z+1	; 0x01
    24a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24aa:	82 0f       	add	r24, r18
    24ac:	93 1f       	adc	r25, r19
    24ae:	9c 87       	std	Y+12, r25	; 0x0c
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
        y += dy[next_dir];
    24b2:	88 85       	ldd	r24, Y+8	; 0x08
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	fc 01       	movw	r30, r24
    24be:	e6 56       	subi	r30, 0x66	; 102
    24c0:	fe 4f       	sbci	r31, 0xFE	; 254
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	9a 87       	std	Y+10, r25	; 0x0a
    24d0:	89 87       	std	Y+9, r24	; 0x09
    int temp_path_x[MAX_PATH];
    int temp_path_y[MAX_PATH];
    int temp_path_len = 0;

    int x = cx, y = cy;
    while (!(x == gx && y == gy)) {
    24d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    24d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    24d6:	89 89       	ldd	r24, Y+17	; 0x11
    24d8:	9a 89       	ldd	r25, Y+18	; 0x12
    24da:	28 17       	cp	r18, r24
    24dc:	39 07       	cpc	r19, r25
    24de:	09 f0       	breq	.+2      	; 0x24e2 <build_shortest_path+0x236>
    24e0:	2e cf       	rjmp	.-420    	; 0x233e <build_shortest_path+0x92>
    24e2:	29 85       	ldd	r18, Y+9	; 0x09
    24e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	98 89       	ldd	r25, Y+16	; 0x10
    24ea:	28 17       	cp	r18, r24
    24ec:	39 07       	cpc	r19, r25
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <build_shortest_path+0x246>
    24f0:	26 cf       	rjmp	.-436    	; 0x233e <build_shortest_path+0x92>
        path_dir[temp_path_len] = next_dir;
        temp_path_len++;
        x += dx[next_dir];
        y += dy[next_dir];
    }
    path_len = temp_path_len;
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	90 93 b1 01 	sts	0x01B1, r25
    24fa:	80 93 b0 01 	sts	0x01B0, r24
    for (int i = 0; i < path_len; i++) {
    24fe:	1a 82       	std	Y+2, r1	; 0x02
    2500:	19 82       	std	Y+1, r1	; 0x01
    2502:	2a c0       	rjmp	.+84     	; 0x2558 <build_shortest_path+0x2ac>
        path_x[i] = temp_path_x[i];
    2504:	49 81       	ldd	r20, Y+1	; 0x01
    2506:	5a 81       	ldd	r21, Y+2	; 0x02
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	9c 01       	movw	r18, r24
    250e:	22 0f       	add	r18, r18
    2510:	33 1f       	adc	r19, r19
    2512:	ce 01       	movw	r24, r28
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	fc 01       	movw	r30, r24
    251c:	76 96       	adiw	r30, 0x16	; 22
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	fa 01       	movw	r30, r20
    2524:	e6 53       	subi	r30, 0x36	; 54
    2526:	fe 4f       	sbci	r31, 0xFE	; 254
    2528:	80 83       	st	Z, r24
        path_y[i] = temp_path_y[i];
    252a:	49 81       	ldd	r20, Y+1	; 0x01
    252c:	5a 81       	ldd	r21, Y+2	; 0x02
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	9e 01       	movw	r18, r28
    2534:	29 5e       	subi	r18, 0xE9	; 233
    2536:	3d 4f       	sbci	r19, 0xFD	; 253
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	f9 01       	movw	r30, r18
    253e:	e8 0f       	add	r30, r24
    2540:	f9 1f       	adc	r31, r25
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	fa 01       	movw	r30, r20
    2548:	e6 5f       	subi	r30, 0xF6	; 246
    254a:	f7 4f       	sbci	r31, 0xF7	; 247
    254c:	80 83       	st	Z, r24
        temp_path_len++;
        x += dx[next_dir];
        y += dy[next_dir];
    }
    path_len = temp_path_len;
    for (int i = 0; i < path_len; i++) {
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	3a 81       	ldd	r19, Y+2	; 0x02
    255c:	80 91 b0 01 	lds	r24, 0x01B0
    2560:	90 91 b1 01 	lds	r25, 0x01B1
    2564:	28 17       	cp	r18, r24
    2566:	39 07       	cpc	r19, r25
    2568:	68 f2       	brcs	.-102    	; 0x2504 <build_shortest_path+0x258>
        path_x[i] = temp_path_x[i];
        path_y[i] = temp_path_y[i];
    }
}
    256a:	c6 5e       	subi	r28, 0xE6	; 230
    256c:	db 4f       	sbci	r29, 0xFB	; 251
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <replay_path>:

// ================== Replay Path ==================
void replay_path(void) {
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	ee 97       	sbiw	r28, 0x3e	; 62
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
    2592:	0e 94 f6 24 	call	0x49ec	; 0x49ec <LCD_clearScreen>
    LCD_displayString("REPLAYING...");
    2596:	80 e6       	ldi	r24, 0x60	; 96
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 4f 24 	call	0x489e	; 0x489e <LCD_displayString>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a6 e9       	ldi	r26, 0x96	; 150
    25a4:	b3 e4       	ldi	r27, 0x43	; 67
    25a6:	8f a3       	std	Y+39, r24	; 0x27
    25a8:	98 a7       	std	Y+40, r25	; 0x28
    25aa:	a9 a7       	std	Y+41, r26	; 0x29
    25ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6f a1       	ldd	r22, Y+39	; 0x27
    25b0:	78 a5       	ldd	r23, Y+40	; 0x28
    25b2:	89 a5       	ldd	r24, Y+41	; 0x29
    25b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	55 e4       	ldi	r21, 0x45	; 69
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8b a3       	std	Y+35, r24	; 0x23
    25c8:	9c a3       	std	Y+36, r25	; 0x24
    25ca:	ad a3       	std	Y+37, r26	; 0x25
    25cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ce:	6b a1       	ldd	r22, Y+35	; 0x23
    25d0:	7c a1       	ldd	r23, Y+36	; 0x24
    25d2:	8d a1       	ldd	r24, Y+37	; 0x25
    25d4:	9e a1       	ldd	r25, Y+38	; 0x26
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <replay_path+0x72>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9a a3       	std	Y+34, r25	; 0x22
    25ec:	89 a3       	std	Y+33, r24	; 0x21
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <replay_path+0xf0>
	else if (__tmp > 65535)
    25f0:	6b a1       	ldd	r22, Y+35	; 0x23
    25f2:	7c a1       	ldd	r23, Y+36	; 0x24
    25f4:	8d a1       	ldd	r24, Y+37	; 0x25
    25f6:	9e a1       	ldd	r25, Y+38	; 0x26
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <replay_path+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6f a1       	ldd	r22, Y+39	; 0x27
    260a:	78 a5       	ldd	r23, Y+40	; 0x28
    260c:	89 a5       	ldd	r24, Y+41	; 0x29
    260e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9a a3       	std	Y+34, r25	; 0x22
    262e:	89 a3       	std	Y+33, r24	; 0x21
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <replay_path+0xd2>
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	98 a3       	std	Y+32, r25	; 0x20
    2638:	8f 8f       	std	Y+31, r24	; 0x1f
    263a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263c:	98 a1       	ldd	r25, Y+32	; 0x20
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <replay_path+0xc0>
    2642:	98 a3       	std	Y+32, r25	; 0x20
    2644:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	89 a1       	ldd	r24, Y+33	; 0x21
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	89 a1       	ldd	r24, Y+33	; 0x21
    2652:	9a a1       	ldd	r25, Y+34	; 0x22
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <replay_path+0xb4>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <replay_path+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6b a1       	ldd	r22, Y+35	; 0x23
    265c:	7c a1       	ldd	r23, Y+36	; 0x24
    265e:	8d a1       	ldd	r24, Y+37	; 0x25
    2660:	9e a1       	ldd	r25, Y+38	; 0x26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9a a1       	ldd	r25, Y+34	; 0x22
    2672:	9e 8f       	std	Y+30, r25	; 0x1e
    2674:	8d 8f       	std	Y+29, r24	; 0x1d
    2676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2678:	9e 8d       	ldd	r25, Y+30	; 0x1e
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <replay_path+0xfc>
    267e:	9e 8f       	std	Y+30, r25	; 0x1e
    2680:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(300);

    cli();
    2682:	f8 94       	cli

    pos_x = 0;
    2684:	10 92 ac 01 	sts	0x01AC, r1
    2688:	10 92 ab 01 	sts	0x01AB, r1
    pos_y = 0;
    268c:	10 92 ae 01 	sts	0x01AE, r1
    2690:	10 92 ad 01 	sts	0x01AD, r1
    heading = 0;
    2694:	10 92 af 01 	sts	0x01AF, r1

    for (uint16_t i = 0; i < path_len; i++) {
    2698:	1d a6       	std	Y+45, r1	; 0x2d
    269a:	1c a6       	std	Y+44, r1	; 0x2c
    269c:	bd c0       	rjmp	.+378    	; 0x2818 <replay_path+0x29a>
        uint8 dir = path_dir[i];
    269e:	8c a5       	ldd	r24, Y+44	; 0x2c
    26a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    26a2:	fc 01       	movw	r30, r24
    26a4:	e6 5f       	subi	r30, 0xF6	; 246
    26a6:	f8 4f       	sbci	r31, 0xF8	; 248
    26a8:	80 81       	ld	r24, Z
    26aa:	8b a7       	std	Y+43, r24	; 0x2b
        rotate_to_dir(dir);
    26ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ae:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <rotate_to_dir>
        move_forward_one_cell();
    26b2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <move_forward_one_cell>

        char buf[17];
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
    26b6:	20 91 ab 01 	lds	r18, 0x01AB
    26ba:	30 91 ac 01 	lds	r19, 0x01AC
    26be:	40 91 ad 01 	lds	r20, 0x01AD
    26c2:	50 91 ae 01 	lds	r21, 0x01AE
    26c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c8:	68 2f       	mov	r22, r24
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	8d b7       	in	r24, 0x3d	; 61
    26ce:	9e b7       	in	r25, 0x3e	; 62
    26d0:	0c 97       	sbiw	r24, 0x0c	; 12
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	9e bf       	out	0x3e, r25	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	8d bf       	out	0x3d, r24	; 61
    26dc:	ed b7       	in	r30, 0x3d	; 61
    26de:	fe b7       	in	r31, 0x3e	; 62
    26e0:	31 96       	adiw	r30, 0x01	; 1
    26e2:	ce 01       	movw	r24, r28
    26e4:	8e 96       	adiw	r24, 0x2e	; 46
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	81 e1       	ldi	r24, 0x11	; 17
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	93 83       	std	Z+3, r25	; 0x03
    26f0:	82 83       	std	Z+2, r24	; 0x02
    26f2:	8d e6       	ldi	r24, 0x6D	; 109
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	95 83       	std	Z+5, r25	; 0x05
    26f8:	84 83       	std	Z+4, r24	; 0x04
    26fa:	37 83       	std	Z+7, r19	; 0x07
    26fc:	26 83       	std	Z+6, r18	; 0x06
    26fe:	51 87       	std	Z+9, r21	; 0x09
    2700:	40 87       	std	Z+8, r20	; 0x08
    2702:	73 87       	std	Z+11, r23	; 0x0b
    2704:	62 87       	std	Z+10, r22	; 0x0a
    2706:	0e 94 6f 28 	call	0x50de	; 0x50de <snprintf>
    270a:	8d b7       	in	r24, 0x3d	; 61
    270c:	9e b7       	in	r25, 0x3e	; 62
    270e:	0c 96       	adiw	r24, 0x0c	; 12
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	9e bf       	out	0x3e, r25	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	8d bf       	out	0x3d, r24	; 61
        LCD_displayStringRowColumn(1, 0, buf);
    271a:	9e 01       	movw	r18, r28
    271c:	22 5d       	subi	r18, 0xD2	; 210
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	a9 01       	movw	r20, r18
    2726:	0e 94 ba 24 	call	0x4974	; 0x4974 <LCD_displayStringRowColumn>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 ea       	ldi	r26, 0xA0	; 160
    2730:	b2 e4       	ldi	r27, 0x42	; 66
    2732:	89 8f       	std	Y+25, r24	; 0x19
    2734:	9a 8f       	std	Y+26, r25	; 0x1a
    2736:	ab 8f       	std	Y+27, r26	; 0x1b
    2738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	69 8d       	ldd	r22, Y+25	; 0x19
    273c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    273e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	55 e4       	ldi	r21, 0x45	; 69
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8d 8b       	std	Y+21, r24	; 0x15
    2754:	9e 8b       	std	Y+22, r25	; 0x16
    2756:	af 8b       	std	Y+23, r26	; 0x17
    2758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <replay_path+0x1fe>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9c 8b       	std	Y+20, r25	; 0x14
    2778:	8b 8b       	std	Y+19, r24	; 0x13
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <replay_path+0x27c>
	else if (__tmp > 65535)
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <replay_path+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	69 8d       	ldd	r22, Y+25	; 0x19
    2796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <replay_path+0x25e>
    27be:	80 e9       	ldi	r24, 0x90	; 144
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	9a 8b       	std	Y+18, r25	; 0x12
    27c4:	89 8b       	std	Y+17, r24	; 0x11
    27c6:	89 89       	ldd	r24, Y+17	; 0x11
    27c8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <replay_path+0x24c>
    27ce:	9a 8b       	std	Y+18, r25	; 0x12
    27d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8b 89       	ldd	r24, Y+19	; 0x13
    27d4:	9c 89       	ldd	r25, Y+20	; 0x14
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9c 8b       	std	Y+20, r25	; 0x14
    27da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8b 89       	ldd	r24, Y+19	; 0x13
    27de:	9c 89       	ldd	r25, Y+20	; 0x14
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <replay_path+0x240>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <replay_path+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	8b 89       	ldd	r24, Y+19	; 0x13
    27fc:	9c 89       	ldd	r25, Y+20	; 0x14
    27fe:	98 8b       	std	Y+16, r25	; 0x10
    2800:	8f 87       	std	Y+15, r24	; 0x0f
    2802:	8f 85       	ldd	r24, Y+15	; 0x0f
    2804:	98 89       	ldd	r25, Y+16	; 0x10
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <replay_path+0x288>
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	8f 87       	std	Y+15, r24	; 0x0f

    pos_x = 0;
    pos_y = 0;
    heading = 0;

    for (uint16_t i = 0; i < path_len; i++) {
    280e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2810:	9d a5       	ldd	r25, Y+45	; 0x2d
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	9d a7       	std	Y+45, r25	; 0x2d
    2816:	8c a7       	std	Y+44, r24	; 0x2c
    2818:	20 91 b0 01 	lds	r18, 0x01B0
    281c:	30 91 b1 01 	lds	r19, 0x01B1
    2820:	8c a5       	ldd	r24, Y+44	; 0x2c
    2822:	9d a5       	ldd	r25, Y+45	; 0x2d
    2824:	82 17       	cp	r24, r18
    2826:	93 07       	cpc	r25, r19
    2828:	08 f4       	brcc	.+2      	; 0x282c <replay_path+0x2ae>
    282a:	39 cf       	rjmp	.-398    	; 0x269e <replay_path+0x120>
        snprintf(buf, 17, "X:%2d Y:%2d D:%d", pos_x, pos_y, dir);
        LCD_displayStringRowColumn(1, 0, buf);
        _delay_ms(80);
    }

    DC_RIGHT(CW,0);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	0e 94 cc 18 	call	0x3198	; 0x3198 <DC_RIGHT>
    DC_LEFT(CW,0);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	0e 94 30 19 	call	0x3260	; 0x3260 <DC_LEFT>

    LCD_displayStringRowColumn(0,0," PATH DONE ");
    283c:	2e e7       	ldi	r18, 0x7E	; 126
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	a9 01       	movw	r20, r18
    2846:	0e 94 ba 24 	call	0x4974	; 0x4974 <LCD_displayStringRowColumn>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	aa ef       	ldi	r26, 0xFA	; 250
    2850:	b3 e4       	ldi	r27, 0x43	; 67
    2852:	8b 87       	std	Y+11, r24	; 0x0b
    2854:	9c 87       	std	Y+12, r25	; 0x0c
    2856:	ad 87       	std	Y+13, r26	; 0x0d
    2858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6b 85       	ldd	r22, Y+11	; 0x0b
    285c:	7c 85       	ldd	r23, Y+12	; 0x0c
    285e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2860:	9e 85       	ldd	r25, Y+14	; 0x0e
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a e7       	ldi	r20, 0x7A	; 122
    2868:	55 e4       	ldi	r21, 0x45	; 69
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8f 83       	std	Y+7, r24	; 0x07
    2874:	98 87       	std	Y+8, r25	; 0x08
    2876:	a9 87       	std	Y+9, r26	; 0x09
    2878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <replay_path+0x31e>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	3f c0       	rjmp	.+126    	; 0x291a <replay_path+0x39c>
	else if (__tmp > 65535)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <replay_path+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <replay_path+0x37e>
    28de:	80 e9       	ldi	r24, 0x90	; 144
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <replay_path+0x36c>
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <replay_path+0x360>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <replay_path+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <replay_path+0x3a8>
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);

    sei();
    292e:	78 94       	sei
}
    2930:	ee 96       	adiw	r28, 0x3e	; 62
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <__vector_1>:

// ================== ISR ==================
ISR(INT0_vect) {
    2942:	1f 92       	push	r1
    2944:	0f 92       	push	r0
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	0f 92       	push	r0
    294a:	11 24       	eor	r1, r1
    294c:	2f 93       	push	r18
    294e:	3f 93       	push	r19
    2950:	4f 93       	push	r20
    2952:	5f 93       	push	r21
    2954:	6f 93       	push	r22
    2956:	7f 93       	push	r23
    2958:	8f 93       	push	r24
    295a:	9f 93       	push	r25
    295c:	af 93       	push	r26
    295e:	bf 93       	push	r27
    2960:	ef 93       	push	r30
    2962:	ff 93       	push	r31
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    if (goal_reached) {
    296c:	80 91 aa 01 	lds	r24, 0x01AA
    2970:	88 23       	and	r24, r24
    2972:	11 f0       	breq	.+4      	; 0x2978 <__vector_1+0x36>
        replay_path();
    2974:	0e 94 bf 12 	call	0x257e	; 0x257e <replay_path>
    }
}
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	ff 91       	pop	r31
    297e:	ef 91       	pop	r30
    2980:	bf 91       	pop	r27
    2982:	af 91       	pop	r26
    2984:	9f 91       	pop	r25
    2986:	8f 91       	pop	r24
    2988:	7f 91       	pop	r23
    298a:	6f 91       	pop	r22
    298c:	5f 91       	pop	r21
    298e:	4f 91       	pop	r20
    2990:	3f 91       	pop	r19
    2992:	2f 91       	pop	r18
    2994:	0f 90       	pop	r0
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	0f 90       	pop	r0
    299a:	1f 90       	pop	r1
    299c:	18 95       	reti

0000299e <ext_int0_init>:
 */
#include<avr/io.h>
#include"ext_int0.h"


void ext_int0_init(void){
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    // زرار interrupt على PD2 (INT0)
    DDRD &= ~(1<<PD2);   // input
    29a6:	a1 e3       	ldi	r26, 0x31	; 49
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e1 e3       	ldi	r30, 0x31	; 49
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8b 7f       	andi	r24, 0xFB	; 251
    29b2:	8c 93       	st	X, r24
    PORTD |= (1<<PD2);   // pull-up
    29b4:	a2 e3       	ldi	r26, 0x32	; 50
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e2 e3       	ldi	r30, 0x32	; 50
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	84 60       	ori	r24, 0x04	; 4
    29c0:	8c 93       	st	X, r24

    // تهيئة INT0 على falling edge
    GICR |= (1<<INT0);
    29c2:	ab e5       	ldi	r26, 0x5B	; 91
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	eb e5       	ldi	r30, 0x5B	; 91
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 64       	ori	r24, 0x40	; 64
    29ce:	8c 93       	st	X, r24
    MCUCR |= (1<<ISC01);
    29d0:	a5 e5       	ldi	r26, 0x55	; 85
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e5       	ldi	r30, 0x55	; 85
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	82 60       	ori	r24, 0x02	; 2
    29dc:	8c 93       	st	X, r24
    MCUCR &= ~(1<<ISC00);
    29de:	a5 e5       	ldi	r26, 0x55	; 85
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e5       	ldi	r30, 0x55	; 85
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	8e 7f       	andi	r24, 0xFE	; 254
    29ea:	8c 93       	st	X, r24


}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <ext_int1_init>:

void ext_int1_init(void){
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    // زرار interrupt على PD2 (INT0)
    DDRD &= ~(1<<PD3);   // input
    29fa:	a1 e3       	ldi	r26, 0x31	; 49
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e1 e3       	ldi	r30, 0x31	; 49
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	87 7f       	andi	r24, 0xF7	; 247
    2a06:	8c 93       	st	X, r24
    PORTD |= (1<<PD3);   // pull-up
    2a08:	a2 e3       	ldi	r26, 0x32	; 50
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e2 e3       	ldi	r30, 0x32	; 50
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	88 60       	ori	r24, 0x08	; 8
    2a14:	8c 93       	st	X, r24

    // تهيئة INT0 على falling edge
    GICR |= (1<<INT1);
    2a16:	ab e5       	ldi	r26, 0x5B	; 91
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	eb e5       	ldi	r30, 0x5B	; 91
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	80 68       	ori	r24, 0x80	; 128
    2a22:	8c 93       	st	X, r24
    MCUCR |= (1<<ISC01);
    2a24:	a5 e5       	ldi	r26, 0x55	; 85
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e5       	ldi	r30, 0x55	; 85
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	82 60       	ori	r24, 0x02	; 2
    2a30:	8c 93       	st	X, r24
    MCUCR &= ~(1<<ISC00);
    2a32:	a5 e5       	ldi	r26, 0x55	; 85
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e5 e5       	ldi	r30, 0x55	; 85
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8e 7f       	andi	r24, 0xFE	; 254
    2a3e:	8c 93       	st	X, r24


}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <ext_int2_init>:

void ext_int2_init(void){
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    // زرار interrupt على PD2 (INT0)
    DDRD &= ~(1<<PB2);   // input
    2a4e:	a1 e3       	ldi	r26, 0x31	; 49
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e1 e3       	ldi	r30, 0x31	; 49
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8b 7f       	andi	r24, 0xFB	; 251
    2a5a:	8c 93       	st	X, r24
    PORTD |= (1<<PB2);   // pull-up
    2a5c:	a2 e3       	ldi	r26, 0x32	; 50
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e2 e3       	ldi	r30, 0x32	; 50
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	84 60       	ori	r24, 0x04	; 4
    2a68:	8c 93       	st	X, r24

    // تهيئة INT0 على falling edge
    GICR |= (1<<INT2);
    2a6a:	ab e5       	ldi	r26, 0x5B	; 91
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	eb e5       	ldi	r30, 0x5B	; 91
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 62       	ori	r24, 0x20	; 32
    2a76:	8c 93       	st	X, r24
    MCUCR |= (1<<ISC01);
    2a78:	a5 e5       	ldi	r26, 0x55	; 85
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e5 e5       	ldi	r30, 0x55	; 85
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	82 60       	ori	r24, 0x02	; 2
    2a84:	8c 93       	st	X, r24
    MCUCR &= ~(1<<ISC00);
    2a86:	a5 e5       	ldi	r26, 0x55	; 85
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e5 e5       	ldi	r30, 0x55	; 85
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	8e 7f       	andi	r24, 0xFE	; 254
    2a92:	8c 93       	st	X, r24


}
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <GPIO_setupPinDirection+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <GPIO_setupPinDirection+0x8>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	6a 83       	std	Y+2, r22	; 0x02
    2aac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	88 30       	cpi	r24, 0x08	; 8
    2ab2:	08 f0       	brcs	.+2      	; 0x2ab6 <GPIO_setupPinDirection+0x1c>
    2ab4:	d5 c0       	rjmp	.+426    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	84 30       	cpi	r24, 0x04	; 4
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <GPIO_setupPinDirection+0x24>
    2abc:	d1 c0       	rjmp	.+418    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	3d 83       	std	Y+5, r19	; 0x05
    2ac6:	2c 83       	std	Y+4, r18	; 0x04
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	9d 81       	ldd	r25, Y+5	; 0x05
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	91 05       	cpc	r25, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <GPIO_setupPinDirection+0x3a>
    2ad2:	43 c0       	rjmp	.+134    	; 0x2b5a <GPIO_setupPinDirection+0xc0>
    2ad4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ad8:	22 30       	cpi	r18, 0x02	; 2
    2ada:	31 05       	cpc	r19, r1
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <GPIO_setupPinDirection+0x4e>
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	71 f0       	breq	.+28     	; 0x2b02 <GPIO_setupPinDirection+0x68>
    2ae6:	bc c0       	rjmp	.+376    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
    2ae8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aea:	3d 81       	ldd	r19, Y+5	; 0x05
    2aec:	22 30       	cpi	r18, 0x02	; 2
    2aee:	31 05       	cpc	r19, r1
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <GPIO_setupPinDirection+0x5a>
    2af2:	5f c0       	rjmp	.+190    	; 0x2bb2 <GPIO_setupPinDirection+0x118>
    2af4:	8c 81       	ldd	r24, Y+4	; 0x04
    2af6:	9d 81       	ldd	r25, Y+5	; 0x05
    2af8:	83 30       	cpi	r24, 0x03	; 3
    2afa:	91 05       	cpc	r25, r1
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <GPIO_setupPinDirection+0x66>
    2afe:	85 c0       	rjmp	.+266    	; 0x2c0a <GPIO_setupPinDirection+0x170>
    2b00:	af c0       	rjmp	.+350    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	a1 f4       	brne	.+40     	; 0x2b30 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2b08:	aa e3       	ldi	r26, 0x3A	; 58
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	ea e3       	ldi	r30, 0x3A	; 58
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	48 2f       	mov	r20, r24
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	02 2e       	mov	r0, r18
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <GPIO_setupPinDirection+0x8c>
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	0a 94       	dec	r0
    2b28:	e2 f7       	brpl	.-8      	; 0x2b22 <GPIO_setupPinDirection+0x88>
    2b2a:	84 2b       	or	r24, r20
    2b2c:	8c 93       	st	X, r24
    2b2e:	98 c0       	rjmp	.+304    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2b30:	aa e3       	ldi	r26, 0x3A	; 58
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ea e3       	ldi	r30, 0x3A	; 58
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	48 2f       	mov	r20, r24
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	02 2e       	mov	r0, r18
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <GPIO_setupPinDirection+0xb4>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	0a 94       	dec	r0
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <GPIO_setupPinDirection+0xb0>
    2b52:	80 95       	com	r24
    2b54:	84 23       	and	r24, r20
    2b56:	8c 93       	st	X, r24
    2b58:	83 c0       	rjmp	.+262    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	a1 f4       	brne	.+40     	; 0x2b88 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2b60:	a7 e3       	ldi	r26, 0x37	; 55
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e7 e3       	ldi	r30, 0x37	; 55
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	48 2f       	mov	r20, r24
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	02 2e       	mov	r0, r18
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <GPIO_setupPinDirection+0xe4>
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	0a 94       	dec	r0
    2b80:	e2 f7       	brpl	.-8      	; 0x2b7a <GPIO_setupPinDirection+0xe0>
    2b82:	84 2b       	or	r24, r20
    2b84:	8c 93       	st	X, r24
    2b86:	6c c0       	rjmp	.+216    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2b88:	a7 e3       	ldi	r26, 0x37	; 55
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e7 e3       	ldi	r30, 0x37	; 55
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	48 2f       	mov	r20, r24
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	02 2e       	mov	r0, r18
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <GPIO_setupPinDirection+0x10c>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	0a 94       	dec	r0
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <GPIO_setupPinDirection+0x108>
    2baa:	80 95       	com	r24
    2bac:	84 23       	and	r24, r20
    2bae:	8c 93       	st	X, r24
    2bb0:	57 c0       	rjmp	.+174    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	81 30       	cpi	r24, 0x01	; 1
    2bb6:	a1 f4       	brne	.+40     	; 0x2be0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2bb8:	a4 e3       	ldi	r26, 0x34	; 52
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e4 e3       	ldi	r30, 0x34	; 52
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	48 2f       	mov	r20, r24
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	02 2e       	mov	r0, r18
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <GPIO_setupPinDirection+0x13c>
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	0a 94       	dec	r0
    2bd8:	e2 f7       	brpl	.-8      	; 0x2bd2 <GPIO_setupPinDirection+0x138>
    2bda:	84 2b       	or	r24, r20
    2bdc:	8c 93       	st	X, r24
    2bde:	40 c0       	rjmp	.+128    	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2be0:	a4 e3       	ldi	r26, 0x34	; 52
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e4 e3       	ldi	r30, 0x34	; 52
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <GPIO_setupPinDirection+0x164>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <GPIO_setupPinDirection+0x160>
    2c02:	80 95       	com	r24
    2c04:	84 23       	and	r24, r20
    2c06:	8c 93       	st	X, r24
    2c08:	2b c0       	rjmp	.+86     	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	81 30       	cpi	r24, 0x01	; 1
    2c0e:	a1 f4       	brne	.+40     	; 0x2c38 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2c10:	a1 e3       	ldi	r26, 0x31	; 49
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e1 e3       	ldi	r30, 0x31	; 49
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	48 2f       	mov	r20, r24
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	02 2e       	mov	r0, r18
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <GPIO_setupPinDirection+0x194>
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	0a 94       	dec	r0
    2c30:	e2 f7       	brpl	.-8      	; 0x2c2a <GPIO_setupPinDirection+0x190>
    2c32:	84 2b       	or	r24, r20
    2c34:	8c 93       	st	X, r24
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2c38:	a1 e3       	ldi	r26, 0x31	; 49
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e1 e3       	ldi	r30, 0x31	; 49
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 2e       	mov	r0, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <GPIO_setupPinDirection+0x1bc>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <GPIO_setupPinDirection+0x1b8>
    2c5a:	80 95       	com	r24
    2c5c:	84 23       	and	r24, r20
    2c5e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <GPIO_writePin+0x6>
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <GPIO_writePin+0x8>
    2c78:	0f 92       	push	r0
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	6a 83       	std	Y+2, r22	; 0x02
    2c82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 30       	cpi	r24, 0x08	; 8
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <GPIO_writePin+0x1c>
    2c8a:	d5 c0       	rjmp	.+426    	; 0x2e36 <GPIO_writePin+0x1c6>
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	84 30       	cpi	r24, 0x04	; 4
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <GPIO_writePin+0x24>
    2c92:	d1 c0       	rjmp	.+418    	; 0x2e36 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3d 83       	std	Y+5, r19	; 0x05
    2c9c:	2c 83       	std	Y+4, r18	; 0x04
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <GPIO_writePin+0x3a>
    2ca8:	43 c0       	rjmp	.+134    	; 0x2d30 <GPIO_writePin+0xc0>
    2caa:	2c 81       	ldd	r18, Y+4	; 0x04
    2cac:	3d 81       	ldd	r19, Y+5	; 0x05
    2cae:	22 30       	cpi	r18, 0x02	; 2
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <GPIO_writePin+0x4e>
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	71 f0       	breq	.+28     	; 0x2cd8 <GPIO_writePin+0x68>
    2cbc:	bc c0       	rjmp	.+376    	; 0x2e36 <GPIO_writePin+0x1c6>
    2cbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc2:	22 30       	cpi	r18, 0x02	; 2
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <GPIO_writePin+0x5a>
    2cc8:	5f c0       	rjmp	.+190    	; 0x2d88 <GPIO_writePin+0x118>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	83 30       	cpi	r24, 0x03	; 3
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <GPIO_writePin+0x66>
    2cd4:	85 c0       	rjmp	.+266    	; 0x2de0 <GPIO_writePin+0x170>
    2cd6:	af c0       	rjmp	.+350    	; 0x2e36 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	88 23       	and	r24, r24
    2cdc:	a1 f4       	brne	.+40     	; 0x2d06 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2cde:	ab e3       	ldi	r26, 0x3B	; 59
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	eb e3       	ldi	r30, 0x3B	; 59
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	48 2f       	mov	r20, r24
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	02 2e       	mov	r0, r18
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <GPIO_writePin+0x8c>
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	0a 94       	dec	r0
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <GPIO_writePin+0x88>
    2d00:	84 2b       	or	r24, r20
    2d02:	8c 93       	st	X, r24
    2d04:	98 c0       	rjmp	.+304    	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2d06:	ab e3       	ldi	r26, 0x3B	; 59
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	eb e3       	ldi	r30, 0x3B	; 59
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	48 2f       	mov	r20, r24
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	02 2e       	mov	r0, r18
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <GPIO_writePin+0xb4>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	0a 94       	dec	r0
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <GPIO_writePin+0xb0>
    2d28:	80 95       	com	r24
    2d2a:	84 23       	and	r24, r20
    2d2c:	8c 93       	st	X, r24
    2d2e:	83 c0       	rjmp	.+262    	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	88 23       	and	r24, r24
    2d34:	a1 f4       	brne	.+40     	; 0x2d5e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2d36:	a8 e3       	ldi	r26, 0x38	; 56
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e8 e3       	ldi	r30, 0x38	; 56
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	48 2f       	mov	r20, r24
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	02 2e       	mov	r0, r18
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <GPIO_writePin+0xe4>
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	0a 94       	dec	r0
    2d56:	e2 f7       	brpl	.-8      	; 0x2d50 <GPIO_writePin+0xe0>
    2d58:	84 2b       	or	r24, r20
    2d5a:	8c 93       	st	X, r24
    2d5c:	6c c0       	rjmp	.+216    	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2d5e:	a8 e3       	ldi	r26, 0x38	; 56
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e8 e3       	ldi	r30, 0x38	; 56
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 2e       	mov	r0, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <GPIO_writePin+0x10c>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <GPIO_writePin+0x108>
    2d80:	80 95       	com	r24
    2d82:	84 23       	and	r24, r20
    2d84:	8c 93       	st	X, r24
    2d86:	57 c0       	rjmp	.+174    	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	88 23       	and	r24, r24
    2d8c:	a1 f4       	brne	.+40     	; 0x2db6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2d8e:	a5 e3       	ldi	r26, 0x35	; 53
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e5 e3       	ldi	r30, 0x35	; 53
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	48 2f       	mov	r20, r24
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	02 2e       	mov	r0, r18
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <GPIO_writePin+0x13c>
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	0a 94       	dec	r0
    2dae:	e2 f7       	brpl	.-8      	; 0x2da8 <GPIO_writePin+0x138>
    2db0:	84 2b       	or	r24, r20
    2db2:	8c 93       	st	X, r24
    2db4:	40 c0       	rjmp	.+128    	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2db6:	a5 e3       	ldi	r26, 0x35	; 53
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e5 e3       	ldi	r30, 0x35	; 53
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	48 2f       	mov	r20, r24
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	02 2e       	mov	r0, r18
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <GPIO_writePin+0x164>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	0a 94       	dec	r0
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <GPIO_writePin+0x160>
    2dd8:	80 95       	com	r24
    2dda:	84 23       	and	r24, r20
    2ddc:	8c 93       	st	X, r24
    2dde:	2b c0       	rjmp	.+86     	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	88 23       	and	r24, r24
    2de4:	a1 f4       	brne	.+40     	; 0x2e0e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2de6:	a2 e3       	ldi	r26, 0x32	; 50
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e2 e3       	ldi	r30, 0x32	; 50
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	48 2f       	mov	r20, r24
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	02 2e       	mov	r0, r18
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <GPIO_writePin+0x194>
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	0a 94       	dec	r0
    2e06:	e2 f7       	brpl	.-8      	; 0x2e00 <GPIO_writePin+0x190>
    2e08:	84 2b       	or	r24, r20
    2e0a:	8c 93       	st	X, r24
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2e0e:	a2 e3       	ldi	r26, 0x32	; 50
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e2 e3       	ldi	r30, 0x32	; 50
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 2e       	mov	r0, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <GPIO_writePin+0x1bc>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	0a 94       	dec	r0
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <GPIO_writePin+0x1b8>
    2e30:	80 95       	com	r24
    2e32:	84 23       	and	r24, r20
    2e34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <GPIO_readPin+0x6>
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <GPIO_readPin+0x8>
    2e4e:	0f 92       	push	r0
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	8a 83       	std	Y+2, r24	; 0x02
    2e56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	88 30       	cpi	r24, 0x08	; 8
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <GPIO_readPin+0x1e>
    2e62:	84 c0       	rjmp	.+264    	; 0x2f6c <GPIO_readPin+0x126>
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	84 30       	cpi	r24, 0x04	; 4
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <GPIO_readPin+0x26>
    2e6a:	80 c0       	rjmp	.+256    	; 0x2f6c <GPIO_readPin+0x126>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	3d 83       	std	Y+5, r19	; 0x05
    2e74:	2c 83       	std	Y+4, r18	; 0x04
    2e76:	4c 81       	ldd	r20, Y+4	; 0x04
    2e78:	5d 81       	ldd	r21, Y+5	; 0x05
    2e7a:	41 30       	cpi	r20, 0x01	; 1
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	79 f1       	breq	.+94     	; 0x2ede <GPIO_readPin+0x98>
    2e80:	8c 81       	ldd	r24, Y+4	; 0x04
    2e82:	9d 81       	ldd	r25, Y+5	; 0x05
    2e84:	82 30       	cpi	r24, 0x02	; 2
    2e86:	91 05       	cpc	r25, r1
    2e88:	34 f4       	brge	.+12     	; 0x2e96 <GPIO_readPin+0x50>
    2e8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e8e:	21 15       	cp	r18, r1
    2e90:	31 05       	cpc	r19, r1
    2e92:	69 f0       	breq	.+26     	; 0x2eae <GPIO_readPin+0x68>
    2e94:	6b c0       	rjmp	.+214    	; 0x2f6c <GPIO_readPin+0x126>
    2e96:	4c 81       	ldd	r20, Y+4	; 0x04
    2e98:	5d 81       	ldd	r21, Y+5	; 0x05
    2e9a:	42 30       	cpi	r20, 0x02	; 2
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	b9 f1       	breq	.+110    	; 0x2f0e <GPIO_readPin+0xc8>
    2ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea4:	83 30       	cpi	r24, 0x03	; 3
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <GPIO_readPin+0x66>
    2eaa:	49 c0       	rjmp	.+146    	; 0x2f3e <GPIO_readPin+0xf8>
    2eac:	5f c0       	rjmp	.+190    	; 0x2f6c <GPIO_readPin+0x126>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2eae:	e9 e3       	ldi	r30, 0x39	; 57
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a9 01       	movw	r20, r18
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <GPIO_readPin+0x80>
    2ec2:	55 95       	asr	r21
    2ec4:	47 95       	ror	r20
    2ec6:	8a 95       	dec	r24
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <GPIO_readPin+0x7c>
    2eca:	ca 01       	movw	r24, r20
    2ecc:	81 70       	andi	r24, 0x01	; 1
    2ece:	90 70       	andi	r25, 0x00	; 0
    2ed0:	88 23       	and	r24, r24
    2ed2:	11 f0       	breq	.+4      	; 0x2ed8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2ed4:	19 82       	std	Y+1, r1	; 0x01
    2ed6:	4a c0       	rjmp	.+148    	; 0x2f6c <GPIO_readPin+0x126>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	47 c0       	rjmp	.+142    	; 0x2f6c <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2ede:	e6 e3       	ldi	r30, 0x36	; 54
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a9 01       	movw	r20, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <GPIO_readPin+0xb0>
    2ef2:	55 95       	asr	r21
    2ef4:	47 95       	ror	r20
    2ef6:	8a 95       	dec	r24
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <GPIO_readPin+0xac>
    2efa:	ca 01       	movw	r24, r20
    2efc:	81 70       	andi	r24, 0x01	; 1
    2efe:	90 70       	andi	r25, 0x00	; 0
    2f00:	88 23       	and	r24, r24
    2f02:	11 f0       	breq	.+4      	; 0x2f08 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2f04:	19 82       	std	Y+1, r1	; 0x01
    2f06:	32 c0       	rjmp	.+100    	; 0x2f6c <GPIO_readPin+0x126>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	2f c0       	rjmp	.+94     	; 0x2f6c <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2f0e:	e3 e3       	ldi	r30, 0x33	; 51
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a9 01       	movw	r20, r18
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <GPIO_readPin+0xe0>
    2f22:	55 95       	asr	r21
    2f24:	47 95       	ror	r20
    2f26:	8a 95       	dec	r24
    2f28:	e2 f7       	brpl	.-8      	; 0x2f22 <GPIO_readPin+0xdc>
    2f2a:	ca 01       	movw	r24, r20
    2f2c:	81 70       	andi	r24, 0x01	; 1
    2f2e:	90 70       	andi	r25, 0x00	; 0
    2f30:	88 23       	and	r24, r24
    2f32:	11 f0       	breq	.+4      	; 0x2f38 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2f34:	19 82       	std	Y+1, r1	; 0x01
    2f36:	1a c0       	rjmp	.+52     	; 0x2f6c <GPIO_readPin+0x126>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	17 c0       	rjmp	.+46     	; 0x2f6c <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2f3e:	e0 e3       	ldi	r30, 0x30	; 48
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a9 01       	movw	r20, r18
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <GPIO_readPin+0x110>
    2f52:	55 95       	asr	r21
    2f54:	47 95       	ror	r20
    2f56:	8a 95       	dec	r24
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <GPIO_readPin+0x10c>
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	81 70       	andi	r24, 0x01	; 1
    2f5e:	90 70       	andi	r25, 0x00	; 0
    2f60:	88 23       	and	r24, r24
    2f62:	11 f0       	breq	.+4      	; 0x2f68 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2f64:	19 82       	std	Y+1, r1	; 0x01
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <GPIO_readPin+0x126>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <GPIO_setupPortDirection+0x6>
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <GPIO_setupPortDirection+0x8>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	84 30       	cpi	r24, 0x04	; 4
    2f92:	90 f5       	brcc	.+100    	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	3c 83       	std	Y+4, r19	; 0x04
    2f9c:	2b 83       	std	Y+3, r18	; 0x03
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	81 30       	cpi	r24, 0x01	; 1
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	d1 f0       	breq	.+52     	; 0x2fdc <GPIO_setupPortDirection+0x5e>
    2fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    2faa:	3c 81       	ldd	r19, Y+4	; 0x04
    2fac:	22 30       	cpi	r18, 0x02	; 2
    2fae:	31 05       	cpc	r19, r1
    2fb0:	2c f4       	brge	.+10     	; 0x2fbc <GPIO_setupPortDirection+0x3e>
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	61 f0       	breq	.+24     	; 0x2fd2 <GPIO_setupPortDirection+0x54>
    2fba:	1e c0       	rjmp	.+60     	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
    2fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc0:	22 30       	cpi	r18, 0x02	; 2
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	81 f0       	breq	.+32     	; 0x2fe6 <GPIO_setupPortDirection+0x68>
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	83 30       	cpi	r24, 0x03	; 3
    2fcc:	91 05       	cpc	r25, r1
    2fce:	81 f0       	breq	.+32     	; 0x2ff0 <GPIO_setupPortDirection+0x72>
    2fd0:	13 c0       	rjmp	.+38     	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2fd2:	ea e3       	ldi	r30, 0x3A	; 58
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	80 83       	st	Z, r24
    2fda:	0e c0       	rjmp	.+28     	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2fdc:	e7 e3       	ldi	r30, 0x37	; 55
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	80 83       	st	Z, r24
    2fe4:	09 c0       	rjmp	.+18     	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2fe6:	e4 e3       	ldi	r30, 0x34	; 52
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	80 83       	st	Z, r24
    2fee:	04 c0       	rjmp	.+8      	; 0x2ff8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2ff0:	e1 e3       	ldi	r30, 0x31	; 49
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	80 83       	st	Z, r24
			break;
		}
	}
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <GPIO_writePort+0x6>
    300c:	00 d0       	rcall	.+0      	; 0x300e <GPIO_writePort+0x8>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	84 30       	cpi	r24, 0x04	; 4
    301a:	90 f5       	brcc	.+100    	; 0x3080 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	3c 83       	std	Y+4, r19	; 0x04
    3024:	2b 83       	std	Y+3, r18	; 0x03
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	91 05       	cpc	r25, r1
    302e:	d1 f0       	breq	.+52     	; 0x3064 <GPIO_writePort+0x5e>
    3030:	2b 81       	ldd	r18, Y+3	; 0x03
    3032:	3c 81       	ldd	r19, Y+4	; 0x04
    3034:	22 30       	cpi	r18, 0x02	; 2
    3036:	31 05       	cpc	r19, r1
    3038:	2c f4       	brge	.+10     	; 0x3044 <GPIO_writePort+0x3e>
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	61 f0       	breq	.+24     	; 0x305a <GPIO_writePort+0x54>
    3042:	1e c0       	rjmp	.+60     	; 0x3080 <GPIO_writePort+0x7a>
    3044:	2b 81       	ldd	r18, Y+3	; 0x03
    3046:	3c 81       	ldd	r19, Y+4	; 0x04
    3048:	22 30       	cpi	r18, 0x02	; 2
    304a:	31 05       	cpc	r19, r1
    304c:	81 f0       	breq	.+32     	; 0x306e <GPIO_writePort+0x68>
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	9c 81       	ldd	r25, Y+4	; 0x04
    3052:	83 30       	cpi	r24, 0x03	; 3
    3054:	91 05       	cpc	r25, r1
    3056:	81 f0       	breq	.+32     	; 0x3078 <GPIO_writePort+0x72>
    3058:	13 c0       	rjmp	.+38     	; 0x3080 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    305a:	eb e3       	ldi	r30, 0x3B	; 59
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	80 83       	st	Z, r24
    3062:	0e c0       	rjmp	.+28     	; 0x3080 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3064:	e8 e3       	ldi	r30, 0x38	; 56
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	80 83       	st	Z, r24
    306c:	09 c0       	rjmp	.+18     	; 0x3080 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    306e:	e5 e3       	ldi	r30, 0x35	; 53
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	80 83       	st	Z, r24
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    3078:	e2 e3       	ldi	r30, 0x32	; 50
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	80 83       	st	Z, r24
			break;
		}
	}
}
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <GPIO_readPort+0x6>
    3094:	00 d0       	rcall	.+0      	; 0x3096 <GPIO_readPort+0x8>
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	84 30       	cpi	r24, 0x04	; 4
    30a4:	90 f5       	brcc	.+100    	; 0x310a <GPIO_readPort+0x7c>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	3c 83       	std	Y+4, r19	; 0x04
    30ae:	2b 83       	std	Y+3, r18	; 0x03
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	91 05       	cpc	r25, r1
    30b8:	d1 f0       	breq	.+52     	; 0x30ee <GPIO_readPort+0x60>
    30ba:	2b 81       	ldd	r18, Y+3	; 0x03
    30bc:	3c 81       	ldd	r19, Y+4	; 0x04
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	2c f4       	brge	.+10     	; 0x30ce <GPIO_readPort+0x40>
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	61 f0       	breq	.+24     	; 0x30e4 <GPIO_readPort+0x56>
    30cc:	1e c0       	rjmp	.+60     	; 0x310a <GPIO_readPort+0x7c>
    30ce:	2b 81       	ldd	r18, Y+3	; 0x03
    30d0:	3c 81       	ldd	r19, Y+4	; 0x04
    30d2:	22 30       	cpi	r18, 0x02	; 2
    30d4:	31 05       	cpc	r19, r1
    30d6:	81 f0       	breq	.+32     	; 0x30f8 <GPIO_readPort+0x6a>
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	9c 81       	ldd	r25, Y+4	; 0x04
    30dc:	83 30       	cpi	r24, 0x03	; 3
    30de:	91 05       	cpc	r25, r1
    30e0:	81 f0       	breq	.+32     	; 0x3102 <GPIO_readPort+0x74>
    30e2:	13 c0       	rjmp	.+38     	; 0x310a <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			value = PINA;
    30e4:	e9 e3       	ldi	r30, 0x39	; 57
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	0e c0       	rjmp	.+28     	; 0x310a <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			value = PINB;
    30ee:	e6 e3       	ldi	r30, 0x36	; 54
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	09 c0       	rjmp	.+18     	; 0x310a <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			value = PINC;
    30f8:	e3 e3       	ldi	r30, 0x33	; 51
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	04 c0       	rjmp	.+8      	; 0x310a <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			value = PIND;
    3102:	e0 e3       	ldi	r30, 0x30	; 48
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    310a:	89 81       	ldd	r24, Y+1	; 0x01
}
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	cf 91       	pop	r28
    3116:	df 91       	pop	r29
    3118:	08 95       	ret

0000311a <Motors_init>:

/* ==================================================
 * Functions Definitions
 * ================================================== */

void Motors_init(void){
    311a:	df 93       	push	r29
    311c:	cf 93       	push	r28
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62

	DC_MOTOR_RIGHT_DDR |= (1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2);
    3122:	a1 e3       	ldi	r26, 0x31	; 49
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e1 e3       	ldi	r30, 0x31	; 49
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	83 60       	ori	r24, 0x03	; 3
    312e:	8c 93       	st	X, r24
	PWM_RIGHT_DDR |= (1 << PWM_RIGHT_PIN);
    3130:	a1 e3       	ldi	r26, 0x31	; 49
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e1 e3       	ldi	r30, 0x31	; 49
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	80 61       	ori	r24, 0x10	; 16
    313c:	8c 93       	st	X, r24
	DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
    313e:	a2 e3       	ldi	r26, 0x32	; 50
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e2 e3       	ldi	r30, 0x32	; 50
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	8c 7f       	andi	r24, 0xFC	; 252
    314a:	8c 93       	st	X, r24
	DC_MOTOR_LEFT_DDR |= (1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2);
    314c:	a1 e3       	ldi	r26, 0x31	; 49
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	e1 e3       	ldi	r30, 0x31	; 49
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	84 64       	ori	r24, 0x44	; 68
    3158:	8c 93       	st	X, r24
	PWM_LEFT_DDR |= (1 << PWM_LEFT_PIN);
    315a:	a1 e3       	ldi	r26, 0x31	; 49
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e1 e3       	ldi	r30, 0x31	; 49
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	80 62       	ori	r24, 0x20	; 32
    3166:	8c 93       	st	X, r24
	DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
    3168:	a2 e3       	ldi	r26, 0x32	; 50
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e2 e3       	ldi	r30, 0x32	; 50
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8b 7b       	andi	r24, 0xBB	; 187
    3174:	8c 93       	st	X, r24

	TCCR1A |= (1 << WGM10) | (1 << COM1B1) | (1 << COM1A1);
    3176:	af e4       	ldi	r26, 0x4F	; 79
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ef e4       	ldi	r30, 0x4F	; 79
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	81 6a       	ori	r24, 0xA1	; 161
    3182:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM12) | (1 << CS11);
    3184:	ae e4       	ldi	r26, 0x4E	; 78
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	ee e4       	ldi	r30, 0x4E	; 78
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	8a 60       	ori	r24, 0x0A	; 10
    3190:	8c 93       	st	X, r24
}
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <DC_RIGHT>:



/* --------- Control Right Motor --------- */
void DC_RIGHT(DcMotor_State state, uint8 speed)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <DC_RIGHT+0x6>
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <DC_RIGHT+0x8>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	6a 83       	std	Y+2, r22	; 0x02
	/* Control direction */
	switch(state)
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	3c 83       	std	Y+4, r19	; 0x04
    31b0:	2b 83       	std	Y+3, r18	; 0x03
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	9c 81       	ldd	r25, Y+4	; 0x04
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	91 05       	cpc	r25, r1
    31ba:	89 f0       	breq	.+34     	; 0x31de <DC_RIGHT+0x46>
    31bc:	2b 81       	ldd	r18, Y+3	; 0x03
    31be:	3c 81       	ldd	r19, Y+4	; 0x04
    31c0:	22 30       	cpi	r18, 0x02	; 2
    31c2:	31 05       	cpc	r19, r1
    31c4:	d9 f0       	breq	.+54     	; 0x31fc <DC_RIGHT+0x64>
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	29 f5       	brne	.+74     	; 0x3218 <DC_RIGHT+0x80>
	{
	case STOP:
		DC_MOTOR_RIGHT_PORT &= ~((1 << DC_MOTOR_RIGHT_IN1) | (1 << DC_MOTOR_RIGHT_IN2));
    31ce:	a2 e3       	ldi	r26, 0x32	; 50
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e2 e3       	ldi	r30, 0x32	; 50
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	8c 7f       	andi	r24, 0xFC	; 252
    31da:	8c 93       	st	X, r24
    31dc:	1d c0       	rjmp	.+58     	; 0x3218 <DC_RIGHT+0x80>
		break;

	case CW:
		DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN1);
    31de:	a2 e3       	ldi	r26, 0x32	; 50
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	e2 e3       	ldi	r30, 0x32	; 50
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	8c 93       	st	X, r24
		DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN2);
    31ec:	a2 e3       	ldi	r26, 0x32	; 50
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e2 e3       	ldi	r30, 0x32	; 50
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	8d 7f       	andi	r24, 0xFD	; 253
    31f8:	8c 93       	st	X, r24
    31fa:	0e c0       	rjmp	.+28     	; 0x3218 <DC_RIGHT+0x80>
		break;

	case A_CW:
		DC_MOTOR_RIGHT_PORT |= (1 << DC_MOTOR_RIGHT_IN2);
    31fc:	a2 e3       	ldi	r26, 0x32	; 50
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e2 e3       	ldi	r30, 0x32	; 50
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	82 60       	ori	r24, 0x02	; 2
    3208:	8c 93       	st	X, r24
		DC_MOTOR_RIGHT_PORT &= ~(1 << DC_MOTOR_RIGHT_IN1);
    320a:	a2 e3       	ldi	r26, 0x32	; 50
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e2 e3       	ldi	r30, 0x32	; 50
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	8e 7f       	andi	r24, 0xFE	; 254
    3216:	8c 93       	st	X, r24
		break;
	}

	/* Set speed (0 - 100%) */
	OCR1B = (uint8)((speed * 255) / 100);
    3218:	e8 e4       	ldi	r30, 0x48	; 72
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	48 2f       	mov	r20, r24
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	ca 01       	movw	r24, r20
    3224:	9c 01       	movw	r18, r24
    3226:	22 0f       	add	r18, r18
    3228:	33 1f       	adc	r19, r19
    322a:	c9 01       	movw	r24, r18
    322c:	96 95       	lsr	r25
    322e:	98 2f       	mov	r25, r24
    3230:	88 27       	eor	r24, r24
    3232:	97 95       	ror	r25
    3234:	87 95       	ror	r24
    3236:	82 1b       	sub	r24, r18
    3238:	93 0b       	sbc	r25, r19
    323a:	84 0f       	add	r24, r20
    323c:	95 1f       	adc	r25, r21
    323e:	24 e6       	ldi	r18, 0x64	; 100
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	b9 01       	movw	r22, r18
    3244:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__divmodhi4>
    3248:	cb 01       	movw	r24, r22
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	80 83       	st	Z, r24
}
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <DC_LEFT>:

/* --------- Control Left Motor --------- */
void DC_LEFT(DcMotor_State state, uint8 speed)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	00 d0       	rcall	.+0      	; 0x3266 <DC_LEFT+0x6>
    3266:	00 d0       	rcall	.+0      	; 0x3268 <DC_LEFT+0x8>
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	6a 83       	std	Y+2, r22	; 0x02
	/* Control direction */
	switch(state)
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	3c 83       	std	Y+4, r19	; 0x04
    3278:	2b 83       	std	Y+3, r18	; 0x03
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	81 30       	cpi	r24, 0x01	; 1
    3280:	91 05       	cpc	r25, r1
    3282:	89 f0       	breq	.+34     	; 0x32a6 <DC_LEFT+0x46>
    3284:	2b 81       	ldd	r18, Y+3	; 0x03
    3286:	3c 81       	ldd	r19, Y+4	; 0x04
    3288:	22 30       	cpi	r18, 0x02	; 2
    328a:	31 05       	cpc	r19, r1
    328c:	d9 f0       	breq	.+54     	; 0x32c4 <DC_LEFT+0x64>
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	29 f5       	brne	.+74     	; 0x32e0 <DC_LEFT+0x80>
	{
	case STOP:
		DC_MOTOR_LEFT_PORT &= ~((1 << DC_MOTOR_LEFT_IN1) | (1 << DC_MOTOR_LEFT_IN2));
    3296:	a2 e3       	ldi	r26, 0x32	; 50
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e2 e3       	ldi	r30, 0x32	; 50
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	8b 7b       	andi	r24, 0xBB	; 187
    32a2:	8c 93       	st	X, r24
    32a4:	1d c0       	rjmp	.+58     	; 0x32e0 <DC_LEFT+0x80>
		break;

	case CW:
		DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN1);
    32a6:	a2 e3       	ldi	r26, 0x32	; 50
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e2 e3       	ldi	r30, 0x32	; 50
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	84 60       	ori	r24, 0x04	; 4
    32b2:	8c 93       	st	X, r24
		DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN2);
    32b4:	a2 e3       	ldi	r26, 0x32	; 50
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e2 e3       	ldi	r30, 0x32	; 50
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8f 7b       	andi	r24, 0xBF	; 191
    32c0:	8c 93       	st	X, r24
    32c2:	0e c0       	rjmp	.+28     	; 0x32e0 <DC_LEFT+0x80>
		break;

	case A_CW:
		DC_MOTOR_LEFT_PORT |= (1 << DC_MOTOR_LEFT_IN2);
    32c4:	a2 e3       	ldi	r26, 0x32	; 50
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e2 e3       	ldi	r30, 0x32	; 50
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	80 64       	ori	r24, 0x40	; 64
    32d0:	8c 93       	st	X, r24
		DC_MOTOR_LEFT_PORT &= ~(1 << DC_MOTOR_LEFT_IN1);
    32d2:	a2 e3       	ldi	r26, 0x32	; 50
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e2 e3       	ldi	r30, 0x32	; 50
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	8b 7f       	andi	r24, 0xFB	; 251
    32de:	8c 93       	st	X, r24
		break;
	}

	/* Set speed (0 - 100%) */
	OCR1A = (uint8)((speed * 255) / 100);
    32e0:	ea e4       	ldi	r30, 0x4A	; 74
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	48 2f       	mov	r20, r24
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	ca 01       	movw	r24, r20
    32ec:	9c 01       	movw	r18, r24
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	c9 01       	movw	r24, r18
    32f4:	96 95       	lsr	r25
    32f6:	98 2f       	mov	r25, r24
    32f8:	88 27       	eor	r24, r24
    32fa:	97 95       	ror	r25
    32fc:	87 95       	ror	r24
    32fe:	82 1b       	sub	r24, r18
    3300:	93 0b       	sbc	r25, r19
    3302:	84 0f       	add	r24, r20
    3304:	95 1f       	adc	r25, r21
    3306:	24 e6       	ldi	r18, 0x64	; 100
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	b9 01       	movw	r22, r18
    330c:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__divmodhi4>
    3310:	cb 01       	movw	r24, r22
    3312:	88 2f       	mov	r24, r24
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	80 83       	st	Z, r24
}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <IR1_init>:
#include "IR_sensor.h"

// ==== INIT Functions ====
void IR1_init(void){ IR_DDR &= ~(1<<IR1_PIN); }
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	a4 e3       	ldi	r26, 0x34	; 52
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e4 e3       	ldi	r30, 0x34	; 52
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8e 7f       	andi	r24, 0xFE	; 254
    333c:	8c 93       	st	X, r24
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <IR3_init>:
void IR3_init(void){ IR_DDR &= ~(1<<IR3_PIN); }
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	a4 e3       	ldi	r26, 0x34	; 52
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e4 e3       	ldi	r30, 0x34	; 52
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	8b 7f       	andi	r24, 0xFB	; 251
    3358:	8c 93       	st	X, r24
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <IR8_init>:
void IR8_init(void){ IR_DDR &= ~(1<<IR8_PIN); }
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	a4 e3       	ldi	r26, 0x34	; 52
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e4 e3       	ldi	r30, 0x34	; 52
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8f 77       	andi	r24, 0x7F	; 127
    3374:	8c 93       	st	X, r24
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <IR1_getState>:

// ==== GET STATE Functions ====
uint8 IR1_getState(void){ return (IR_PIN_REG & (1<<IR1_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	0f 92       	push	r0
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	e3 e3       	ldi	r30, 0x33	; 51
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	88 2f       	mov	r24, r24
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	81 70       	andi	r24, 0x01	; 1
    3392:	90 70       	andi	r25, 0x00	; 0
    3394:	88 23       	and	r24, r24
    3396:	11 f0       	breq	.+4      	; 0x339c <IR1_getState+0x20>
    3398:	19 82       	std	Y+1, r1	; 0x01
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <IR1_getState+0x24>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <IR3_getState>:
uint8 IR3_getState(void){ return (IR_PIN_REG & (1<<IR3_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	0f 92       	push	r0
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	e3 e3       	ldi	r30, 0x33	; 51
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	84 70       	andi	r24, 0x04	; 4
    33c0:	90 70       	andi	r25, 0x00	; 0
    33c2:	19 82       	std	Y+1, r1	; 0x01
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	11 f4       	brne	.+4      	; 0x33cc <IR3_getState+0x22>
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	0f 90       	pop	r0
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <IR8_getState>:
uint8 IR8_getState(void){ return (IR_PIN_REG & (1<<IR8_PIN)) ? LOGIC_HIGH : LOGIC_LOW; }
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	0f 92       	push	r0
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	e3 e3       	ldi	r30, 0x33	; 51
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	19 82       	std	Y+1, r1	; 0x01
    33e8:	88 23       	and	r24, r24
    33ea:	14 f0       	brlt	.+4      	; 0x33f0 <IR8_getState+0x1a>
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	0f 90       	pop	r0
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <Encoder_GetRPM>:
volatile long encoder_count1 = 0;
volatile long encoder_count2 = 0;

// دالة حساب RPM
float Encoder_GetRPM(volatile long *count)
{
    33fa:	ef 92       	push	r14
    33fc:	ff 92       	push	r15
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	df 93       	push	r29
    3404:	cf 93       	push	r28
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	2a 97       	sbiw	r28, 0x0a	; 10
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	9a 87       	std	Y+10, r25	; 0x0a
    3418:	89 87       	std	Y+9, r24	; 0x09
    static long prev_count1 = 0;
    static long prev_count2 = 0;

    long diff;
    if (count == &encoder_count1) {
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	9a 85       	ldd	r25, Y+10	; 0x0a
    341e:	01 e0       	ldi	r16, 0x01	; 1
    3420:	8a 3b       	cpi	r24, 0xBA	; 186
    3422:	90 07       	cpc	r25, r16
    3424:	69 f5       	brne	.+90     	; 0x3480 <Encoder_GetRPM+0x86>
        diff = encoder_count1 - prev_count1;
    3426:	20 91 ba 01 	lds	r18, 0x01BA
    342a:	30 91 bb 01 	lds	r19, 0x01BB
    342e:	40 91 bc 01 	lds	r20, 0x01BC
    3432:	50 91 bd 01 	lds	r21, 0x01BD
    3436:	80 91 c6 01 	lds	r24, 0x01C6
    343a:	90 91 c7 01 	lds	r25, 0x01C7
    343e:	a0 91 c8 01 	lds	r26, 0x01C8
    3442:	b0 91 c9 01 	lds	r27, 0x01C9
    3446:	79 01       	movw	r14, r18
    3448:	8a 01       	movw	r16, r20
    344a:	e8 1a       	sub	r14, r24
    344c:	f9 0a       	sbc	r15, r25
    344e:	0a 0b       	sbc	r16, r26
    3450:	1b 0b       	sbc	r17, r27
    3452:	d8 01       	movw	r26, r16
    3454:	c7 01       	movw	r24, r14
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	af 83       	std	Y+7, r26	; 0x07
    345c:	b8 87       	std	Y+8, r27	; 0x08
        prev_count1 = encoder_count1;
    345e:	80 91 ba 01 	lds	r24, 0x01BA
    3462:	90 91 bb 01 	lds	r25, 0x01BB
    3466:	a0 91 bc 01 	lds	r26, 0x01BC
    346a:	b0 91 bd 01 	lds	r27, 0x01BD
    346e:	80 93 c6 01 	sts	0x01C6, r24
    3472:	90 93 c7 01 	sts	0x01C7, r25
    3476:	a0 93 c8 01 	sts	0x01C8, r26
    347a:	b0 93 c9 01 	sts	0x01C9, r27
    347e:	2c c0       	rjmp	.+88     	; 0x34d8 <Encoder_GetRPM+0xde>
    } else {
        diff = encoder_count2 - prev_count2;
    3480:	20 91 be 01 	lds	r18, 0x01BE
    3484:	30 91 bf 01 	lds	r19, 0x01BF
    3488:	40 91 c0 01 	lds	r20, 0x01C0
    348c:	50 91 c1 01 	lds	r21, 0x01C1
    3490:	80 91 c2 01 	lds	r24, 0x01C2
    3494:	90 91 c3 01 	lds	r25, 0x01C3
    3498:	a0 91 c4 01 	lds	r26, 0x01C4
    349c:	b0 91 c5 01 	lds	r27, 0x01C5
    34a0:	79 01       	movw	r14, r18
    34a2:	8a 01       	movw	r16, r20
    34a4:	e8 1a       	sub	r14, r24
    34a6:	f9 0a       	sbc	r15, r25
    34a8:	0a 0b       	sbc	r16, r26
    34aa:	1b 0b       	sbc	r17, r27
    34ac:	d8 01       	movw	r26, r16
    34ae:	c7 01       	movw	r24, r14
    34b0:	8d 83       	std	Y+5, r24	; 0x05
    34b2:	9e 83       	std	Y+6, r25	; 0x06
    34b4:	af 83       	std	Y+7, r26	; 0x07
    34b6:	b8 87       	std	Y+8, r27	; 0x08
        prev_count2 = encoder_count2;
    34b8:	80 91 be 01 	lds	r24, 0x01BE
    34bc:	90 91 bf 01 	lds	r25, 0x01BF
    34c0:	a0 91 c0 01 	lds	r26, 0x01C0
    34c4:	b0 91 c1 01 	lds	r27, 0x01C1
    34c8:	80 93 c2 01 	sts	0x01C2, r24
    34cc:	90 93 c3 01 	sts	0x01C3, r25
    34d0:	a0 93 c4 01 	sts	0x01C4, r26
    34d4:	b0 93 c5 01 	sts	0x01C5, r27
    }

    float revolutions = (float)diff / PPR;
    34d8:	6d 81       	ldd	r22, Y+5	; 0x05
    34da:	7e 81       	ldd	r23, Y+6	; 0x06
    34dc:	8f 81       	ldd	r24, Y+7	; 0x07
    34de:	98 85       	ldd	r25, Y+8	; 0x08
    34e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	48 e4       	ldi	r20, 0x48	; 72
    34f2:	53 e4       	ldi	r21, 0x43	; 67
    34f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	9a 83       	std	Y+2, r25	; 0x02
    3500:	ab 83       	std	Y+3, r26	; 0x03
    3502:	bc 83       	std	Y+4, r27	; 0x04
    return (revolutions / Ts) * 60.0f;
    3504:	69 81       	ldd	r22, Y+1	; 0x01
    3506:	7a 81       	ldd	r23, Y+2	; 0x02
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	2a e0       	ldi	r18, 0x0A	; 10
    350e:	37 ed       	ldi	r19, 0xD7	; 215
    3510:	43 ea       	ldi	r20, 0xA3	; 163
    3512:	5c e3       	ldi	r21, 0x3C	; 60
    3514:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e7       	ldi	r20, 0x70	; 112
    3526:	52 e4       	ldi	r21, 0x42	; 66
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
}
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	2a 96       	adiw	r28, 0x0a	; 10
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	08 95       	ret

0000354e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	2e 97       	sbiw	r28, 0x0e	; 14
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	61 e0       	ldi	r22, 0x01	; 1
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	62 e0       	ldi	r22, 0x02	; 2
    3570:	41 e0       	ldi	r20, 0x01	; 1
    3572:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	a0 ea       	ldi	r26, 0xA0	; 160
    357c:	b1 e4       	ldi	r27, 0x41	; 65
    357e:	8b 87       	std	Y+11, r24	; 0x0b
    3580:	9c 87       	std	Y+12, r25	; 0x0c
    3582:	ad 87       	std	Y+13, r26	; 0x0d
    3584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3586:	6b 85       	ldd	r22, Y+11	; 0x0b
    3588:	7c 85       	ldd	r23, Y+12	; 0x0c
    358a:	8d 85       	ldd	r24, Y+13	; 0x0d
    358c:	9e 85       	ldd	r25, Y+14	; 0x0e
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	4a e7       	ldi	r20, 0x7A	; 122
    3594:	55 e4       	ldi	r21, 0x45	; 69
    3596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	8f 83       	std	Y+7, r24	; 0x07
    35a0:	98 87       	std	Y+8, r25	; 0x08
    35a2:	a9 87       	std	Y+9, r26	; 0x09
    35a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a6:	6f 81       	ldd	r22, Y+7	; 0x07
    35a8:	78 85       	ldd	r23, Y+8	; 0x08
    35aa:	89 85       	ldd	r24, Y+9	; 0x09
    35ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e8       	ldi	r20, 0x80	; 128
    35b4:	5f e3       	ldi	r21, 0x3F	; 63
    35b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ba:	88 23       	and	r24, r24
    35bc:	2c f4       	brge	.+10     	; 0x35c8 <LCD_init+0x7a>
		__ticks = 1;
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
    35c6:	3f c0       	rjmp	.+126    	; 0x3646 <LCD_init+0xf8>
	else if (__tmp > 65535)
    35c8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ca:	78 85       	ldd	r23, Y+8	; 0x08
    35cc:	89 85       	ldd	r24, Y+9	; 0x09
    35ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	3f ef       	ldi	r19, 0xFF	; 255
    35d4:	4f e7       	ldi	r20, 0x7F	; 127
    35d6:	57 e4       	ldi	r21, 0x47	; 71
    35d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35dc:	18 16       	cp	r1, r24
    35de:	4c f5       	brge	.+82     	; 0x3632 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e2       	ldi	r20, 0x20	; 32
    35ee:	51 e4       	ldi	r21, 0x41	; 65
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	bc 01       	movw	r22, r24
    35fa:	cd 01       	movw	r24, r26
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	0f c0       	rjmp	.+30     	; 0x3628 <LCD_init+0xda>
    360a:	80 e9       	ldi	r24, 0x90	; 144
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	9c 83       	std	Y+4, r25	; 0x04
    3610:	8b 83       	std	Y+3, r24	; 0x03
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	9c 81       	ldd	r25, Y+4	; 0x04
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <LCD_init+0xc8>
    361a:	9c 83       	std	Y+4, r25	; 0x04
    361c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	9e 83       	std	Y+6, r25	; 0x06
    3626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	00 97       	sbiw	r24, 0x00	; 0
    362e:	69 f7       	brne	.-38     	; 0x360a <LCD_init+0xbc>
    3630:	14 c0       	rjmp	.+40     	; 0x365a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3632:	6f 81       	ldd	r22, Y+7	; 0x07
    3634:	78 85       	ldd	r23, Y+8	; 0x08
    3636:	89 85       	ldd	r24, Y+9	; 0x09
    3638:	9a 85       	ldd	r25, Y+10	; 0x0a
    363a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
    3646:	8d 81       	ldd	r24, Y+5	; 0x05
    3648:	9e 81       	ldd	r25, Y+6	; 0x06
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <LCD_init+0x104>
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	63 e0       	ldi	r22, 0x03	; 3
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	64 e0       	ldi	r22, 0x04	; 4
    3668:	41 e0       	ldi	r20, 0x01	; 1
    366a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	65 e0       	ldi	r22, 0x05	; 5
    3672:	41 e0       	ldi	r20, 0x01	; 1
    3674:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	66 e0       	ldi	r22, 0x06	; 6
    367c:	41 e0       	ldi	r20, 0x01	; 1
    367e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    3682:	83 e3       	ldi	r24, 0x33	; 51
    3684:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3688:	82 e3       	ldi	r24, 0x32	; 50
    368a:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    368e:	88 e2       	ldi	r24, 0x28	; 40
    3690:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3694:	8c e0       	ldi	r24, 0x0C	; 12
    3696:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
}
    36a0:	2e 96       	adiw	r28, 0x0e	; 14
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	c3 56       	subi	r28, 0x63	; 99
    36c0:	d0 40       	sbci	r29, 0x00	; 0
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	fe 01       	movw	r30, r28
    36ce:	ed 59       	subi	r30, 0x9D	; 157
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    36de:	fe 01       	movw	r30, r28
    36e0:	e1 5a       	subi	r30, 0xA1	; 161
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a0 e8       	ldi	r26, 0x80	; 128
    36ea:	bf e3       	ldi	r27, 0x3F	; 63
    36ec:	80 83       	st	Z, r24
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	a2 83       	std	Z+2, r26	; 0x02
    36f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f4:	8e 01       	movw	r16, r28
    36f6:	05 5a       	subi	r16, 0xA5	; 165
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	fe 01       	movw	r30, r28
    36fc:	e1 5a       	subi	r30, 0xA1	; 161
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4a e7       	ldi	r20, 0x7A	; 122
    370e:	55 e4       	ldi	r21, 0x45	; 69
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	f8 01       	movw	r30, r16
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	a2 83       	std	Z+2, r26	; 0x02
    3720:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3722:	fe 01       	movw	r30, r28
    3724:	e5 5a       	subi	r30, 0xA5	; 165
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	60 81       	ld	r22, Z
    372a:	71 81       	ldd	r23, Z+1	; 0x01
    372c:	82 81       	ldd	r24, Z+2	; 0x02
    372e:	93 81       	ldd	r25, Z+3	; 0x03
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e8       	ldi	r20, 0x80	; 128
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373c:	88 23       	and	r24, r24
    373e:	44 f4       	brge	.+16     	; 0x3750 <LCD_sendCommand+0x9e>
		__ticks = 1;
    3740:	fe 01       	movw	r30, r28
    3742:	e7 5a       	subi	r30, 0xA7	; 167
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	80 83       	st	Z, r24
    374e:	64 c0       	rjmp	.+200    	; 0x3818 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3750:	fe 01       	movw	r30, r28
    3752:	e5 5a       	subi	r30, 0xA5	; 165
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	3f ef       	ldi	r19, 0xFF	; 255
    3762:	4f e7       	ldi	r20, 0x7F	; 127
    3764:	57 e4       	ldi	r21, 0x47	; 71
    3766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    376a:	18 16       	cp	r1, r24
    376c:	0c f0       	brlt	.+2      	; 0x3770 <LCD_sendCommand+0xbe>
    376e:	43 c0       	rjmp	.+134    	; 0x37f6 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3770:	fe 01       	movw	r30, r28
    3772:	e1 5a       	subi	r30, 0xA1	; 161
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	60 81       	ld	r22, Z
    3778:	71 81       	ldd	r23, Z+1	; 0x01
    377a:	82 81       	ldd	r24, Z+2	; 0x02
    377c:	93 81       	ldd	r25, Z+3	; 0x03
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e2       	ldi	r20, 0x20	; 32
    3784:	51 e4       	ldi	r21, 0x41	; 65
    3786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	8e 01       	movw	r16, r28
    3790:	07 5a       	subi	r16, 0xA7	; 167
    3792:	1f 4f       	sbci	r17, 0xFF	; 255
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	91 83       	std	Z+1, r25	; 0x01
    37a4:	80 83       	st	Z, r24
    37a6:	1f c0       	rjmp	.+62     	; 0x37e6 <LCD_sendCommand+0x134>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e9 5a       	subi	r30, 0xA9	; 169
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 e9       	ldi	r24, 0x90	; 144
    37b0:	91 e0       	ldi	r25, 0x01	; 1
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24
    37b6:	fe 01       	movw	r30, r28
    37b8:	e9 5a       	subi	r30, 0xA9	; 169
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <LCD_sendCommand+0x10e>
    37c4:	fe 01       	movw	r30, r28
    37c6:	e9 5a       	subi	r30, 0xA9	; 169
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ce:	de 01       	movw	r26, r28
    37d0:	a7 5a       	subi	r26, 0xA7	; 167
    37d2:	bf 4f       	sbci	r27, 0xFF	; 255
    37d4:	fe 01       	movw	r30, r28
    37d6:	e7 5a       	subi	r30, 0xA7	; 167
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	11 96       	adiw	r26, 0x01	; 1
    37e2:	9c 93       	st	X, r25
    37e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e6:	fe 01       	movw	r30, r28
    37e8:	e7 5a       	subi	r30, 0xA7	; 167
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 81       	ld	r24, Z
    37ee:	91 81       	ldd	r25, Z+1	; 0x01
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	d1 f6       	brne	.-76     	; 0x37a8 <LCD_sendCommand+0xf6>
    37f4:	27 c0       	rjmp	.+78     	; 0x3844 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f6:	8e 01       	movw	r16, r28
    37f8:	07 5a       	subi	r16, 0xA7	; 167
    37fa:	1f 4f       	sbci	r17, 0xFF	; 255
    37fc:	fe 01       	movw	r30, r28
    37fe:	e5 5a       	subi	r30, 0xA5	; 165
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	60 81       	ld	r22, Z
    3804:	71 81       	ldd	r23, Z+1	; 0x01
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	f8 01       	movw	r30, r16
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
    3818:	de 01       	movw	r26, r28
    381a:	ab 5a       	subi	r26, 0xAB	; 171
    381c:	bf 4f       	sbci	r27, 0xFF	; 255
    381e:	fe 01       	movw	r30, r28
    3820:	e7 5a       	subi	r30, 0xA7	; 167
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	8d 93       	st	X+, r24
    382a:	9c 93       	st	X, r25
    382c:	fe 01       	movw	r30, r28
    382e:	eb 5a       	subi	r30, 0xAB	; 171
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <LCD_sendCommand+0x184>
    383a:	fe 01       	movw	r30, r28
    383c:	eb 5a       	subi	r30, 0xAB	; 171
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	62 e0       	ldi	r22, 0x02	; 2
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    384e:	fe 01       	movw	r30, r28
    3850:	ef 5a       	subi	r30, 0xAF	; 175
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a0 e8       	ldi	r26, 0x80	; 128
    385a:	bf e3       	ldi	r27, 0x3F	; 63
    385c:	80 83       	st	Z, r24
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	a2 83       	std	Z+2, r26	; 0x02
    3862:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	8e 01       	movw	r16, r28
    3866:	03 5b       	subi	r16, 0xB3	; 179
    3868:	1f 4f       	sbci	r17, 0xFF	; 255
    386a:	fe 01       	movw	r30, r28
    386c:	ef 5a       	subi	r30, 0xAF	; 175
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	60 81       	ld	r22, Z
    3872:	71 81       	ldd	r23, Z+1	; 0x01
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	93 81       	ldd	r25, Z+3	; 0x03
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	4a e7       	ldi	r20, 0x7A	; 122
    387e:	55 e4       	ldi	r21, 0x45	; 69
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	f8 01       	movw	r30, r16
    388a:	80 83       	st	Z, r24
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	a2 83       	std	Z+2, r26	; 0x02
    3890:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3892:	fe 01       	movw	r30, r28
    3894:	e3 5b       	subi	r30, 0xB3	; 179
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	60 81       	ld	r22, Z
    389a:	71 81       	ldd	r23, Z+1	; 0x01
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	93 81       	ldd	r25, Z+3	; 0x03
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e8       	ldi	r20, 0x80	; 128
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ac:	88 23       	and	r24, r24
    38ae:	44 f4       	brge	.+16     	; 0x38c0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    38b0:	fe 01       	movw	r30, r28
    38b2:	e5 5b       	subi	r30, 0xB5	; 181
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
    38be:	64 c0       	rjmp	.+200    	; 0x3988 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    38c0:	fe 01       	movw	r30, r28
    38c2:	e3 5b       	subi	r30, 0xB3	; 179
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	60 81       	ld	r22, Z
    38c8:	71 81       	ldd	r23, Z+1	; 0x01
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	93 81       	ldd	r25, Z+3	; 0x03
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	3f ef       	ldi	r19, 0xFF	; 255
    38d2:	4f e7       	ldi	r20, 0x7F	; 127
    38d4:	57 e4       	ldi	r21, 0x47	; 71
    38d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38da:	18 16       	cp	r1, r24
    38dc:	0c f0       	brlt	.+2      	; 0x38e0 <LCD_sendCommand+0x22e>
    38de:	43 c0       	rjmp	.+134    	; 0x3966 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e0:	fe 01       	movw	r30, r28
    38e2:	ef 5a       	subi	r30, 0xAF	; 175
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	40 e2       	ldi	r20, 0x20	; 32
    38f4:	51 e4       	ldi	r21, 0x41	; 65
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8e 01       	movw	r16, r28
    3900:	05 5b       	subi	r16, 0xB5	; 181
    3902:	1f 4f       	sbci	r17, 0xFF	; 255
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	f8 01       	movw	r30, r16
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	80 83       	st	Z, r24
    3916:	1f c0       	rjmp	.+62     	; 0x3956 <LCD_sendCommand+0x2a4>
    3918:	fe 01       	movw	r30, r28
    391a:	e7 5b       	subi	r30, 0xB7	; 183
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 e9       	ldi	r24, 0x90	; 144
    3920:	91 e0       	ldi	r25, 0x01	; 1
    3922:	91 83       	std	Z+1, r25	; 0x01
    3924:	80 83       	st	Z, r24
    3926:	fe 01       	movw	r30, r28
    3928:	e7 5b       	subi	r30, 0xB7	; 183
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <LCD_sendCommand+0x27e>
    3934:	fe 01       	movw	r30, r28
    3936:	e7 5b       	subi	r30, 0xB7	; 183
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	91 83       	std	Z+1, r25	; 0x01
    393c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393e:	de 01       	movw	r26, r28
    3940:	a5 5b       	subi	r26, 0xB5	; 181
    3942:	bf 4f       	sbci	r27, 0xFF	; 255
    3944:	fe 01       	movw	r30, r28
    3946:	e5 5b       	subi	r30, 0xB5	; 181
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 81       	ld	r24, Z
    394c:	91 81       	ldd	r25, Z+1	; 0x01
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	11 96       	adiw	r26, 0x01	; 1
    3952:	9c 93       	st	X, r25
    3954:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3956:	fe 01       	movw	r30, r28
    3958:	e5 5b       	subi	r30, 0xB5	; 181
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	d1 f6       	brne	.-76     	; 0x3918 <LCD_sendCommand+0x266>
    3964:	27 c0       	rjmp	.+78     	; 0x39b4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3966:	8e 01       	movw	r16, r28
    3968:	05 5b       	subi	r16, 0xB5	; 181
    396a:	1f 4f       	sbci	r17, 0xFF	; 255
    396c:	fe 01       	movw	r30, r28
    396e:	e3 5b       	subi	r30, 0xB3	; 179
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	60 81       	ld	r22, Z
    3974:	71 81       	ldd	r23, Z+1	; 0x01
    3976:	82 81       	ldd	r24, Z+2	; 0x02
    3978:	93 81       	ldd	r25, Z+3	; 0x03
    397a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	f8 01       	movw	r30, r16
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24
    3988:	de 01       	movw	r26, r28
    398a:	a9 5b       	subi	r26, 0xB9	; 185
    398c:	bf 4f       	sbci	r27, 0xFF	; 255
    398e:	fe 01       	movw	r30, r28
    3990:	e5 5b       	subi	r30, 0xB5	; 181
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	8d 93       	st	X+, r24
    399a:	9c 93       	st	X, r25
    399c:	fe 01       	movw	r30, r28
    399e:	e9 5b       	subi	r30, 0xB9	; 185
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <LCD_sendCommand+0x2f4>
    39aa:	fe 01       	movw	r30, r28
    39ac:	e9 5b       	subi	r30, 0xB9	; 185
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    39b4:	fe 01       	movw	r30, r28
    39b6:	ed 59       	subi	r30, 0x9D	; 157
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 81       	ld	r24, Z
    39bc:	88 2f       	mov	r24, r24
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	80 71       	andi	r24, 0x10	; 16
    39c2:	90 70       	andi	r25, 0x00	; 0
    39c4:	95 95       	asr	r25
    39c6:	87 95       	ror	r24
    39c8:	95 95       	asr	r25
    39ca:	87 95       	ror	r24
    39cc:	95 95       	asr	r25
    39ce:	87 95       	ror	r24
    39d0:	95 95       	asr	r25
    39d2:	87 95       	ror	r24
    39d4:	98 2f       	mov	r25, r24
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	63 e0       	ldi	r22, 0x03	; 3
    39da:	49 2f       	mov	r20, r25
    39dc:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    39e0:	fe 01       	movw	r30, r28
    39e2:	ed 59       	subi	r30, 0x9D	; 157
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	88 2f       	mov	r24, r24
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	80 72       	andi	r24, 0x20	; 32
    39ee:	90 70       	andi	r25, 0x00	; 0
    39f0:	95 95       	asr	r25
    39f2:	87 95       	ror	r24
    39f4:	95 95       	asr	r25
    39f6:	87 95       	ror	r24
    39f8:	95 95       	asr	r25
    39fa:	87 95       	ror	r24
    39fc:	95 95       	asr	r25
    39fe:	87 95       	ror	r24
    3a00:	95 95       	asr	r25
    3a02:	87 95       	ror	r24
    3a04:	98 2f       	mov	r25, r24
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	64 e0       	ldi	r22, 0x04	; 4
    3a0a:	49 2f       	mov	r20, r25
    3a0c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    3a10:	fe 01       	movw	r30, r28
    3a12:	ed 59       	subi	r30, 0x9D	; 157
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	80 74       	andi	r24, 0x40	; 64
    3a1e:	90 70       	andi	r25, 0x00	; 0
    3a20:	08 2e       	mov	r0, r24
    3a22:	89 2f       	mov	r24, r25
    3a24:	00 0c       	add	r0, r0
    3a26:	88 1f       	adc	r24, r24
    3a28:	99 0b       	sbc	r25, r25
    3a2a:	00 0c       	add	r0, r0
    3a2c:	88 1f       	adc	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	98 2f       	mov	r25, r24
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	65 e0       	ldi	r22, 0x05	; 5
    3a36:	49 2f       	mov	r20, r25
    3a38:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	ed 59       	subi	r30, 0x9D	; 157
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	80 81       	ld	r24, Z
    3a44:	98 2f       	mov	r25, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	99 27       	eor	r25, r25
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	66 e0       	ldi	r22, 0x06	; 6
    3a50:	49 2f       	mov	r20, r25
    3a52:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3a56:	fe 01       	movw	r30, r28
    3a58:	ed 5b       	subi	r30, 0xBD	; 189
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	a0 e8       	ldi	r26, 0x80	; 128
    3a62:	bf e3       	ldi	r27, 0x3F	; 63
    3a64:	80 83       	st	Z, r24
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	a2 83       	std	Z+2, r26	; 0x02
    3a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	01 5c       	subi	r16, 0xC1	; 193
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	fe 01       	movw	r30, r28
    3a74:	ed 5b       	subi	r30, 0xBD	; 189
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a e7       	ldi	r20, 0x7A	; 122
    3a86:	55 e4       	ldi	r21, 0x45	; 69
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	f8 01       	movw	r30, r16
    3a92:	80 83       	st	Z, r24
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	a2 83       	std	Z+2, r26	; 0x02
    3a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	ff 96       	adiw	r30, 0x3f	; 63
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab2:	88 23       	and	r24, r24
    3ab4:	2c f4       	brge	.+10     	; 0x3ac0 <LCD_sendCommand+0x40e>
		__ticks = 1;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	9e af       	std	Y+62, r25	; 0x3e
    3abc:	8d af       	std	Y+61, r24	; 0x3d
    3abe:	46 c0       	rjmp	.+140    	; 0x3b4c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ff 96       	adiw	r30, 0x3f	; 63
    3ac4:	60 81       	ld	r22, Z
    3ac6:	71 81       	ldd	r23, Z+1	; 0x01
    3ac8:	82 81       	ldd	r24, Z+2	; 0x02
    3aca:	93 81       	ldd	r25, Z+3	; 0x03
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	3f ef       	ldi	r19, 0xFF	; 255
    3ad0:	4f e7       	ldi	r20, 0x7F	; 127
    3ad2:	57 e4       	ldi	r21, 0x47	; 71
    3ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad8:	18 16       	cp	r1, r24
    3ada:	64 f5       	brge	.+88     	; 0x3b34 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3adc:	fe 01       	movw	r30, r28
    3ade:	ed 5b       	subi	r30, 0xBD	; 189
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	60 81       	ld	r22, Z
    3ae4:	71 81       	ldd	r23, Z+1	; 0x01
    3ae6:	82 81       	ldd	r24, Z+2	; 0x02
    3ae8:	93 81       	ldd	r25, Z+3	; 0x03
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9e af       	std	Y+62, r25	; 0x3e
    3b08:	8d af       	std	Y+61, r24	; 0x3d
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <LCD_sendCommand+0x478>
    3b0c:	80 e9       	ldi	r24, 0x90	; 144
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	9c af       	std	Y+60, r25	; 0x3c
    3b12:	8b af       	std	Y+59, r24	; 0x3b
    3b14:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b16:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <LCD_sendCommand+0x466>
    3b1c:	9c af       	std	Y+60, r25	; 0x3c
    3b1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b20:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b22:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	9e af       	std	Y+62, r25	; 0x3e
    3b28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <LCD_sendCommand+0x45a>
    3b32:	16 c0       	rjmp	.+44     	; 0x3b60 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b34:	fe 01       	movw	r30, r28
    3b36:	ff 96       	adiw	r30, 0x3f	; 63
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	9e af       	std	Y+62, r25	; 0x3e
    3b4a:	8d af       	std	Y+61, r24	; 0x3d
    3b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b50:	9a af       	std	Y+58, r25	; 0x3a
    3b52:	89 af       	std	Y+57, r24	; 0x39
    3b54:	89 ad       	ldd	r24, Y+57	; 0x39
    3b56:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <LCD_sendCommand+0x4a6>
    3b5c:	9a af       	std	Y+58, r25	; 0x3a
    3b5e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	62 e0       	ldi	r22, 0x02	; 2
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	a0 e8       	ldi	r26, 0x80	; 128
    3b70:	bf e3       	ldi	r27, 0x3F	; 63
    3b72:	8d ab       	std	Y+53, r24	; 0x35
    3b74:	9e ab       	std	Y+54, r25	; 0x36
    3b76:	af ab       	std	Y+55, r26	; 0x37
    3b78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7a:	6d a9       	ldd	r22, Y+53	; 0x35
    3b7c:	7e a9       	ldd	r23, Y+54	; 0x36
    3b7e:	8f a9       	ldd	r24, Y+55	; 0x37
    3b80:	98 ad       	ldd	r25, Y+56	; 0x38
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4a e7       	ldi	r20, 0x7A	; 122
    3b88:	55 e4       	ldi	r21, 0x45	; 69
    3b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	89 ab       	std	Y+49, r24	; 0x31
    3b94:	9a ab       	std	Y+50, r25	; 0x32
    3b96:	ab ab       	std	Y+51, r26	; 0x33
    3b98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e8       	ldi	r20, 0x80	; 128
    3ba8:	5f e3       	ldi	r21, 0x3F	; 63
    3baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bae:	88 23       	and	r24, r24
    3bb0:	2c f4       	brge	.+10     	; 0x3bbc <LCD_sendCommand+0x50a>
		__ticks = 1;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	98 ab       	std	Y+48, r25	; 0x30
    3bb8:	8f a7       	std	Y+47, r24	; 0x2f
    3bba:	3f c0       	rjmp	.+126    	; 0x3c3a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3bbc:	69 a9       	ldd	r22, Y+49	; 0x31
    3bbe:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc2:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	3f ef       	ldi	r19, 0xFF	; 255
    3bc8:	4f e7       	ldi	r20, 0x7F	; 127
    3bca:	57 e4       	ldi	r21, 0x47	; 71
    3bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd0:	18 16       	cp	r1, r24
    3bd2:	4c f5       	brge	.+82     	; 0x3c26 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd4:	6d a9       	ldd	r22, Y+53	; 0x35
    3bd6:	7e a9       	ldd	r23, Y+54	; 0x36
    3bd8:	8f a9       	ldd	r24, Y+55	; 0x37
    3bda:	98 ad       	ldd	r25, Y+56	; 0x38
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e2       	ldi	r20, 0x20	; 32
    3be2:	51 e4       	ldi	r21, 0x41	; 65
    3be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	98 ab       	std	Y+48, r25	; 0x30
    3bfa:	8f a7       	std	Y+47, r24	; 0x2f
    3bfc:	0f c0       	rjmp	.+30     	; 0x3c1c <LCD_sendCommand+0x56a>
    3bfe:	80 e9       	ldi	r24, 0x90	; 144
    3c00:	91 e0       	ldi	r25, 0x01	; 1
    3c02:	9e a7       	std	Y+46, r25	; 0x2e
    3c04:	8d a7       	std	Y+45, r24	; 0x2d
    3c06:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c08:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <LCD_sendCommand+0x558>
    3c0e:	9e a7       	std	Y+46, r25	; 0x2e
    3c10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c14:	98 a9       	ldd	r25, Y+48	; 0x30
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	98 ab       	std	Y+48, r25	; 0x30
    3c1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	69 f7       	brne	.-38     	; 0x3bfe <LCD_sendCommand+0x54c>
    3c24:	14 c0       	rjmp	.+40     	; 0x3c4e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c26:	69 a9       	ldd	r22, Y+49	; 0x31
    3c28:	7a a9       	ldd	r23, Y+50	; 0x32
    3c2a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c2c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	98 ab       	std	Y+48, r25	; 0x30
    3c38:	8f a7       	std	Y+47, r24	; 0x2f
    3c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c3e:	9c a7       	std	Y+44, r25	; 0x2c
    3c40:	8b a7       	std	Y+43, r24	; 0x2b
    3c42:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c44:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <LCD_sendCommand+0x594>
    3c4a:	9c a7       	std	Y+44, r25	; 0x2c
    3c4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	62 e0       	ldi	r22, 0x02	; 2
    3c52:	40 e0       	ldi	r20, 0x00	; 0
    3c54:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	a0 e8       	ldi	r26, 0x80	; 128
    3c5e:	bf e3       	ldi	r27, 0x3F	; 63
    3c60:	8f a3       	std	Y+39, r24	; 0x27
    3c62:	98 a7       	std	Y+40, r25	; 0x28
    3c64:	a9 a7       	std	Y+41, r26	; 0x29
    3c66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c68:	6f a1       	ldd	r22, Y+39	; 0x27
    3c6a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c6c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	4a e7       	ldi	r20, 0x7A	; 122
    3c76:	55 e4       	ldi	r21, 0x45	; 69
    3c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	8b a3       	std	Y+35, r24	; 0x23
    3c82:	9c a3       	std	Y+36, r25	; 0x24
    3c84:	ad a3       	std	Y+37, r26	; 0x25
    3c86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c88:	6b a1       	ldd	r22, Y+35	; 0x23
    3c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e8       	ldi	r20, 0x80	; 128
    3c96:	5f e3       	ldi	r21, 0x3F	; 63
    3c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9c:	88 23       	and	r24, r24
    3c9e:	2c f4       	brge	.+10     	; 0x3caa <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	9a a3       	std	Y+34, r25	; 0x22
    3ca6:	89 a3       	std	Y+33, r24	; 0x21
    3ca8:	3f c0       	rjmp	.+126    	; 0x3d28 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3caa:	6b a1       	ldd	r22, Y+35	; 0x23
    3cac:	7c a1       	ldd	r23, Y+36	; 0x24
    3cae:	8d a1       	ldd	r24, Y+37	; 0x25
    3cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	3f ef       	ldi	r19, 0xFF	; 255
    3cb6:	4f e7       	ldi	r20, 0x7F	; 127
    3cb8:	57 e4       	ldi	r21, 0x47	; 71
    3cba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cbe:	18 16       	cp	r1, r24
    3cc0:	4c f5       	brge	.+82     	; 0x3d14 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc2:	6f a1       	ldd	r22, Y+39	; 0x27
    3cc4:	78 a5       	ldd	r23, Y+40	; 0x28
    3cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    3cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e2       	ldi	r20, 0x20	; 32
    3cd0:	51 e4       	ldi	r21, 0x41	; 65
    3cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	bc 01       	movw	r22, r24
    3cdc:	cd 01       	movw	r24, r26
    3cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	9a a3       	std	Y+34, r25	; 0x22
    3ce8:	89 a3       	std	Y+33, r24	; 0x21
    3cea:	0f c0       	rjmp	.+30     	; 0x3d0a <LCD_sendCommand+0x658>
    3cec:	80 e9       	ldi	r24, 0x90	; 144
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	98 a3       	std	Y+32, r25	; 0x20
    3cf2:	8f 8f       	std	Y+31, r24	; 0x1f
    3cf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cf6:	98 a1       	ldd	r25, Y+32	; 0x20
    3cf8:	01 97       	sbiw	r24, 0x01	; 1
    3cfa:	f1 f7       	brne	.-4      	; 0x3cf8 <LCD_sendCommand+0x646>
    3cfc:	98 a3       	std	Y+32, r25	; 0x20
    3cfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d00:	89 a1       	ldd	r24, Y+33	; 0x21
    3d02:	9a a1       	ldd	r25, Y+34	; 0x22
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	9a a3       	std	Y+34, r25	; 0x22
    3d08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	69 f7       	brne	.-38     	; 0x3cec <LCD_sendCommand+0x63a>
    3d12:	14 c0       	rjmp	.+40     	; 0x3d3c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d14:	6b a1       	ldd	r22, Y+35	; 0x23
    3d16:	7c a1       	ldd	r23, Y+36	; 0x24
    3d18:	8d a1       	ldd	r24, Y+37	; 0x25
    3d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	9a a3       	std	Y+34, r25	; 0x22
    3d26:	89 a3       	std	Y+33, r24	; 0x21
    3d28:	89 a1       	ldd	r24, Y+33	; 0x21
    3d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d2e:	8d 8f       	std	Y+29, r24	; 0x1d
    3d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <LCD_sendCommand+0x682>
    3d38:	9e 8f       	std	Y+30, r25	; 0x1e
    3d3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	ed 59       	subi	r30, 0x9D	; 157
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 81       	ld	r24, Z
    3d44:	98 2f       	mov	r25, r24
    3d46:	91 70       	andi	r25, 0x01	; 1
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	63 e0       	ldi	r22, 0x03	; 3
    3d4c:	49 2f       	mov	r20, r25
    3d4e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    3d52:	fe 01       	movw	r30, r28
    3d54:	ed 59       	subi	r30, 0x9D	; 157
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	88 2f       	mov	r24, r24
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	82 70       	andi	r24, 0x02	; 2
    3d60:	90 70       	andi	r25, 0x00	; 0
    3d62:	95 95       	asr	r25
    3d64:	87 95       	ror	r24
    3d66:	98 2f       	mov	r25, r24
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	64 e0       	ldi	r22, 0x04	; 4
    3d6c:	49 2f       	mov	r20, r25
    3d6e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    3d72:	fe 01       	movw	r30, r28
    3d74:	ed 59       	subi	r30, 0x9D	; 157
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	84 70       	andi	r24, 0x04	; 4
    3d80:	90 70       	andi	r25, 0x00	; 0
    3d82:	95 95       	asr	r25
    3d84:	87 95       	ror	r24
    3d86:	95 95       	asr	r25
    3d88:	87 95       	ror	r24
    3d8a:	98 2f       	mov	r25, r24
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	65 e0       	ldi	r22, 0x05	; 5
    3d90:	49 2f       	mov	r20, r25
    3d92:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3d96:	fe 01       	movw	r30, r28
    3d98:	ed 59       	subi	r30, 0x9D	; 157
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	88 2f       	mov	r24, r24
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	88 70       	andi	r24, 0x08	; 8
    3da4:	90 70       	andi	r25, 0x00	; 0
    3da6:	95 95       	asr	r25
    3da8:	87 95       	ror	r24
    3daa:	95 95       	asr	r25
    3dac:	87 95       	ror	r24
    3dae:	95 95       	asr	r25
    3db0:	87 95       	ror	r24
    3db2:	98 2f       	mov	r25, r24
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	66 e0       	ldi	r22, 0x06	; 6
    3db8:	49 2f       	mov	r20, r25
    3dba:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	a0 e8       	ldi	r26, 0x80	; 128
    3dc4:	bf e3       	ldi	r27, 0x3F	; 63
    3dc6:	89 8f       	std	Y+25, r24	; 0x19
    3dc8:	9a 8f       	std	Y+26, r25	; 0x1a
    3dca:	ab 8f       	std	Y+27, r26	; 0x1b
    3dcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dce:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	4a e7       	ldi	r20, 0x7A	; 122
    3ddc:	55 e4       	ldi	r21, 0x45	; 69
    3dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	8d 8b       	std	Y+21, r24	; 0x15
    3de8:	9e 8b       	std	Y+22, r25	; 0x16
    3dea:	af 8b       	std	Y+23, r26	; 0x17
    3dec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dee:	6d 89       	ldd	r22, Y+21	; 0x15
    3df0:	7e 89       	ldd	r23, Y+22	; 0x16
    3df2:	8f 89       	ldd	r24, Y+23	; 0x17
    3df4:	98 8d       	ldd	r25, Y+24	; 0x18
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e8       	ldi	r20, 0x80	; 128
    3dfc:	5f e3       	ldi	r21, 0x3F	; 63
    3dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e02:	88 23       	and	r24, r24
    3e04:	2c f4       	brge	.+10     	; 0x3e10 <LCD_sendCommand+0x75e>
		__ticks = 1;
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	9c 8b       	std	Y+20, r25	; 0x14
    3e0c:	8b 8b       	std	Y+19, r24	; 0x13
    3e0e:	3f c0       	rjmp	.+126    	; 0x3e8e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3e10:	6d 89       	ldd	r22, Y+21	; 0x15
    3e12:	7e 89       	ldd	r23, Y+22	; 0x16
    3e14:	8f 89       	ldd	r24, Y+23	; 0x17
    3e16:	98 8d       	ldd	r25, Y+24	; 0x18
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	3f ef       	ldi	r19, 0xFF	; 255
    3e1c:	4f e7       	ldi	r20, 0x7F	; 127
    3e1e:	57 e4       	ldi	r21, 0x47	; 71
    3e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e24:	18 16       	cp	r1, r24
    3e26:	4c f5       	brge	.+82     	; 0x3e7a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e28:	69 8d       	ldd	r22, Y+25	; 0x19
    3e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e2       	ldi	r20, 0x20	; 32
    3e36:	51 e4       	ldi	r21, 0x41	; 65
    3e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	9c 8b       	std	Y+20, r25	; 0x14
    3e4e:	8b 8b       	std	Y+19, r24	; 0x13
    3e50:	0f c0       	rjmp	.+30     	; 0x3e70 <LCD_sendCommand+0x7be>
    3e52:	80 e9       	ldi	r24, 0x90	; 144
    3e54:	91 e0       	ldi	r25, 0x01	; 1
    3e56:	9a 8b       	std	Y+18, r25	; 0x12
    3e58:	89 8b       	std	Y+17, r24	; 0x11
    3e5a:	89 89       	ldd	r24, Y+17	; 0x11
    3e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <LCD_sendCommand+0x7ac>
    3e62:	9a 8b       	std	Y+18, r25	; 0x12
    3e64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e66:	8b 89       	ldd	r24, Y+19	; 0x13
    3e68:	9c 89       	ldd	r25, Y+20	; 0x14
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	9c 8b       	std	Y+20, r25	; 0x14
    3e6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e70:	8b 89       	ldd	r24, Y+19	; 0x13
    3e72:	9c 89       	ldd	r25, Y+20	; 0x14
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	69 f7       	brne	.-38     	; 0x3e52 <LCD_sendCommand+0x7a0>
    3e78:	14 c0       	rjmp	.+40     	; 0x3ea2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3e80:	98 8d       	ldd	r25, Y+24	; 0x18
    3e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	9c 8b       	std	Y+20, r25	; 0x14
    3e8c:	8b 8b       	std	Y+19, r24	; 0x13
    3e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e90:	9c 89       	ldd	r25, Y+20	; 0x14
    3e92:	98 8b       	std	Y+16, r25	; 0x10
    3e94:	8f 87       	std	Y+15, r24	; 0x0f
    3e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e98:	98 89       	ldd	r25, Y+16	; 0x10
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <LCD_sendCommand+0x7e8>
    3e9e:	98 8b       	std	Y+16, r25	; 0x10
    3ea0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	62 e0       	ldi	r22, 0x02	; 2
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	a0 e8       	ldi	r26, 0x80	; 128
    3eb2:	bf e3       	ldi	r27, 0x3F	; 63
    3eb4:	8b 87       	std	Y+11, r24	; 0x0b
    3eb6:	9c 87       	std	Y+12, r25	; 0x0c
    3eb8:	ad 87       	std	Y+13, r26	; 0x0d
    3eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	4a e7       	ldi	r20, 0x7A	; 122
    3eca:	55 e4       	ldi	r21, 0x45	; 69
    3ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	8f 83       	std	Y+7, r24	; 0x07
    3ed6:	98 87       	std	Y+8, r25	; 0x08
    3ed8:	a9 87       	std	Y+9, r26	; 0x09
    3eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3edc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ede:	78 85       	ldd	r23, Y+8	; 0x08
    3ee0:	89 85       	ldd	r24, Y+9	; 0x09
    3ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e8       	ldi	r20, 0x80	; 128
    3eea:	5f e3       	ldi	r21, 0x3F	; 63
    3eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef0:	88 23       	and	r24, r24
    3ef2:	2c f4       	brge	.+10     	; 0x3efe <LCD_sendCommand+0x84c>
		__ticks = 1;
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	9e 83       	std	Y+6, r25	; 0x06
    3efa:	8d 83       	std	Y+5, r24	; 0x05
    3efc:	3f c0       	rjmp	.+126    	; 0x3f7c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3efe:	6f 81       	ldd	r22, Y+7	; 0x07
    3f00:	78 85       	ldd	r23, Y+8	; 0x08
    3f02:	89 85       	ldd	r24, Y+9	; 0x09
    3f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	3f ef       	ldi	r19, 0xFF	; 255
    3f0a:	4f e7       	ldi	r20, 0x7F	; 127
    3f0c:	57 e4       	ldi	r21, 0x47	; 71
    3f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f12:	18 16       	cp	r1, r24
    3f14:	4c f5       	brge	.+82     	; 0x3f68 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	40 e2       	ldi	r20, 0x20	; 32
    3f24:	51 e4       	ldi	r21, 0x41	; 65
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	bc 01       	movw	r22, r24
    3f30:	cd 01       	movw	r24, r26
    3f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
    3f3e:	0f c0       	rjmp	.+30     	; 0x3f5e <LCD_sendCommand+0x8ac>
    3f40:	80 e9       	ldi	r24, 0x90	; 144
    3f42:	91 e0       	ldi	r25, 0x01	; 1
    3f44:	9c 83       	std	Y+4, r25	; 0x04
    3f46:	8b 83       	std	Y+3, r24	; 0x03
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <LCD_sendCommand+0x89a>
    3f50:	9c 83       	std	Y+4, r25	; 0x04
    3f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f54:	8d 81       	ldd	r24, Y+5	; 0x05
    3f56:	9e 81       	ldd	r25, Y+6	; 0x06
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	9e 83       	std	Y+6, r25	; 0x06
    3f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	9e 81       	ldd	r25, Y+6	; 0x06
    3f62:	00 97       	sbiw	r24, 0x00	; 0
    3f64:	69 f7       	brne	.-38     	; 0x3f40 <LCD_sendCommand+0x88e>
    3f66:	14 c0       	rjmp	.+40     	; 0x3f90 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f68:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6a:	78 85       	ldd	r23, Y+8	; 0x08
    3f6c:	89 85       	ldd	r24, Y+9	; 0x09
    3f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	9e 83       	std	Y+6, r25	; 0x06
    3f7a:	8d 83       	std	Y+5, r24	; 0x05
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	9a 83       	std	Y+2, r25	; 0x02
    3f82:	89 83       	std	Y+1, r24	; 0x01
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	9a 81       	ldd	r25, Y+2	; 0x02
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	f1 f7       	brne	.-4      	; 0x3f88 <LCD_sendCommand+0x8d6>
    3f8c:	9a 83       	std	Y+2, r25	; 0x02
    3f8e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3f90:	cd 59       	subi	r28, 0x9D	; 157
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	08 95       	ret

00003fa8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	c3 56       	subi	r28, 0x63	; 99
    3fb6:	d0 40       	sbci	r29, 0x00	; 0
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ed 59       	subi	r30, 0x9D	; 157
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	61 e0       	ldi	r22, 0x01	; 1
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e1 5a       	subi	r30, 0xA1	; 161
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	a0 e8       	ldi	r26, 0x80	; 128
    3fe0:	bf e3       	ldi	r27, 0x3F	; 63
    3fe2:	80 83       	st	Z, r24
    3fe4:	91 83       	std	Z+1, r25	; 0x01
    3fe6:	a2 83       	std	Z+2, r26	; 0x02
    3fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fea:	8e 01       	movw	r16, r28
    3fec:	05 5a       	subi	r16, 0xA5	; 165
    3fee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e1 5a       	subi	r30, 0xA1	; 161
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4a e7       	ldi	r20, 0x7A	; 122
    4004:	55 e4       	ldi	r21, 0x45	; 69
    4006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	f8 01       	movw	r30, r16
    4010:	80 83       	st	Z, r24
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	a2 83       	std	Z+2, r26	; 0x02
    4016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4018:	fe 01       	movw	r30, r28
    401a:	e5 5a       	subi	r30, 0xA5	; 165
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	60 81       	ld	r22, Z
    4020:	71 81       	ldd	r23, Z+1	; 0x01
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	93 81       	ldd	r25, Z+3	; 0x03
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e8       	ldi	r20, 0x80	; 128
    402c:	5f e3       	ldi	r21, 0x3F	; 63
    402e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4032:	88 23       	and	r24, r24
    4034:	44 f4       	brge	.+16     	; 0x4046 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    4036:	fe 01       	movw	r30, r28
    4038:	e7 5a       	subi	r30, 0xA7	; 167
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	64 c0       	rjmp	.+200    	; 0x410e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    4046:	fe 01       	movw	r30, r28
    4048:	e5 5a       	subi	r30, 0xA5	; 165
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	60 81       	ld	r22, Z
    404e:	71 81       	ldd	r23, Z+1	; 0x01
    4050:	82 81       	ldd	r24, Z+2	; 0x02
    4052:	93 81       	ldd	r25, Z+3	; 0x03
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	3f ef       	ldi	r19, 0xFF	; 255
    4058:	4f e7       	ldi	r20, 0x7F	; 127
    405a:	57 e4       	ldi	r21, 0x47	; 71
    405c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4060:	18 16       	cp	r1, r24
    4062:	0c f0       	brlt	.+2      	; 0x4066 <LCD_displayCharacter+0xbe>
    4064:	43 c0       	rjmp	.+134    	; 0x40ec <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	fe 01       	movw	r30, r28
    4068:	e1 5a       	subi	r30, 0xA1	; 161
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	60 81       	ld	r22, Z
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	51 e4       	ldi	r21, 0x41	; 65
    407c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	8e 01       	movw	r16, r28
    4086:	07 5a       	subi	r16, 0xA7	; 167
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	bc 01       	movw	r22, r24
    408c:	cd 01       	movw	r24, r26
    408e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	f8 01       	movw	r30, r16
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	1f c0       	rjmp	.+62     	; 0x40dc <LCD_displayCharacter+0x134>
    409e:	fe 01       	movw	r30, r28
    40a0:	e9 5a       	subi	r30, 0xA9	; 169
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	80 e9       	ldi	r24, 0x90	; 144
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	91 83       	std	Z+1, r25	; 0x01
    40aa:	80 83       	st	Z, r24
    40ac:	fe 01       	movw	r30, r28
    40ae:	e9 5a       	subi	r30, 0xA9	; 169
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	f1 f7       	brne	.-4      	; 0x40b6 <LCD_displayCharacter+0x10e>
    40ba:	fe 01       	movw	r30, r28
    40bc:	e9 5a       	subi	r30, 0xA9	; 169
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c4:	de 01       	movw	r26, r28
    40c6:	a7 5a       	subi	r26, 0xA7	; 167
    40c8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ca:	fe 01       	movw	r30, r28
    40cc:	e7 5a       	subi	r30, 0xA7	; 167
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	11 96       	adiw	r26, 0x01	; 1
    40d8:	9c 93       	st	X, r25
    40da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40dc:	fe 01       	movw	r30, r28
    40de:	e7 5a       	subi	r30, 0xA7	; 167
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	d1 f6       	brne	.-76     	; 0x409e <LCD_displayCharacter+0xf6>
    40ea:	27 c0       	rjmp	.+78     	; 0x413a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ec:	8e 01       	movw	r16, r28
    40ee:	07 5a       	subi	r16, 0xA7	; 167
    40f0:	1f 4f       	sbci	r17, 0xFF	; 255
    40f2:	fe 01       	movw	r30, r28
    40f4:	e5 5a       	subi	r30, 0xA5	; 165
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	60 81       	ld	r22, Z
    40fa:	71 81       	ldd	r23, Z+1	; 0x01
    40fc:	82 81       	ldd	r24, Z+2	; 0x02
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	f8 01       	movw	r30, r16
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
    410e:	de 01       	movw	r26, r28
    4110:	ab 5a       	subi	r26, 0xAB	; 171
    4112:	bf 4f       	sbci	r27, 0xFF	; 255
    4114:	fe 01       	movw	r30, r28
    4116:	e7 5a       	subi	r30, 0xA7	; 167
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	80 81       	ld	r24, Z
    411c:	91 81       	ldd	r25, Z+1	; 0x01
    411e:	8d 93       	st	X+, r24
    4120:	9c 93       	st	X, r25
    4122:	fe 01       	movw	r30, r28
    4124:	eb 5a       	subi	r30, 0xAB	; 171
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <LCD_displayCharacter+0x184>
    4130:	fe 01       	movw	r30, r28
    4132:	eb 5a       	subi	r30, 0xAB	; 171
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	62 e0       	ldi	r22, 0x02	; 2
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    4144:	fe 01       	movw	r30, r28
    4146:	ef 5a       	subi	r30, 0xAF	; 175
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	a0 e8       	ldi	r26, 0x80	; 128
    4150:	bf e3       	ldi	r27, 0x3F	; 63
    4152:	80 83       	st	Z, r24
    4154:	91 83       	std	Z+1, r25	; 0x01
    4156:	a2 83       	std	Z+2, r26	; 0x02
    4158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	8e 01       	movw	r16, r28
    415c:	03 5b       	subi	r16, 0xB3	; 179
    415e:	1f 4f       	sbci	r17, 0xFF	; 255
    4160:	fe 01       	movw	r30, r28
    4162:	ef 5a       	subi	r30, 0xAF	; 175
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	60 81       	ld	r22, Z
    4168:	71 81       	ldd	r23, Z+1	; 0x01
    416a:	82 81       	ldd	r24, Z+2	; 0x02
    416c:	93 81       	ldd	r25, Z+3	; 0x03
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	4a e7       	ldi	r20, 0x7A	; 122
    4174:	55 e4       	ldi	r21, 0x45	; 69
    4176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	f8 01       	movw	r30, r16
    4180:	80 83       	st	Z, r24
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	a2 83       	std	Z+2, r26	; 0x02
    4186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4188:	fe 01       	movw	r30, r28
    418a:	e3 5b       	subi	r30, 0xB3	; 179
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	60 81       	ld	r22, Z
    4190:	71 81       	ldd	r23, Z+1	; 0x01
    4192:	82 81       	ldd	r24, Z+2	; 0x02
    4194:	93 81       	ldd	r25, Z+3	; 0x03
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e8       	ldi	r20, 0x80	; 128
    419c:	5f e3       	ldi	r21, 0x3F	; 63
    419e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41a2:	88 23       	and	r24, r24
    41a4:	44 f4       	brge	.+16     	; 0x41b6 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    41a6:	fe 01       	movw	r30, r28
    41a8:	e5 5b       	subi	r30, 0xB5	; 181
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	91 83       	std	Z+1, r25	; 0x01
    41b2:	80 83       	st	Z, r24
    41b4:	64 c0       	rjmp	.+200    	; 0x427e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    41b6:	fe 01       	movw	r30, r28
    41b8:	e3 5b       	subi	r30, 0xB3	; 179
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	60 81       	ld	r22, Z
    41be:	71 81       	ldd	r23, Z+1	; 0x01
    41c0:	82 81       	ldd	r24, Z+2	; 0x02
    41c2:	93 81       	ldd	r25, Z+3	; 0x03
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	3f ef       	ldi	r19, 0xFF	; 255
    41c8:	4f e7       	ldi	r20, 0x7F	; 127
    41ca:	57 e4       	ldi	r21, 0x47	; 71
    41cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d0:	18 16       	cp	r1, r24
    41d2:	0c f0       	brlt	.+2      	; 0x41d6 <LCD_displayCharacter+0x22e>
    41d4:	43 c0       	rjmp	.+134    	; 0x425c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d6:	fe 01       	movw	r30, r28
    41d8:	ef 5a       	subi	r30, 0xAF	; 175
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	60 81       	ld	r22, Z
    41de:	71 81       	ldd	r23, Z+1	; 0x01
    41e0:	82 81       	ldd	r24, Z+2	; 0x02
    41e2:	93 81       	ldd	r25, Z+3	; 0x03
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	40 e2       	ldi	r20, 0x20	; 32
    41ea:	51 e4       	ldi	r21, 0x41	; 65
    41ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	8e 01       	movw	r16, r28
    41f6:	05 5b       	subi	r16, 0xB5	; 181
    41f8:	1f 4f       	sbci	r17, 0xFF	; 255
    41fa:	bc 01       	movw	r22, r24
    41fc:	cd 01       	movw	r24, r26
    41fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	f8 01       	movw	r30, r16
    4208:	91 83       	std	Z+1, r25	; 0x01
    420a:	80 83       	st	Z, r24
    420c:	1f c0       	rjmp	.+62     	; 0x424c <LCD_displayCharacter+0x2a4>
    420e:	fe 01       	movw	r30, r28
    4210:	e7 5b       	subi	r30, 0xB7	; 183
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	80 e9       	ldi	r24, 0x90	; 144
    4216:	91 e0       	ldi	r25, 0x01	; 1
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	80 83       	st	Z, r24
    421c:	fe 01       	movw	r30, r28
    421e:	e7 5b       	subi	r30, 0xB7	; 183
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <LCD_displayCharacter+0x27e>
    422a:	fe 01       	movw	r30, r28
    422c:	e7 5b       	subi	r30, 0xB7	; 183
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	91 83       	std	Z+1, r25	; 0x01
    4232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4234:	de 01       	movw	r26, r28
    4236:	a5 5b       	subi	r26, 0xB5	; 181
    4238:	bf 4f       	sbci	r27, 0xFF	; 255
    423a:	fe 01       	movw	r30, r28
    423c:	e5 5b       	subi	r30, 0xB5	; 181
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	01 97       	sbiw	r24, 0x01	; 1
    4246:	11 96       	adiw	r26, 0x01	; 1
    4248:	9c 93       	st	X, r25
    424a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424c:	fe 01       	movw	r30, r28
    424e:	e5 5b       	subi	r30, 0xB5	; 181
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	80 81       	ld	r24, Z
    4254:	91 81       	ldd	r25, Z+1	; 0x01
    4256:	00 97       	sbiw	r24, 0x00	; 0
    4258:	d1 f6       	brne	.-76     	; 0x420e <LCD_displayCharacter+0x266>
    425a:	27 c0       	rjmp	.+78     	; 0x42aa <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425c:	8e 01       	movw	r16, r28
    425e:	05 5b       	subi	r16, 0xB5	; 181
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	fe 01       	movw	r30, r28
    4264:	e3 5b       	subi	r30, 0xB3	; 179
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	60 81       	ld	r22, Z
    426a:	71 81       	ldd	r23, Z+1	; 0x01
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	f8 01       	movw	r30, r16
    427a:	91 83       	std	Z+1, r25	; 0x01
    427c:	80 83       	st	Z, r24
    427e:	de 01       	movw	r26, r28
    4280:	a9 5b       	subi	r26, 0xB9	; 185
    4282:	bf 4f       	sbci	r27, 0xFF	; 255
    4284:	fe 01       	movw	r30, r28
    4286:	e5 5b       	subi	r30, 0xB5	; 181
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	80 81       	ld	r24, Z
    428c:	91 81       	ldd	r25, Z+1	; 0x01
    428e:	8d 93       	st	X+, r24
    4290:	9c 93       	st	X, r25
    4292:	fe 01       	movw	r30, r28
    4294:	e9 5b       	subi	r30, 0xB9	; 185
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	80 81       	ld	r24, Z
    429a:	91 81       	ldd	r25, Z+1	; 0x01
    429c:	01 97       	sbiw	r24, 0x01	; 1
    429e:	f1 f7       	brne	.-4      	; 0x429c <LCD_displayCharacter+0x2f4>
    42a0:	fe 01       	movw	r30, r28
    42a2:	e9 5b       	subi	r30, 0xB9	; 185
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    42aa:	fe 01       	movw	r30, r28
    42ac:	ed 59       	subi	r30, 0x9D	; 157
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	88 2f       	mov	r24, r24
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	80 71       	andi	r24, 0x10	; 16
    42b8:	90 70       	andi	r25, 0x00	; 0
    42ba:	95 95       	asr	r25
    42bc:	87 95       	ror	r24
    42be:	95 95       	asr	r25
    42c0:	87 95       	ror	r24
    42c2:	95 95       	asr	r25
    42c4:	87 95       	ror	r24
    42c6:	95 95       	asr	r25
    42c8:	87 95       	ror	r24
    42ca:	98 2f       	mov	r25, r24
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	63 e0       	ldi	r22, 0x03	; 3
    42d0:	49 2f       	mov	r20, r25
    42d2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    42d6:	fe 01       	movw	r30, r28
    42d8:	ed 59       	subi	r30, 0x9D	; 157
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	80 81       	ld	r24, Z
    42de:	88 2f       	mov	r24, r24
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	80 72       	andi	r24, 0x20	; 32
    42e4:	90 70       	andi	r25, 0x00	; 0
    42e6:	95 95       	asr	r25
    42e8:	87 95       	ror	r24
    42ea:	95 95       	asr	r25
    42ec:	87 95       	ror	r24
    42ee:	95 95       	asr	r25
    42f0:	87 95       	ror	r24
    42f2:	95 95       	asr	r25
    42f4:	87 95       	ror	r24
    42f6:	95 95       	asr	r25
    42f8:	87 95       	ror	r24
    42fa:	98 2f       	mov	r25, r24
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	64 e0       	ldi	r22, 0x04	; 4
    4300:	49 2f       	mov	r20, r25
    4302:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    4306:	fe 01       	movw	r30, r28
    4308:	ed 59       	subi	r30, 0x9D	; 157
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 81       	ld	r24, Z
    430e:	88 2f       	mov	r24, r24
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	80 74       	andi	r24, 0x40	; 64
    4314:	90 70       	andi	r25, 0x00	; 0
    4316:	08 2e       	mov	r0, r24
    4318:	89 2f       	mov	r24, r25
    431a:	00 0c       	add	r0, r0
    431c:	88 1f       	adc	r24, r24
    431e:	99 0b       	sbc	r25, r25
    4320:	00 0c       	add	r0, r0
    4322:	88 1f       	adc	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	98 2f       	mov	r25, r24
    4328:	80 e0       	ldi	r24, 0x00	; 0
    432a:	65 e0       	ldi	r22, 0x05	; 5
    432c:	49 2f       	mov	r20, r25
    432e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    4332:	fe 01       	movw	r30, r28
    4334:	ed 59       	subi	r30, 0x9D	; 157
    4336:	ff 4f       	sbci	r31, 0xFF	; 255
    4338:	80 81       	ld	r24, Z
    433a:	98 2f       	mov	r25, r24
    433c:	99 1f       	adc	r25, r25
    433e:	99 27       	eor	r25, r25
    4340:	99 1f       	adc	r25, r25
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	66 e0       	ldi	r22, 0x06	; 6
    4346:	49 2f       	mov	r20, r25
    4348:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    434c:	fe 01       	movw	r30, r28
    434e:	ed 5b       	subi	r30, 0xBD	; 189
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	a0 e8       	ldi	r26, 0x80	; 128
    4358:	bf e3       	ldi	r27, 0x3F	; 63
    435a:	80 83       	st	Z, r24
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	a2 83       	std	Z+2, r26	; 0x02
    4360:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4362:	8e 01       	movw	r16, r28
    4364:	01 5c       	subi	r16, 0xC1	; 193
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	fe 01       	movw	r30, r28
    436a:	ed 5b       	subi	r30, 0xBD	; 189
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	60 81       	ld	r22, Z
    4370:	71 81       	ldd	r23, Z+1	; 0x01
    4372:	82 81       	ldd	r24, Z+2	; 0x02
    4374:	93 81       	ldd	r25, Z+3	; 0x03
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	4a e7       	ldi	r20, 0x7A	; 122
    437c:	55 e4       	ldi	r21, 0x45	; 69
    437e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	f8 01       	movw	r30, r16
    4388:	80 83       	st	Z, r24
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	a2 83       	std	Z+2, r26	; 0x02
    438e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4390:	fe 01       	movw	r30, r28
    4392:	ff 96       	adiw	r30, 0x3f	; 63
    4394:	60 81       	ld	r22, Z
    4396:	71 81       	ldd	r23, Z+1	; 0x01
    4398:	82 81       	ldd	r24, Z+2	; 0x02
    439a:	93 81       	ldd	r25, Z+3	; 0x03
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e8       	ldi	r20, 0x80	; 128
    43a2:	5f e3       	ldi	r21, 0x3F	; 63
    43a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a8:	88 23       	and	r24, r24
    43aa:	2c f4       	brge	.+10     	; 0x43b6 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	9e af       	std	Y+62, r25	; 0x3e
    43b2:	8d af       	std	Y+61, r24	; 0x3d
    43b4:	46 c0       	rjmp	.+140    	; 0x4442 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    43b6:	fe 01       	movw	r30, r28
    43b8:	ff 96       	adiw	r30, 0x3f	; 63
    43ba:	60 81       	ld	r22, Z
    43bc:	71 81       	ldd	r23, Z+1	; 0x01
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	93 81       	ldd	r25, Z+3	; 0x03
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	3f ef       	ldi	r19, 0xFF	; 255
    43c6:	4f e7       	ldi	r20, 0x7F	; 127
    43c8:	57 e4       	ldi	r21, 0x47	; 71
    43ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43ce:	18 16       	cp	r1, r24
    43d0:	64 f5       	brge	.+88     	; 0x442a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d2:	fe 01       	movw	r30, r28
    43d4:	ed 5b       	subi	r30, 0xBD	; 189
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e2       	ldi	r20, 0x20	; 32
    43e6:	51 e4       	ldi	r21, 0x41	; 65
    43e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	bc 01       	movw	r22, r24
    43f2:	cd 01       	movw	r24, r26
    43f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	9e af       	std	Y+62, r25	; 0x3e
    43fe:	8d af       	std	Y+61, r24	; 0x3d
    4400:	0f c0       	rjmp	.+30     	; 0x4420 <LCD_displayCharacter+0x478>
    4402:	80 e9       	ldi	r24, 0x90	; 144
    4404:	91 e0       	ldi	r25, 0x01	; 1
    4406:	9c af       	std	Y+60, r25	; 0x3c
    4408:	8b af       	std	Y+59, r24	; 0x3b
    440a:	8b ad       	ldd	r24, Y+59	; 0x3b
    440c:	9c ad       	ldd	r25, Y+60	; 0x3c
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <LCD_displayCharacter+0x466>
    4412:	9c af       	std	Y+60, r25	; 0x3c
    4414:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4416:	8d ad       	ldd	r24, Y+61	; 0x3d
    4418:	9e ad       	ldd	r25, Y+62	; 0x3e
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	9e af       	std	Y+62, r25	; 0x3e
    441e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4420:	8d ad       	ldd	r24, Y+61	; 0x3d
    4422:	9e ad       	ldd	r25, Y+62	; 0x3e
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	69 f7       	brne	.-38     	; 0x4402 <LCD_displayCharacter+0x45a>
    4428:	16 c0       	rjmp	.+44     	; 0x4456 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    442a:	fe 01       	movw	r30, r28
    442c:	ff 96       	adiw	r30, 0x3f	; 63
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	9e af       	std	Y+62, r25	; 0x3e
    4440:	8d af       	std	Y+61, r24	; 0x3d
    4442:	8d ad       	ldd	r24, Y+61	; 0x3d
    4444:	9e ad       	ldd	r25, Y+62	; 0x3e
    4446:	9a af       	std	Y+58, r25	; 0x3a
    4448:	89 af       	std	Y+57, r24	; 0x39
    444a:	89 ad       	ldd	r24, Y+57	; 0x39
    444c:	9a ad       	ldd	r25, Y+58	; 0x3a
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	f1 f7       	brne	.-4      	; 0x444e <LCD_displayCharacter+0x4a6>
    4452:	9a af       	std	Y+58, r25	; 0x3a
    4454:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	62 e0       	ldi	r22, 0x02	; 2
    445a:	41 e0       	ldi	r20, 0x01	; 1
    445c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	a0 e8       	ldi	r26, 0x80	; 128
    4466:	bf e3       	ldi	r27, 0x3F	; 63
    4468:	8d ab       	std	Y+53, r24	; 0x35
    446a:	9e ab       	std	Y+54, r25	; 0x36
    446c:	af ab       	std	Y+55, r26	; 0x37
    446e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4470:	6d a9       	ldd	r22, Y+53	; 0x35
    4472:	7e a9       	ldd	r23, Y+54	; 0x36
    4474:	8f a9       	ldd	r24, Y+55	; 0x37
    4476:	98 ad       	ldd	r25, Y+56	; 0x38
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	4a e7       	ldi	r20, 0x7A	; 122
    447e:	55 e4       	ldi	r21, 0x45	; 69
    4480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	89 ab       	std	Y+49, r24	; 0x31
    448a:	9a ab       	std	Y+50, r25	; 0x32
    448c:	ab ab       	std	Y+51, r26	; 0x33
    448e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4490:	69 a9       	ldd	r22, Y+49	; 0x31
    4492:	7a a9       	ldd	r23, Y+50	; 0x32
    4494:	8b a9       	ldd	r24, Y+51	; 0x33
    4496:	9c a9       	ldd	r25, Y+52	; 0x34
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e8       	ldi	r20, 0x80	; 128
    449e:	5f e3       	ldi	r21, 0x3F	; 63
    44a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44a4:	88 23       	and	r24, r24
    44a6:	2c f4       	brge	.+10     	; 0x44b2 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	98 ab       	std	Y+48, r25	; 0x30
    44ae:	8f a7       	std	Y+47, r24	; 0x2f
    44b0:	3f c0       	rjmp	.+126    	; 0x4530 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    44b2:	69 a9       	ldd	r22, Y+49	; 0x31
    44b4:	7a a9       	ldd	r23, Y+50	; 0x32
    44b6:	8b a9       	ldd	r24, Y+51	; 0x33
    44b8:	9c a9       	ldd	r25, Y+52	; 0x34
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	3f ef       	ldi	r19, 0xFF	; 255
    44be:	4f e7       	ldi	r20, 0x7F	; 127
    44c0:	57 e4       	ldi	r21, 0x47	; 71
    44c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44c6:	18 16       	cp	r1, r24
    44c8:	4c f5       	brge	.+82     	; 0x451c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ca:	6d a9       	ldd	r22, Y+53	; 0x35
    44cc:	7e a9       	ldd	r23, Y+54	; 0x36
    44ce:	8f a9       	ldd	r24, Y+55	; 0x37
    44d0:	98 ad       	ldd	r25, Y+56	; 0x38
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e2       	ldi	r20, 0x20	; 32
    44d8:	51 e4       	ldi	r21, 0x41	; 65
    44da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	98 ab       	std	Y+48, r25	; 0x30
    44f0:	8f a7       	std	Y+47, r24	; 0x2f
    44f2:	0f c0       	rjmp	.+30     	; 0x4512 <LCD_displayCharacter+0x56a>
    44f4:	80 e9       	ldi	r24, 0x90	; 144
    44f6:	91 e0       	ldi	r25, 0x01	; 1
    44f8:	9e a7       	std	Y+46, r25	; 0x2e
    44fa:	8d a7       	std	Y+45, r24	; 0x2d
    44fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    44fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	f1 f7       	brne	.-4      	; 0x4500 <LCD_displayCharacter+0x558>
    4504:	9e a7       	std	Y+46, r25	; 0x2e
    4506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4508:	8f a5       	ldd	r24, Y+47	; 0x2f
    450a:	98 a9       	ldd	r25, Y+48	; 0x30
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	98 ab       	std	Y+48, r25	; 0x30
    4510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4512:	8f a5       	ldd	r24, Y+47	; 0x2f
    4514:	98 a9       	ldd	r25, Y+48	; 0x30
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	69 f7       	brne	.-38     	; 0x44f4 <LCD_displayCharacter+0x54c>
    451a:	14 c0       	rjmp	.+40     	; 0x4544 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	69 a9       	ldd	r22, Y+49	; 0x31
    451e:	7a a9       	ldd	r23, Y+50	; 0x32
    4520:	8b a9       	ldd	r24, Y+51	; 0x33
    4522:	9c a9       	ldd	r25, Y+52	; 0x34
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	98 ab       	std	Y+48, r25	; 0x30
    452e:	8f a7       	std	Y+47, r24	; 0x2f
    4530:	8f a5       	ldd	r24, Y+47	; 0x2f
    4532:	98 a9       	ldd	r25, Y+48	; 0x30
    4534:	9c a7       	std	Y+44, r25	; 0x2c
    4536:	8b a7       	std	Y+43, r24	; 0x2b
    4538:	8b a5       	ldd	r24, Y+43	; 0x2b
    453a:	9c a5       	ldd	r25, Y+44	; 0x2c
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <LCD_displayCharacter+0x594>
    4540:	9c a7       	std	Y+44, r25	; 0x2c
    4542:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	62 e0       	ldi	r22, 0x02	; 2
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	a0 e8       	ldi	r26, 0x80	; 128
    4554:	bf e3       	ldi	r27, 0x3F	; 63
    4556:	8f a3       	std	Y+39, r24	; 0x27
    4558:	98 a7       	std	Y+40, r25	; 0x28
    455a:	a9 a7       	std	Y+41, r26	; 0x29
    455c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455e:	6f a1       	ldd	r22, Y+39	; 0x27
    4560:	78 a5       	ldd	r23, Y+40	; 0x28
    4562:	89 a5       	ldd	r24, Y+41	; 0x29
    4564:	9a a5       	ldd	r25, Y+42	; 0x2a
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	4a e7       	ldi	r20, 0x7A	; 122
    456c:	55 e4       	ldi	r21, 0x45	; 69
    456e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	8b a3       	std	Y+35, r24	; 0x23
    4578:	9c a3       	std	Y+36, r25	; 0x24
    457a:	ad a3       	std	Y+37, r26	; 0x25
    457c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    457e:	6b a1       	ldd	r22, Y+35	; 0x23
    4580:	7c a1       	ldd	r23, Y+36	; 0x24
    4582:	8d a1       	ldd	r24, Y+37	; 0x25
    4584:	9e a1       	ldd	r25, Y+38	; 0x26
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e8       	ldi	r20, 0x80	; 128
    458c:	5f e3       	ldi	r21, 0x3F	; 63
    458e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4592:	88 23       	and	r24, r24
    4594:	2c f4       	brge	.+10     	; 0x45a0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9a a3       	std	Y+34, r25	; 0x22
    459c:	89 a3       	std	Y+33, r24	; 0x21
    459e:	3f c0       	rjmp	.+126    	; 0x461e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    45a0:	6b a1       	ldd	r22, Y+35	; 0x23
    45a2:	7c a1       	ldd	r23, Y+36	; 0x24
    45a4:	8d a1       	ldd	r24, Y+37	; 0x25
    45a6:	9e a1       	ldd	r25, Y+38	; 0x26
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	3f ef       	ldi	r19, 0xFF	; 255
    45ac:	4f e7       	ldi	r20, 0x7F	; 127
    45ae:	57 e4       	ldi	r21, 0x47	; 71
    45b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b4:	18 16       	cp	r1, r24
    45b6:	4c f5       	brge	.+82     	; 0x460a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b8:	6f a1       	ldd	r22, Y+39	; 0x27
    45ba:	78 a5       	ldd	r23, Y+40	; 0x28
    45bc:	89 a5       	ldd	r24, Y+41	; 0x29
    45be:	9a a5       	ldd	r25, Y+42	; 0x2a
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	40 e2       	ldi	r20, 0x20	; 32
    45c6:	51 e4       	ldi	r21, 0x41	; 65
    45c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	bc 01       	movw	r22, r24
    45d2:	cd 01       	movw	r24, r26
    45d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	9a a3       	std	Y+34, r25	; 0x22
    45de:	89 a3       	std	Y+33, r24	; 0x21
    45e0:	0f c0       	rjmp	.+30     	; 0x4600 <LCD_displayCharacter+0x658>
    45e2:	80 e9       	ldi	r24, 0x90	; 144
    45e4:	91 e0       	ldi	r25, 0x01	; 1
    45e6:	98 a3       	std	Y+32, r25	; 0x20
    45e8:	8f 8f       	std	Y+31, r24	; 0x1f
    45ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45ec:	98 a1       	ldd	r25, Y+32	; 0x20
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <LCD_displayCharacter+0x646>
    45f2:	98 a3       	std	Y+32, r25	; 0x20
    45f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f6:	89 a1       	ldd	r24, Y+33	; 0x21
    45f8:	9a a1       	ldd	r25, Y+34	; 0x22
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	9a a3       	std	Y+34, r25	; 0x22
    45fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4600:	89 a1       	ldd	r24, Y+33	; 0x21
    4602:	9a a1       	ldd	r25, Y+34	; 0x22
    4604:	00 97       	sbiw	r24, 0x00	; 0
    4606:	69 f7       	brne	.-38     	; 0x45e2 <LCD_displayCharacter+0x63a>
    4608:	14 c0       	rjmp	.+40     	; 0x4632 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460a:	6b a1       	ldd	r22, Y+35	; 0x23
    460c:	7c a1       	ldd	r23, Y+36	; 0x24
    460e:	8d a1       	ldd	r24, Y+37	; 0x25
    4610:	9e a1       	ldd	r25, Y+38	; 0x26
    4612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	9a a3       	std	Y+34, r25	; 0x22
    461c:	89 a3       	std	Y+33, r24	; 0x21
    461e:	89 a1       	ldd	r24, Y+33	; 0x21
    4620:	9a a1       	ldd	r25, Y+34	; 0x22
    4622:	9e 8f       	std	Y+30, r25	; 0x1e
    4624:	8d 8f       	std	Y+29, r24	; 0x1d
    4626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    462a:	01 97       	sbiw	r24, 0x01	; 1
    462c:	f1 f7       	brne	.-4      	; 0x462a <LCD_displayCharacter+0x682>
    462e:	9e 8f       	std	Y+30, r25	; 0x1e
    4630:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    4632:	fe 01       	movw	r30, r28
    4634:	ed 59       	subi	r30, 0x9D	; 157
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 81       	ld	r24, Z
    463a:	98 2f       	mov	r25, r24
    463c:	91 70       	andi	r25, 0x01	; 1
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	63 e0       	ldi	r22, 0x03	; 3
    4642:	49 2f       	mov	r20, r25
    4644:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    4648:	fe 01       	movw	r30, r28
    464a:	ed 59       	subi	r30, 0x9D	; 157
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	88 2f       	mov	r24, r24
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	82 70       	andi	r24, 0x02	; 2
    4656:	90 70       	andi	r25, 0x00	; 0
    4658:	95 95       	asr	r25
    465a:	87 95       	ror	r24
    465c:	98 2f       	mov	r25, r24
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	64 e0       	ldi	r22, 0x04	; 4
    4662:	49 2f       	mov	r20, r25
    4664:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    4668:	fe 01       	movw	r30, r28
    466a:	ed 59       	subi	r30, 0x9D	; 157
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	80 81       	ld	r24, Z
    4670:	88 2f       	mov	r24, r24
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	84 70       	andi	r24, 0x04	; 4
    4676:	90 70       	andi	r25, 0x00	; 0
    4678:	95 95       	asr	r25
    467a:	87 95       	ror	r24
    467c:	95 95       	asr	r25
    467e:	87 95       	ror	r24
    4680:	98 2f       	mov	r25, r24
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	65 e0       	ldi	r22, 0x05	; 5
    4686:	49 2f       	mov	r20, r25
    4688:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    468c:	fe 01       	movw	r30, r28
    468e:	ed 59       	subi	r30, 0x9D	; 157
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	80 81       	ld	r24, Z
    4694:	88 2f       	mov	r24, r24
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	88 70       	andi	r24, 0x08	; 8
    469a:	90 70       	andi	r25, 0x00	; 0
    469c:	95 95       	asr	r25
    469e:	87 95       	ror	r24
    46a0:	95 95       	asr	r25
    46a2:	87 95       	ror	r24
    46a4:	95 95       	asr	r25
    46a6:	87 95       	ror	r24
    46a8:	98 2f       	mov	r25, r24
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	66 e0       	ldi	r22, 0x06	; 6
    46ae:	49 2f       	mov	r20, r25
    46b0:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	a0 e8       	ldi	r26, 0x80	; 128
    46ba:	bf e3       	ldi	r27, 0x3F	; 63
    46bc:	89 8f       	std	Y+25, r24	; 0x19
    46be:	9a 8f       	std	Y+26, r25	; 0x1a
    46c0:	ab 8f       	std	Y+27, r26	; 0x1b
    46c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c4:	69 8d       	ldd	r22, Y+25	; 0x19
    46c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	4a e7       	ldi	r20, 0x7A	; 122
    46d2:	55 e4       	ldi	r21, 0x45	; 69
    46d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	8d 8b       	std	Y+21, r24	; 0x15
    46de:	9e 8b       	std	Y+22, r25	; 0x16
    46e0:	af 8b       	std	Y+23, r26	; 0x17
    46e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46e4:	6d 89       	ldd	r22, Y+21	; 0x15
    46e6:	7e 89       	ldd	r23, Y+22	; 0x16
    46e8:	8f 89       	ldd	r24, Y+23	; 0x17
    46ea:	98 8d       	ldd	r25, Y+24	; 0x18
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	40 e8       	ldi	r20, 0x80	; 128
    46f2:	5f e3       	ldi	r21, 0x3F	; 63
    46f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46f8:	88 23       	and	r24, r24
    46fa:	2c f4       	brge	.+10     	; 0x4706 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    46fc:	81 e0       	ldi	r24, 0x01	; 1
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	9c 8b       	std	Y+20, r25	; 0x14
    4702:	8b 8b       	std	Y+19, r24	; 0x13
    4704:	3f c0       	rjmp	.+126    	; 0x4784 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4706:	6d 89       	ldd	r22, Y+21	; 0x15
    4708:	7e 89       	ldd	r23, Y+22	; 0x16
    470a:	8f 89       	ldd	r24, Y+23	; 0x17
    470c:	98 8d       	ldd	r25, Y+24	; 0x18
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	3f ef       	ldi	r19, 0xFF	; 255
    4712:	4f e7       	ldi	r20, 0x7F	; 127
    4714:	57 e4       	ldi	r21, 0x47	; 71
    4716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    471a:	18 16       	cp	r1, r24
    471c:	4c f5       	brge	.+82     	; 0x4770 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    471e:	69 8d       	ldd	r22, Y+25	; 0x19
    4720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e2       	ldi	r20, 0x20	; 32
    472c:	51 e4       	ldi	r21, 0x41	; 65
    472e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	bc 01       	movw	r22, r24
    4738:	cd 01       	movw	r24, r26
    473a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473e:	dc 01       	movw	r26, r24
    4740:	cb 01       	movw	r24, r22
    4742:	9c 8b       	std	Y+20, r25	; 0x14
    4744:	8b 8b       	std	Y+19, r24	; 0x13
    4746:	0f c0       	rjmp	.+30     	; 0x4766 <LCD_displayCharacter+0x7be>
    4748:	80 e9       	ldi	r24, 0x90	; 144
    474a:	91 e0       	ldi	r25, 0x01	; 1
    474c:	9a 8b       	std	Y+18, r25	; 0x12
    474e:	89 8b       	std	Y+17, r24	; 0x11
    4750:	89 89       	ldd	r24, Y+17	; 0x11
    4752:	9a 89       	ldd	r25, Y+18	; 0x12
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	f1 f7       	brne	.-4      	; 0x4754 <LCD_displayCharacter+0x7ac>
    4758:	9a 8b       	std	Y+18, r25	; 0x12
    475a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475c:	8b 89       	ldd	r24, Y+19	; 0x13
    475e:	9c 89       	ldd	r25, Y+20	; 0x14
    4760:	01 97       	sbiw	r24, 0x01	; 1
    4762:	9c 8b       	std	Y+20, r25	; 0x14
    4764:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4766:	8b 89       	ldd	r24, Y+19	; 0x13
    4768:	9c 89       	ldd	r25, Y+20	; 0x14
    476a:	00 97       	sbiw	r24, 0x00	; 0
    476c:	69 f7       	brne	.-38     	; 0x4748 <LCD_displayCharacter+0x7a0>
    476e:	14 c0       	rjmp	.+40     	; 0x4798 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4770:	6d 89       	ldd	r22, Y+21	; 0x15
    4772:	7e 89       	ldd	r23, Y+22	; 0x16
    4774:	8f 89       	ldd	r24, Y+23	; 0x17
    4776:	98 8d       	ldd	r25, Y+24	; 0x18
    4778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	9c 8b       	std	Y+20, r25	; 0x14
    4782:	8b 8b       	std	Y+19, r24	; 0x13
    4784:	8b 89       	ldd	r24, Y+19	; 0x13
    4786:	9c 89       	ldd	r25, Y+20	; 0x14
    4788:	98 8b       	std	Y+16, r25	; 0x10
    478a:	8f 87       	std	Y+15, r24	; 0x0f
    478c:	8f 85       	ldd	r24, Y+15	; 0x0f
    478e:	98 89       	ldd	r25, Y+16	; 0x10
    4790:	01 97       	sbiw	r24, 0x01	; 1
    4792:	f1 f7       	brne	.-4      	; 0x4790 <LCD_displayCharacter+0x7e8>
    4794:	98 8b       	std	Y+16, r25	; 0x10
    4796:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	62 e0       	ldi	r22, 0x02	; 2
    479c:	41 e0       	ldi	r20, 0x01	; 1
    479e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <GPIO_writePin>
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	a0 e8       	ldi	r26, 0x80	; 128
    47a8:	bf e3       	ldi	r27, 0x3F	; 63
    47aa:	8b 87       	std	Y+11, r24	; 0x0b
    47ac:	9c 87       	std	Y+12, r25	; 0x0c
    47ae:	ad 87       	std	Y+13, r26	; 0x0d
    47b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	4a e7       	ldi	r20, 0x7A	; 122
    47c0:	55 e4       	ldi	r21, 0x45	; 69
    47c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	8f 83       	std	Y+7, r24	; 0x07
    47cc:	98 87       	std	Y+8, r25	; 0x08
    47ce:	a9 87       	std	Y+9, r26	; 0x09
    47d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47d2:	6f 81       	ldd	r22, Y+7	; 0x07
    47d4:	78 85       	ldd	r23, Y+8	; 0x08
    47d6:	89 85       	ldd	r24, Y+9	; 0x09
    47d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	40 e8       	ldi	r20, 0x80	; 128
    47e0:	5f e3       	ldi	r21, 0x3F	; 63
    47e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47e6:	88 23       	and	r24, r24
    47e8:	2c f4       	brge	.+10     	; 0x47f4 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	9e 83       	std	Y+6, r25	; 0x06
    47f0:	8d 83       	std	Y+5, r24	; 0x05
    47f2:	3f c0       	rjmp	.+126    	; 0x4872 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    47f4:	6f 81       	ldd	r22, Y+7	; 0x07
    47f6:	78 85       	ldd	r23, Y+8	; 0x08
    47f8:	89 85       	ldd	r24, Y+9	; 0x09
    47fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	3f ef       	ldi	r19, 0xFF	; 255
    4800:	4f e7       	ldi	r20, 0x7F	; 127
    4802:	57 e4       	ldi	r21, 0x47	; 71
    4804:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4808:	18 16       	cp	r1, r24
    480a:	4c f5       	brge	.+82     	; 0x485e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480c:	6b 85       	ldd	r22, Y+11	; 0x0b
    480e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4810:	8d 85       	ldd	r24, Y+13	; 0x0d
    4812:	9e 85       	ldd	r25, Y+14	; 0x0e
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	40 e2       	ldi	r20, 0x20	; 32
    481a:	51 e4       	ldi	r21, 0x41	; 65
    481c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	9e 83       	std	Y+6, r25	; 0x06
    4832:	8d 83       	std	Y+5, r24	; 0x05
    4834:	0f c0       	rjmp	.+30     	; 0x4854 <LCD_displayCharacter+0x8ac>
    4836:	80 e9       	ldi	r24, 0x90	; 144
    4838:	91 e0       	ldi	r25, 0x01	; 1
    483a:	9c 83       	std	Y+4, r25	; 0x04
    483c:	8b 83       	std	Y+3, r24	; 0x03
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	9c 81       	ldd	r25, Y+4	; 0x04
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	f1 f7       	brne	.-4      	; 0x4842 <LCD_displayCharacter+0x89a>
    4846:	9c 83       	std	Y+4, r25	; 0x04
    4848:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484a:	8d 81       	ldd	r24, Y+5	; 0x05
    484c:	9e 81       	ldd	r25, Y+6	; 0x06
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	9e 83       	std	Y+6, r25	; 0x06
    4852:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4854:	8d 81       	ldd	r24, Y+5	; 0x05
    4856:	9e 81       	ldd	r25, Y+6	; 0x06
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	69 f7       	brne	.-38     	; 0x4836 <LCD_displayCharacter+0x88e>
    485c:	14 c0       	rjmp	.+40     	; 0x4886 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    485e:	6f 81       	ldd	r22, Y+7	; 0x07
    4860:	78 85       	ldd	r23, Y+8	; 0x08
    4862:	89 85       	ldd	r24, Y+9	; 0x09
    4864:	9a 85       	ldd	r25, Y+10	; 0x0a
    4866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	9e 83       	std	Y+6, r25	; 0x06
    4870:	8d 83       	std	Y+5, r24	; 0x05
    4872:	8d 81       	ldd	r24, Y+5	; 0x05
    4874:	9e 81       	ldd	r25, Y+6	; 0x06
    4876:	9a 83       	std	Y+2, r25	; 0x02
    4878:	89 83       	std	Y+1, r24	; 0x01
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	9a 81       	ldd	r25, Y+2	; 0x02
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	f1 f7       	brne	.-4      	; 0x487e <LCD_displayCharacter+0x8d6>
    4882:	9a 83       	std	Y+2, r25	; 0x02
    4884:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4886:	cd 59       	subi	r28, 0x9D	; 157
    4888:	df 4f       	sbci	r29, 0xFF	; 255
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	cf 91       	pop	r28
    4896:	df 91       	pop	r29
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	08 95       	ret

0000489e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	00 d0       	rcall	.+0      	; 0x48a4 <LCD_displayString+0x6>
    48a4:	0f 92       	push	r0
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	9b 83       	std	Y+3, r25	; 0x03
    48ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    48ae:	19 82       	std	Y+1, r1	; 0x01
    48b0:	0e c0       	rjmp	.+28     	; 0x48ce <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	28 2f       	mov	r18, r24
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	9b 81       	ldd	r25, Y+3	; 0x03
    48bc:	fc 01       	movw	r30, r24
    48be:	e2 0f       	add	r30, r18
    48c0:	f3 1f       	adc	r31, r19
    48c2:	80 81       	ld	r24, Z
    48c4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <LCD_displayCharacter>
		i++;
    48c8:	89 81       	ldd	r24, Y+1	; 0x01
    48ca:	8f 5f       	subi	r24, 0xFF	; 255
    48cc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	28 2f       	mov	r18, r24
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	9b 81       	ldd	r25, Y+3	; 0x03
    48d8:	fc 01       	movw	r30, r24
    48da:	e2 0f       	add	r30, r18
    48dc:	f3 1f       	adc	r31, r19
    48de:	80 81       	ld	r24, Z
    48e0:	88 23       	and	r24, r24
    48e2:	39 f7       	brne	.-50     	; 0x48b2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	cf 91       	pop	r28
    48ec:	df 91       	pop	r29
    48ee:	08 95       	ret

000048f0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    48f0:	df 93       	push	r29
    48f2:	cf 93       	push	r28
    48f4:	00 d0       	rcall	.+0      	; 0x48f6 <LCD_moveCursor+0x6>
    48f6:	00 d0       	rcall	.+0      	; 0x48f8 <LCD_moveCursor+0x8>
    48f8:	0f 92       	push	r0
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
    48fe:	8a 83       	std	Y+2, r24	; 0x02
    4900:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4902:	8a 81       	ldd	r24, Y+2	; 0x02
    4904:	28 2f       	mov	r18, r24
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	3d 83       	std	Y+5, r19	; 0x05
    490a:	2c 83       	std	Y+4, r18	; 0x04
    490c:	8c 81       	ldd	r24, Y+4	; 0x04
    490e:	9d 81       	ldd	r25, Y+5	; 0x05
    4910:	81 30       	cpi	r24, 0x01	; 1
    4912:	91 05       	cpc	r25, r1
    4914:	c1 f0       	breq	.+48     	; 0x4946 <LCD_moveCursor+0x56>
    4916:	2c 81       	ldd	r18, Y+4	; 0x04
    4918:	3d 81       	ldd	r19, Y+5	; 0x05
    491a:	22 30       	cpi	r18, 0x02	; 2
    491c:	31 05       	cpc	r19, r1
    491e:	2c f4       	brge	.+10     	; 0x492a <LCD_moveCursor+0x3a>
    4920:	8c 81       	ldd	r24, Y+4	; 0x04
    4922:	9d 81       	ldd	r25, Y+5	; 0x05
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	61 f0       	breq	.+24     	; 0x4940 <LCD_moveCursor+0x50>
    4928:	19 c0       	rjmp	.+50     	; 0x495c <LCD_moveCursor+0x6c>
    492a:	2c 81       	ldd	r18, Y+4	; 0x04
    492c:	3d 81       	ldd	r19, Y+5	; 0x05
    492e:	22 30       	cpi	r18, 0x02	; 2
    4930:	31 05       	cpc	r19, r1
    4932:	69 f0       	breq	.+26     	; 0x494e <LCD_moveCursor+0x5e>
    4934:	8c 81       	ldd	r24, Y+4	; 0x04
    4936:	9d 81       	ldd	r25, Y+5	; 0x05
    4938:	83 30       	cpi	r24, 0x03	; 3
    493a:	91 05       	cpc	r25, r1
    493c:	61 f0       	breq	.+24     	; 0x4956 <LCD_moveCursor+0x66>
    493e:	0e c0       	rjmp	.+28     	; 0x495c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4940:	8b 81       	ldd	r24, Y+3	; 0x03
    4942:	89 83       	std	Y+1, r24	; 0x01
    4944:	0b c0       	rjmp	.+22     	; 0x495c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4946:	8b 81       	ldd	r24, Y+3	; 0x03
    4948:	80 5c       	subi	r24, 0xC0	; 192
    494a:	89 83       	std	Y+1, r24	; 0x01
    494c:	07 c0       	rjmp	.+14     	; 0x495c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	80 5f       	subi	r24, 0xF0	; 240
    4952:	89 83       	std	Y+1, r24	; 0x01
    4954:	03 c0       	rjmp	.+6      	; 0x495c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4956:	8b 81       	ldd	r24, Y+3	; 0x03
    4958:	80 5b       	subi	r24, 0xB0	; 176
    495a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	80 68       	ori	r24, 0x80	; 128
    4960:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
}
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	0f 90       	pop	r0
    496e:	cf 91       	pop	r28
    4970:	df 91       	pop	r29
    4972:	08 95       	ret

00004974 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    4974:	df 93       	push	r29
    4976:	cf 93       	push	r28
    4978:	00 d0       	rcall	.+0      	; 0x497a <LCD_displayStringRowColumn+0x6>
    497a:	00 d0       	rcall	.+0      	; 0x497c <LCD_displayStringRowColumn+0x8>
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	89 83       	std	Y+1, r24	; 0x01
    4982:	6a 83       	std	Y+2, r22	; 0x02
    4984:	5c 83       	std	Y+4, r21	; 0x04
    4986:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	6a 81       	ldd	r22, Y+2	; 0x02
    498c:	0e 94 78 24 	call	0x48f0	; 0x48f0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	9c 81       	ldd	r25, Y+4	; 0x04
    4994:	0e 94 4f 24 	call	0x489e	; 0x489e <LCD_displayString>
}
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	0f 90       	pop	r0
    49a0:	cf 91       	pop	r28
    49a2:	df 91       	pop	r29
    49a4:	08 95       	ret

000049a6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62
    49ae:	62 97       	sbiw	r28, 0x12	; 18
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	9a 8b       	std	Y+18, r25	; 0x12
    49bc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    49be:	89 89       	ldd	r24, Y+17	; 0x11
    49c0:	9a 89       	ldd	r25, Y+18	; 0x12
    49c2:	9e 01       	movw	r18, r28
    49c4:	2f 5f       	subi	r18, 0xFF	; 255
    49c6:	3f 4f       	sbci	r19, 0xFF	; 255
    49c8:	b9 01       	movw	r22, r18
    49ca:	4a e0       	ldi	r20, 0x0A	; 10
    49cc:	50 e0       	ldi	r21, 0x00	; 0
    49ce:	0e 94 4e 28 	call	0x509c	; 0x509c <itoa>
   LCD_displayString(buff); /* Display the string */
    49d2:	ce 01       	movw	r24, r28
    49d4:	01 96       	adiw	r24, 0x01	; 1
    49d6:	0e 94 4f 24 	call	0x489e	; 0x489e <LCD_displayString>
}
    49da:	62 96       	adiw	r28, 0x12	; 18
    49dc:	0f b6       	in	r0, 0x3f	; 63
    49de:	f8 94       	cli
    49e0:	de bf       	out	0x3e, r29	; 62
    49e2:	0f be       	out	0x3f, r0	; 63
    49e4:	cd bf       	out	0x3d, r28	; 61
    49e6:	cf 91       	pop	r28
    49e8:	df 91       	pop	r29
    49ea:	08 95       	ret

000049ec <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    49ec:	df 93       	push	r29
    49ee:	cf 93       	push	r28
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_sendCommand>
}
    49fa:	cf 91       	pop	r28
    49fc:	df 91       	pop	r29
    49fe:	08 95       	ret

00004a00 <setup_timer2_20ms>:

// تهيئة الكنترول (هيكل عالمي)
ControlSystem_t ctrl;

void setup_timer2_20ms()
{
    4a00:	df 93       	push	r29
    4a02:	cf 93       	push	r28
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
	TCCR2 |= (1 << WGM21); // CTC mode
    4a08:	a5 e4       	ldi	r26, 0x45	; 69
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	e5 e4       	ldi	r30, 0x45	; 69
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	80 81       	ld	r24, Z
    4a12:	88 60       	ori	r24, 0x08	; 8
    4a14:	8c 93       	st	X, r24
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler = 1024
    4a16:	a5 e4       	ldi	r26, 0x45	; 69
    4a18:	b0 e0       	ldi	r27, 0x00	; 0
    4a1a:	e5 e4       	ldi	r30, 0x45	; 69
    4a1c:	f0 e0       	ldi	r31, 0x00	; 0
    4a1e:	80 81       	ld	r24, Z
    4a20:	87 60       	ori	r24, 0x07	; 7
    4a22:	8c 93       	st	X, r24
	OCR2 = 39; // 20ms على 16MHz مع prescaler 1024
    4a24:	e3 e4       	ldi	r30, 0x43	; 67
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	87 e2       	ldi	r24, 0x27	; 39
    4a2a:	80 83       	st	Z, r24
	TIMSK |= (1 << OCIE2); // Enable compare interrupt
    4a2c:	a9 e5       	ldi	r26, 0x59	; 89
    4a2e:	b0 e0       	ldi	r27, 0x00	; 0
    4a30:	e9 e5       	ldi	r30, 0x59	; 89
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	80 68       	ori	r24, 0x80	; 128
    4a38:	8c 93       	st	X, r24
}
    4a3a:	cf 91       	pop	r28
    4a3c:	df 91       	pop	r29
    4a3e:	08 95       	ret

00004a40 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    4a40:	1f 92       	push	r1
    4a42:	0f 92       	push	r0
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	0f 92       	push	r0
    4a48:	11 24       	eor	r1, r1
    4a4a:	cf 92       	push	r12
    4a4c:	df 92       	push	r13
    4a4e:	ef 92       	push	r14
    4a50:	ff 92       	push	r15
    4a52:	0f 93       	push	r16
    4a54:	1f 93       	push	r17
    4a56:	2f 93       	push	r18
    4a58:	3f 93       	push	r19
    4a5a:	4f 93       	push	r20
    4a5c:	5f 93       	push	r21
    4a5e:	6f 93       	push	r22
    4a60:	7f 93       	push	r23
    4a62:	8f 93       	push	r24
    4a64:	9f 93       	push	r25
    4a66:	af 93       	push	r26
    4a68:	bf 93       	push	r27
    4a6a:	ef 93       	push	r30
    4a6c:	ff 93       	push	r31
    4a6e:	df 93       	push	r29
    4a70:	cf 93       	push	r28
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
    4a76:	2a 97       	sbiw	r28, 0x0a	; 10
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	cd bf       	out	0x3d, r28	; 61
	float left_pwm, right_pwm;
	Control_Update(&ctrl, set_velocity, set_angle, &left_pwm, &right_pwm);
    4a7c:	20 91 b2 01 	lds	r18, 0x01B2
    4a80:	30 91 b3 01 	lds	r19, 0x01B3
    4a84:	40 91 b4 01 	lds	r20, 0x01B4
    4a88:	50 91 b5 01 	lds	r21, 0x01B5
    4a8c:	e0 90 b6 01 	lds	r14, 0x01B6
    4a90:	f0 90 b7 01 	lds	r15, 0x01B7
    4a94:	00 91 b8 01 	lds	r16, 0x01B8
    4a98:	10 91 b9 01 	lds	r17, 0x01B9
    4a9c:	8a ec       	ldi	r24, 0xCA	; 202
    4a9e:	92 e0       	ldi	r25, 0x02	; 2
    4aa0:	de 01       	movw	r26, r28
    4aa2:	15 96       	adiw	r26, 0x05	; 5
    4aa4:	ba 01       	movw	r22, r20
    4aa6:	a9 01       	movw	r20, r18
    4aa8:	98 01       	movw	r18, r16
    4aaa:	87 01       	movw	r16, r14
    4aac:	fe 01       	movw	r30, r28
    4aae:	31 96       	adiw	r30, 0x01	; 1
    4ab0:	7f 01       	movw	r14, r30
    4ab2:	6d 01       	movw	r12, r26
    4ab4:	0e 94 a6 0a 	call	0x154c	; 0x154c <Control_Update>
	DC_LEFT(left_pwm >= 0 ? CW : A_CW, (uint8)fabs(left_pwm));   // اتجاه وسرعة
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	9a 81       	ldd	r25, Y+2	; 0x02
    4abc:	ab 81       	ldd	r26, Y+3	; 0x03
    4abe:	bc 81       	ldd	r27, Y+4	; 0x04
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    4ad0:	88 23       	and	r24, r24
    4ad2:	1c f0       	brlt	.+6      	; 0x4ada <__vector_4+0x9a>
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	8a 87       	std	Y+10, r24	; 0x0a
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <__vector_4+0x9e>
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	8a 87       	std	Y+10, r24	; 0x0a
    4ade:	89 81       	ldd	r24, Y+1	; 0x01
    4ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae2:	ab 81       	ldd	r26, Y+3	; 0x03
    4ae4:	bc 81       	ldd	r27, Y+4	; 0x04
    4ae6:	bf 77       	andi	r27, 0x7F	; 127
    4ae8:	bc 01       	movw	r22, r24
    4aea:	cd 01       	movw	r24, r26
    4aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	98 2f       	mov	r25, r24
    4af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4af8:	69 2f       	mov	r22, r25
    4afa:	0e 94 30 19 	call	0x3260	; 0x3260 <DC_LEFT>
	DC_RIGHT(right_pwm >= 0 ? CW : A_CW, (uint8)fabs(right_pwm));
    4afe:	8d 81       	ldd	r24, Y+5	; 0x05
    4b00:	9e 81       	ldd	r25, Y+6	; 0x06
    4b02:	af 81       	ldd	r26, Y+7	; 0x07
    4b04:	b8 85       	ldd	r27, Y+8	; 0x08
    4b06:	bc 01       	movw	r22, r24
    4b08:	cd 01       	movw	r24, r26
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	40 e0       	ldi	r20, 0x00	; 0
    4b10:	50 e0       	ldi	r21, 0x00	; 0
    4b12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    4b16:	88 23       	and	r24, r24
    4b18:	1c f0       	brlt	.+6      	; 0x4b20 <__vector_4+0xe0>
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	89 87       	std	Y+9, r24	; 0x09
    4b1e:	02 c0       	rjmp	.+4      	; 0x4b24 <__vector_4+0xe4>
    4b20:	82 e0       	ldi	r24, 0x02	; 2
    4b22:	89 87       	std	Y+9, r24	; 0x09
    4b24:	8d 81       	ldd	r24, Y+5	; 0x05
    4b26:	9e 81       	ldd	r25, Y+6	; 0x06
    4b28:	af 81       	ldd	r26, Y+7	; 0x07
    4b2a:	b8 85       	ldd	r27, Y+8	; 0x08
    4b2c:	bf 77       	andi	r27, 0x7F	; 127
    4b2e:	bc 01       	movw	r22, r24
    4b30:	cd 01       	movw	r24, r26
    4b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	98 2f       	mov	r25, r24
    4b3c:	89 85       	ldd	r24, Y+9	; 0x09
    4b3e:	69 2f       	mov	r22, r25
    4b40:	0e 94 cc 18 	call	0x3198	; 0x3198 <DC_RIGHT>
}
    4b44:	2a 96       	adiw	r28, 0x0a	; 10
    4b46:	de bf       	out	0x3e, r29	; 62
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	cf 91       	pop	r28
    4b4c:	df 91       	pop	r29
    4b4e:	ff 91       	pop	r31
    4b50:	ef 91       	pop	r30
    4b52:	bf 91       	pop	r27
    4b54:	af 91       	pop	r26
    4b56:	9f 91       	pop	r25
    4b58:	8f 91       	pop	r24
    4b5a:	7f 91       	pop	r23
    4b5c:	6f 91       	pop	r22
    4b5e:	5f 91       	pop	r21
    4b60:	4f 91       	pop	r20
    4b62:	3f 91       	pop	r19
    4b64:	2f 91       	pop	r18
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	ff 90       	pop	r15
    4b6c:	ef 90       	pop	r14
    4b6e:	df 90       	pop	r13
    4b70:	cf 90       	pop	r12
    4b72:	0f 90       	pop	r0
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	0f 90       	pop	r0
    4b78:	1f 90       	pop	r1
    4b7a:	18 95       	reti

00004b7c <main>:

int main(void)
{
    4b7c:	8f 92       	push	r8
    4b7e:	9f 92       	push	r9
    4b80:	af 92       	push	r10
    4b82:	bf 92       	push	r11
    4b84:	cf 92       	push	r12
    4b86:	df 92       	push	r13
    4b88:	ef 92       	push	r14
    4b8a:	ff 92       	push	r15
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	df 93       	push	r29
    4b92:	cf 93       	push	r28
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	66 97       	sbiw	r28, 0x16	; 22
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
	// تهيئة PID للسرعة الأمامية
	PID_Init(&ctrl.forwardPID, 0.7f, 0.05f, 0.01f, 0.02f, -100.0f, 100.0f);
    4ba4:	8d b7       	in	r24, 0x3d	; 61
    4ba6:	9e b7       	in	r25, 0x3e	; 62
    4ba8:	08 97       	sbiw	r24, 0x08	; 8
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	f8 94       	cli
    4bae:	9e bf       	out	0x3e, r25	; 62
    4bb0:	0f be       	out	0x3f, r0	; 63
    4bb2:	8d bf       	out	0x3d, r24	; 61
    4bb4:	ed b7       	in	r30, 0x3d	; 61
    4bb6:	fe b7       	in	r31, 0x3e	; 62
    4bb8:	31 96       	adiw	r30, 0x01	; 1
    4bba:	2a ec       	ldi	r18, 0xCA	; 202
    4bbc:	32 e0       	ldi	r19, 0x02	; 2
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	a8 ec       	ldi	r26, 0xC8	; 200
    4bc4:	b2 ec       	ldi	r27, 0xC2	; 194
    4bc6:	80 83       	st	Z, r24
    4bc8:	91 83       	std	Z+1, r25	; 0x01
    4bca:	a2 83       	std	Z+2, r26	; 0x02
    4bcc:	b3 83       	std	Z+3, r27	; 0x03
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	a8 ec       	ldi	r26, 0xC8	; 200
    4bd4:	b2 e4       	ldi	r27, 0x42	; 66
    4bd6:	84 83       	std	Z+4, r24	; 0x04
    4bd8:	95 83       	std	Z+5, r25	; 0x05
    4bda:	a6 83       	std	Z+6, r26	; 0x06
    4bdc:	b7 83       	std	Z+7, r27	; 0x07
    4bde:	c9 01       	movw	r24, r18
    4be0:	43 e3       	ldi	r20, 0x33	; 51
    4be2:	53 e3       	ldi	r21, 0x33	; 51
    4be4:	63 e3       	ldi	r22, 0x33	; 51
    4be6:	7f e3       	ldi	r23, 0x3F	; 63
    4be8:	0d ec       	ldi	r16, 0xCD	; 205
    4bea:	1c ec       	ldi	r17, 0xCC	; 204
    4bec:	2c e4       	ldi	r18, 0x4C	; 76
    4bee:	3d e3       	ldi	r19, 0x3D	; 61
    4bf0:	0f 2e       	mov	r0, r31
    4bf2:	fa e0       	ldi	r31, 0x0A	; 10
    4bf4:	cf 2e       	mov	r12, r31
    4bf6:	f7 ed       	ldi	r31, 0xD7	; 215
    4bf8:	df 2e       	mov	r13, r31
    4bfa:	f3 e2       	ldi	r31, 0x23	; 35
    4bfc:	ef 2e       	mov	r14, r31
    4bfe:	fc e3       	ldi	r31, 0x3C	; 60
    4c00:	ff 2e       	mov	r15, r31
    4c02:	f0 2d       	mov	r31, r0
    4c04:	0f 2e       	mov	r0, r31
    4c06:	fa e0       	ldi	r31, 0x0A	; 10
    4c08:	8f 2e       	mov	r8, r31
    4c0a:	f7 ed       	ldi	r31, 0xD7	; 215
    4c0c:	9f 2e       	mov	r9, r31
    4c0e:	f3 ea       	ldi	r31, 0xA3	; 163
    4c10:	af 2e       	mov	r10, r31
    4c12:	fc e3       	ldi	r31, 0x3C	; 60
    4c14:	bf 2e       	mov	r11, r31
    4c16:	f0 2d       	mov	r31, r0
    4c18:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <PID_Init>
    4c1c:	8d b7       	in	r24, 0x3d	; 61
    4c1e:	9e b7       	in	r25, 0x3e	; 62
    4c20:	08 96       	adiw	r24, 0x08	; 8
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	9e bf       	out	0x3e, r25	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	8d bf       	out	0x3d, r24	; 61

	// تهيئة PID للدوران
	PID_Init(&ctrl.rotationPID, 2.0f, 0.07f, 0.04f, 0.02f, -100.0f, 100.0f);
    4c2c:	8d b7       	in	r24, 0x3d	; 61
    4c2e:	9e b7       	in	r25, 0x3e	; 62
    4c30:	08 97       	sbiw	r24, 0x08	; 8
    4c32:	0f b6       	in	r0, 0x3f	; 63
    4c34:	f8 94       	cli
    4c36:	9e bf       	out	0x3e, r25	; 62
    4c38:	0f be       	out	0x3f, r0	; 63
    4c3a:	8d bf       	out	0x3d, r24	; 61
    4c3c:	ed b7       	in	r30, 0x3d	; 61
    4c3e:	fe b7       	in	r31, 0x3e	; 62
    4c40:	31 96       	adiw	r30, 0x01	; 1
    4c42:	2a ee       	ldi	r18, 0xEA	; 234
    4c44:	32 e0       	ldi	r19, 0x02	; 2
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	a8 ec       	ldi	r26, 0xC8	; 200
    4c4c:	b2 ec       	ldi	r27, 0xC2	; 194
    4c4e:	80 83       	st	Z, r24
    4c50:	91 83       	std	Z+1, r25	; 0x01
    4c52:	a2 83       	std	Z+2, r26	; 0x02
    4c54:	b3 83       	std	Z+3, r27	; 0x03
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	a8 ec       	ldi	r26, 0xC8	; 200
    4c5c:	b2 e4       	ldi	r27, 0x42	; 66
    4c5e:	84 83       	std	Z+4, r24	; 0x04
    4c60:	95 83       	std	Z+5, r25	; 0x05
    4c62:	a6 83       	std	Z+6, r26	; 0x06
    4c64:	b7 83       	std	Z+7, r27	; 0x07
    4c66:	c9 01       	movw	r24, r18
    4c68:	40 e0       	ldi	r20, 0x00	; 0
    4c6a:	50 e0       	ldi	r21, 0x00	; 0
    4c6c:	60 e0       	ldi	r22, 0x00	; 0
    4c6e:	70 e4       	ldi	r23, 0x40	; 64
    4c70:	09 e2       	ldi	r16, 0x29	; 41
    4c72:	1c e5       	ldi	r17, 0x5C	; 92
    4c74:	2f e8       	ldi	r18, 0x8F	; 143
    4c76:	3d e3       	ldi	r19, 0x3D	; 61
    4c78:	0f 2e       	mov	r0, r31
    4c7a:	fa e0       	ldi	r31, 0x0A	; 10
    4c7c:	cf 2e       	mov	r12, r31
    4c7e:	f7 ed       	ldi	r31, 0xD7	; 215
    4c80:	df 2e       	mov	r13, r31
    4c82:	f3 e2       	ldi	r31, 0x23	; 35
    4c84:	ef 2e       	mov	r14, r31
    4c86:	fd e3       	ldi	r31, 0x3D	; 61
    4c88:	ff 2e       	mov	r15, r31
    4c8a:	f0 2d       	mov	r31, r0
    4c8c:	0f 2e       	mov	r0, r31
    4c8e:	fa e0       	ldi	r31, 0x0A	; 10
    4c90:	8f 2e       	mov	r8, r31
    4c92:	f7 ed       	ldi	r31, 0xD7	; 215
    4c94:	9f 2e       	mov	r9, r31
    4c96:	f3 ea       	ldi	r31, 0xA3	; 163
    4c98:	af 2e       	mov	r10, r31
    4c9a:	fc e3       	ldi	r31, 0x3C	; 60
    4c9c:	bf 2e       	mov	r11, r31
    4c9e:	f0 2d       	mov	r31, r0
    4ca0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <PID_Init>
    4ca4:	8d b7       	in	r24, 0x3d	; 61
    4ca6:	9e b7       	in	r25, 0x3e	; 62
    4ca8:	08 96       	adiw	r24, 0x08	; 8
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	9e bf       	out	0x3e, r25	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	8d bf       	out	0x3d, r24	; 61

	LCD_init();
    4cb4:	0e 94 a7 1a 	call	0x354e	; 0x354e <LCD_init>
	IR1_init(); IR3_init();
    4cb8:	0e 94 94 19 	call	0x3328	; 0x3328 <IR1_init>
    4cbc:	0e 94 a2 19 	call	0x3344	; 0x3344 <IR3_init>
	IR8_init();
    4cc0:	0e 94 b0 19 	call	0x3360	; 0x3360 <IR8_init>
	Motors_init();
    4cc4:	0e 94 8d 18 	call	0x311a	; 0x311a <Motors_init>
	ext_int0_init();
    4cc8:	0e 94 cf 14 	call	0x299e	; 0x299e <ext_int0_init>
	ext_int2_init();
    4ccc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <ext_int2_init>
	ext_int1_init();
    4cd0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <ext_int1_init>
	setup_timer2_20ms();
    4cd4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <setup_timer2_20ms>
	sei();
    4cd8:	78 94       	sei

	Motors_init();
    4cda:	0e 94 8d 18 	call	0x311a	; 0x311a <Motors_init>
	//set_velocity = 0.0f;



	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
    4cde:	1e 8a       	std	Y+22, r1	; 0x16
    4ce0:	1e c0       	rjmp	.+60     	; 0x4d1e <main+0x1a2>
		for (uint8 y = 0; y < MAZE_SIZE; y++)
    4ce2:	1d 8a       	std	Y+21, r1	; 0x15
    4ce4:	16 c0       	rjmp	.+44     	; 0x4d12 <main+0x196>
			maze[x][y] = 0;
    4ce6:	8e 89       	ldd	r24, Y+22	; 0x16
    4ce8:	48 2f       	mov	r20, r24
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	8d 89       	ldd	r24, Y+21	; 0x15
    4cee:	28 2f       	mov	r18, r24
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	ca 01       	movw	r24, r20
    4cf4:	82 95       	swap	r24
    4cf6:	92 95       	swap	r25
    4cf8:	90 7f       	andi	r25, 0xF0	; 240
    4cfa:	98 27       	eor	r25, r24
    4cfc:	80 7f       	andi	r24, 0xF0	; 240
    4cfe:	98 27       	eor	r25, r24
    4d00:	82 0f       	add	r24, r18
    4d02:	93 1f       	adc	r25, r19
    4d04:	fc 01       	movw	r30, r24
    4d06:	e6 5f       	subi	r30, 0xF6	; 246
    4d08:	fa 4f       	sbci	r31, 0xFA	; 250
    4d0a:	10 82       	st	Z, r1



	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
		for (uint8 y = 0; y < MAZE_SIZE; y++)
    4d0c:	8d 89       	ldd	r24, Y+21	; 0x15
    4d0e:	8f 5f       	subi	r24, 0xFF	; 255
    4d10:	8d 8b       	std	Y+21, r24	; 0x15
    4d12:	8d 89       	ldd	r24, Y+21	; 0x15
    4d14:	80 31       	cpi	r24, 0x10	; 16
    4d16:	38 f3       	brcs	.-50     	; 0x4ce6 <main+0x16a>
	//set_velocity = 0.0f;



	// اعادة تهيئة المتاهة
	for (uint8 x = 0; x < MAZE_SIZE; x++)
    4d18:	8e 89       	ldd	r24, Y+22	; 0x16
    4d1a:	8f 5f       	subi	r24, 0xFF	; 255
    4d1c:	8e 8b       	std	Y+22, r24	; 0x16
    4d1e:	8e 89       	ldd	r24, Y+22	; 0x16
    4d20:	80 31       	cpi	r24, 0x10	; 16
    4d22:	f8 f2       	brcs	.-66     	; 0x4ce2 <main+0x166>
		for (uint8 y = 0; y < MAZE_SIZE; y++)
			maze[x][y] = 0;

	pos_x = 0; pos_y = 0; heading = 0;
    4d24:	10 92 ac 01 	sts	0x01AC, r1
    4d28:	10 92 ab 01 	sts	0x01AB, r1
    4d2c:	10 92 ae 01 	sts	0x01AE, r1
    4d30:	10 92 ad 01 	sts	0x01AD, r1
    4d34:	10 92 af 01 	sts	0x01AF, r1
	floodfill();
    4d38:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <floodfill>

	while (1) {
		uint8 changed = update_walls();
    4d3c:	0e 94 34 0b 	call	0x1668	; 0x1668 <update_walls>
    4d40:	8c 8b       	std	Y+20, r24	; 0x14
		if (changed) {
    4d42:	8c 89       	ldd	r24, Y+20	; 0x14
    4d44:	88 23       	and	r24, r24
    4d46:	11 f0       	breq	.+4      	; 0x4d4c <main+0x1d0>
			floodfill();
    4d48:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <floodfill>
		}

		uint8 next_dir = choose_next_direction();
    4d4c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <choose_next_direction>
    4d50:	8b 8b       	std	Y+19, r24	; 0x13
		rotate_to_dir(next_dir);
    4d52:	8b 89       	ldd	r24, Y+19	; 0x13
    4d54:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <rotate_to_dir>

		int fx = pos_x + dx[heading];
    4d58:	80 91 af 01 	lds	r24, 0x01AF
    4d5c:	88 2f       	mov	r24, r24
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	88 0f       	add	r24, r24
    4d62:	99 1f       	adc	r25, r25
    4d64:	fc 01       	movw	r30, r24
    4d66:	ee 56       	subi	r30, 0x6E	; 110
    4d68:	fe 4f       	sbci	r31, 0xFE	; 254
    4d6a:	20 81       	ld	r18, Z
    4d6c:	31 81       	ldd	r19, Z+1	; 0x01
    4d6e:	80 91 ab 01 	lds	r24, 0x01AB
    4d72:	90 91 ac 01 	lds	r25, 0x01AC
    4d76:	82 0f       	add	r24, r18
    4d78:	93 1f       	adc	r25, r19
    4d7a:	9a 8b       	std	Y+18, r25	; 0x12
    4d7c:	89 8b       	std	Y+17, r24	; 0x11
		int fy = pos_y + dy[heading];
    4d7e:	80 91 af 01 	lds	r24, 0x01AF
    4d82:	88 2f       	mov	r24, r24
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	e6 56       	subi	r30, 0x66	; 102
    4d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d90:	20 81       	ld	r18, Z
    4d92:	31 81       	ldd	r19, Z+1	; 0x01
    4d94:	80 91 ad 01 	lds	r24, 0x01AD
    4d98:	90 91 ae 01 	lds	r25, 0x01AE
    4d9c:	82 0f       	add	r24, r18
    4d9e:	93 1f       	adc	r25, r19
    4da0:	98 8b       	std	Y+16, r25	; 0x10
    4da2:	8f 87       	std	Y+15, r24	; 0x0f
		if (fx >= 0 && fx < MAZE_SIZE && fy >= 0 && fy < MAZE_SIZE && maze[fx][fy] == 0) {
    4da4:	89 89       	ldd	r24, Y+17	; 0x11
    4da6:	9a 89       	ldd	r25, Y+18	; 0x12
    4da8:	99 23       	and	r25, r25
    4daa:	1c f1       	brlt	.+70     	; 0x4df2 <main+0x276>
    4dac:	89 89       	ldd	r24, Y+17	; 0x11
    4dae:	9a 89       	ldd	r25, Y+18	; 0x12
    4db0:	80 31       	cpi	r24, 0x10	; 16
    4db2:	91 05       	cpc	r25, r1
    4db4:	f4 f4       	brge	.+60     	; 0x4df2 <main+0x276>
    4db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db8:	98 89       	ldd	r25, Y+16	; 0x10
    4dba:	99 23       	and	r25, r25
    4dbc:	d4 f0       	brlt	.+52     	; 0x4df2 <main+0x276>
    4dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dc0:	98 89       	ldd	r25, Y+16	; 0x10
    4dc2:	80 31       	cpi	r24, 0x10	; 16
    4dc4:	91 05       	cpc	r25, r1
    4dc6:	ac f4       	brge	.+42     	; 0x4df2 <main+0x276>
    4dc8:	89 89       	ldd	r24, Y+17	; 0x11
    4dca:	9a 89       	ldd	r25, Y+18	; 0x12
    4dcc:	2f 85       	ldd	r18, Y+15	; 0x0f
    4dce:	38 89       	ldd	r19, Y+16	; 0x10
    4dd0:	82 95       	swap	r24
    4dd2:	92 95       	swap	r25
    4dd4:	90 7f       	andi	r25, 0xF0	; 240
    4dd6:	98 27       	eor	r25, r24
    4dd8:	80 7f       	andi	r24, 0xF0	; 240
    4dda:	98 27       	eor	r25, r24
    4ddc:	82 0f       	add	r24, r18
    4dde:	93 1f       	adc	r25, r19
    4de0:	fc 01       	movw	r30, r24
    4de2:	e6 5f       	subi	r30, 0xF6	; 246
    4de4:	fa 4f       	sbci	r31, 0xFA	; 250
    4de6:	80 81       	ld	r24, Z
    4de8:	88 23       	and	r24, r24
    4dea:	19 f4       	brne	.+6      	; 0x4df2 <main+0x276>
			move_forward_one_cell();
    4dec:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <move_forward_one_cell>
    4df0:	04 c0       	rjmp	.+8      	; 0x4dfa <main+0x27e>
		} else {
			update_walls();
    4df2:	0e 94 34 0b 	call	0x1668	; 0x1668 <update_walls>
			floodfill();
    4df6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <floodfill>



		//_delay_ms(120);

		if (((pos_x == 7 || pos_x == 8) && (pos_y == 7 || pos_y == 8)) && maze[pos_x][pos_y] == 0) {
    4dfa:	80 91 ab 01 	lds	r24, 0x01AB
    4dfe:	90 91 ac 01 	lds	r25, 0x01AC
    4e02:	87 30       	cpi	r24, 0x07	; 7
    4e04:	91 05       	cpc	r25, r1
    4e06:	41 f0       	breq	.+16     	; 0x4e18 <main+0x29c>
    4e08:	80 91 ab 01 	lds	r24, 0x01AB
    4e0c:	90 91 ac 01 	lds	r25, 0x01AC
    4e10:	88 30       	cpi	r24, 0x08	; 8
    4e12:	91 05       	cpc	r25, r1
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <main+0x29c>
    4e16:	92 cf       	rjmp	.-220    	; 0x4d3c <main+0x1c0>
    4e18:	80 91 ad 01 	lds	r24, 0x01AD
    4e1c:	90 91 ae 01 	lds	r25, 0x01AE
    4e20:	87 30       	cpi	r24, 0x07	; 7
    4e22:	91 05       	cpc	r25, r1
    4e24:	41 f0       	breq	.+16     	; 0x4e36 <main+0x2ba>
    4e26:	80 91 ad 01 	lds	r24, 0x01AD
    4e2a:	90 91 ae 01 	lds	r25, 0x01AE
    4e2e:	88 30       	cpi	r24, 0x08	; 8
    4e30:	91 05       	cpc	r25, r1
    4e32:	09 f0       	breq	.+2      	; 0x4e36 <main+0x2ba>
    4e34:	83 cf       	rjmp	.-250    	; 0x4d3c <main+0x1c0>
    4e36:	80 91 ab 01 	lds	r24, 0x01AB
    4e3a:	90 91 ac 01 	lds	r25, 0x01AC
    4e3e:	20 91 ad 01 	lds	r18, 0x01AD
    4e42:	30 91 ae 01 	lds	r19, 0x01AE
    4e46:	82 95       	swap	r24
    4e48:	92 95       	swap	r25
    4e4a:	90 7f       	andi	r25, 0xF0	; 240
    4e4c:	98 27       	eor	r25, r24
    4e4e:	80 7f       	andi	r24, 0xF0	; 240
    4e50:	98 27       	eor	r25, r24
    4e52:	82 0f       	add	r24, r18
    4e54:	93 1f       	adc	r25, r19
    4e56:	fc 01       	movw	r30, r24
    4e58:	e6 5f       	subi	r30, 0xF6	; 246
    4e5a:	fa 4f       	sbci	r31, 0xFA	; 250
    4e5c:	80 81       	ld	r24, Z
    4e5e:	88 23       	and	r24, r24
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <main+0x2e8>
    4e62:	6c cf       	rjmp	.-296    	; 0x4d3c <main+0x1c0>
			build_shortest_path(pos_x, pos_y);
    4e64:	80 91 ab 01 	lds	r24, 0x01AB
    4e68:	90 91 ac 01 	lds	r25, 0x01AC
    4e6c:	20 91 ad 01 	lds	r18, 0x01AD
    4e70:	30 91 ae 01 	lds	r19, 0x01AE
    4e74:	b9 01       	movw	r22, r18
    4e76:	0e 94 56 11 	call	0x22ac	; 0x22ac <build_shortest_path>
			goal_reached = 1;
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	80 93 aa 01 	sts	0x01AA, r24
			break;
		}
	}
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	aa ef       	ldi	r26, 0xFA	; 250
    4e86:	b3 e4       	ldi	r27, 0x43	; 67
    4e88:	8b 87       	std	Y+11, r24	; 0x0b
    4e8a:	9c 87       	std	Y+12, r25	; 0x0c
    4e8c:	ad 87       	std	Y+13, r26	; 0x0d
    4e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	4a e7       	ldi	r20, 0x7A	; 122
    4e9e:	55 e4       	ldi	r21, 0x45	; 69
    4ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	8f 83       	std	Y+7, r24	; 0x07
    4eaa:	98 87       	std	Y+8, r25	; 0x08
    4eac:	a9 87       	std	Y+9, r26	; 0x09
    4eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb2:	78 85       	ldd	r23, Y+8	; 0x08
    4eb4:	89 85       	ldd	r24, Y+9	; 0x09
    4eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	40 e8       	ldi	r20, 0x80	; 128
    4ebe:	5f e3       	ldi	r21, 0x3F	; 63
    4ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec4:	88 23       	and	r24, r24
    4ec6:	2c f4       	brge	.+10     	; 0x4ed2 <main+0x356>
		__ticks = 1;
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	9e 83       	std	Y+6, r25	; 0x06
    4ece:	8d 83       	std	Y+5, r24	; 0x05
    4ed0:	3f c0       	rjmp	.+126    	; 0x4f50 <main+0x3d4>
	else if (__tmp > 65535)
    4ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ed4:	78 85       	ldd	r23, Y+8	; 0x08
    4ed6:	89 85       	ldd	r24, Y+9	; 0x09
    4ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	3f ef       	ldi	r19, 0xFF	; 255
    4ede:	4f e7       	ldi	r20, 0x7F	; 127
    4ee0:	57 e4       	ldi	r21, 0x47	; 71
    4ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee6:	18 16       	cp	r1, r24
    4ee8:	4c f5       	brge	.+82     	; 0x4f3c <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	40 e2       	ldi	r20, 0x20	; 32
    4ef8:	51 e4       	ldi	r21, 0x41	; 65
    4efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	bc 01       	movw	r22, r24
    4f04:	cd 01       	movw	r24, r26
    4f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	cb 01       	movw	r24, r22
    4f0e:	9e 83       	std	Y+6, r25	; 0x06
    4f10:	8d 83       	std	Y+5, r24	; 0x05
    4f12:	0f c0       	rjmp	.+30     	; 0x4f32 <main+0x3b6>
    4f14:	80 e9       	ldi	r24, 0x90	; 144
    4f16:	91 e0       	ldi	r25, 0x01	; 1
    4f18:	9c 83       	std	Y+4, r25	; 0x04
    4f1a:	8b 83       	std	Y+3, r24	; 0x03
    4f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f20:	01 97       	sbiw	r24, 0x01	; 1
    4f22:	f1 f7       	brne	.-4      	; 0x4f20 <main+0x3a4>
    4f24:	9c 83       	std	Y+4, r25	; 0x04
    4f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f28:	8d 81       	ldd	r24, Y+5	; 0x05
    4f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	9e 83       	std	Y+6, r25	; 0x06
    4f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f32:	8d 81       	ldd	r24, Y+5	; 0x05
    4f34:	9e 81       	ldd	r25, Y+6	; 0x06
    4f36:	00 97       	sbiw	r24, 0x00	; 0
    4f38:	69 f7       	brne	.-38     	; 0x4f14 <main+0x398>
    4f3a:	a2 cf       	rjmp	.-188    	; 0x4e80 <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3e:	78 85       	ldd	r23, Y+8	; 0x08
    4f40:	89 85       	ldd	r24, Y+9	; 0x09
    4f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	9e 83       	std	Y+6, r25	; 0x06
    4f4e:	8d 83       	std	Y+5, r24	; 0x05
    4f50:	8d 81       	ldd	r24, Y+5	; 0x05
    4f52:	9e 81       	ldd	r25, Y+6	; 0x06
    4f54:	9a 83       	std	Y+2, r25	; 0x02
    4f56:	89 83       	std	Y+1, r24	; 0x01
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	f1 f7       	brne	.-4      	; 0x4f5c <main+0x3e0>
    4f60:	9a 83       	std	Y+2, r25	; 0x02
    4f62:	89 83       	std	Y+1, r24	; 0x01
    4f64:	8d cf       	rjmp	.-230    	; 0x4e80 <main+0x304>

00004f66 <__divmodhi4>:
    4f66:	97 fb       	bst	r25, 7
    4f68:	09 2e       	mov	r0, r25
    4f6a:	07 26       	eor	r0, r23
    4f6c:	0a d0       	rcall	.+20     	; 0x4f82 <__divmodhi4_neg1>
    4f6e:	77 fd       	sbrc	r23, 7
    4f70:	04 d0       	rcall	.+8      	; 0x4f7a <__divmodhi4_neg2>
    4f72:	27 d0       	rcall	.+78     	; 0x4fc2 <__udivmodhi4>
    4f74:	06 d0       	rcall	.+12     	; 0x4f82 <__divmodhi4_neg1>
    4f76:	00 20       	and	r0, r0
    4f78:	1a f4       	brpl	.+6      	; 0x4f80 <__divmodhi4_exit>

00004f7a <__divmodhi4_neg2>:
    4f7a:	70 95       	com	r23
    4f7c:	61 95       	neg	r22
    4f7e:	7f 4f       	sbci	r23, 0xFF	; 255

00004f80 <__divmodhi4_exit>:
    4f80:	08 95       	ret

00004f82 <__divmodhi4_neg1>:
    4f82:	f6 f7       	brtc	.-4      	; 0x4f80 <__divmodhi4_exit>
    4f84:	90 95       	com	r25
    4f86:	81 95       	neg	r24
    4f88:	9f 4f       	sbci	r25, 0xFF	; 255
    4f8a:	08 95       	ret

00004f8c <__divmodsi4>:
    4f8c:	97 fb       	bst	r25, 7
    4f8e:	09 2e       	mov	r0, r25
    4f90:	05 26       	eor	r0, r21
    4f92:	0e d0       	rcall	.+28     	; 0x4fb0 <__divmodsi4_neg1>
    4f94:	57 fd       	sbrc	r21, 7
    4f96:	04 d0       	rcall	.+8      	; 0x4fa0 <__divmodsi4_neg2>
    4f98:	28 d0       	rcall	.+80     	; 0x4fea <__udivmodsi4>
    4f9a:	0a d0       	rcall	.+20     	; 0x4fb0 <__divmodsi4_neg1>
    4f9c:	00 1c       	adc	r0, r0
    4f9e:	38 f4       	brcc	.+14     	; 0x4fae <__divmodsi4_exit>

00004fa0 <__divmodsi4_neg2>:
    4fa0:	50 95       	com	r21
    4fa2:	40 95       	com	r20
    4fa4:	30 95       	com	r19
    4fa6:	21 95       	neg	r18
    4fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    4faa:	4f 4f       	sbci	r20, 0xFF	; 255
    4fac:	5f 4f       	sbci	r21, 0xFF	; 255

00004fae <__divmodsi4_exit>:
    4fae:	08 95       	ret

00004fb0 <__divmodsi4_neg1>:
    4fb0:	f6 f7       	brtc	.-4      	; 0x4fae <__divmodsi4_exit>
    4fb2:	90 95       	com	r25
    4fb4:	80 95       	com	r24
    4fb6:	70 95       	com	r23
    4fb8:	61 95       	neg	r22
    4fba:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc0:	08 95       	ret

00004fc2 <__udivmodhi4>:
    4fc2:	aa 1b       	sub	r26, r26
    4fc4:	bb 1b       	sub	r27, r27
    4fc6:	51 e1       	ldi	r21, 0x11	; 17
    4fc8:	07 c0       	rjmp	.+14     	; 0x4fd8 <__udivmodhi4_ep>

00004fca <__udivmodhi4_loop>:
    4fca:	aa 1f       	adc	r26, r26
    4fcc:	bb 1f       	adc	r27, r27
    4fce:	a6 17       	cp	r26, r22
    4fd0:	b7 07       	cpc	r27, r23
    4fd2:	10 f0       	brcs	.+4      	; 0x4fd8 <__udivmodhi4_ep>
    4fd4:	a6 1b       	sub	r26, r22
    4fd6:	b7 0b       	sbc	r27, r23

00004fd8 <__udivmodhi4_ep>:
    4fd8:	88 1f       	adc	r24, r24
    4fda:	99 1f       	adc	r25, r25
    4fdc:	5a 95       	dec	r21
    4fde:	a9 f7       	brne	.-22     	; 0x4fca <__udivmodhi4_loop>
    4fe0:	80 95       	com	r24
    4fe2:	90 95       	com	r25
    4fe4:	bc 01       	movw	r22, r24
    4fe6:	cd 01       	movw	r24, r26
    4fe8:	08 95       	ret

00004fea <__udivmodsi4>:
    4fea:	a1 e2       	ldi	r26, 0x21	; 33
    4fec:	1a 2e       	mov	r1, r26
    4fee:	aa 1b       	sub	r26, r26
    4ff0:	bb 1b       	sub	r27, r27
    4ff2:	fd 01       	movw	r30, r26
    4ff4:	0d c0       	rjmp	.+26     	; 0x5010 <__udivmodsi4_ep>

00004ff6 <__udivmodsi4_loop>:
    4ff6:	aa 1f       	adc	r26, r26
    4ff8:	bb 1f       	adc	r27, r27
    4ffa:	ee 1f       	adc	r30, r30
    4ffc:	ff 1f       	adc	r31, r31
    4ffe:	a2 17       	cp	r26, r18
    5000:	b3 07       	cpc	r27, r19
    5002:	e4 07       	cpc	r30, r20
    5004:	f5 07       	cpc	r31, r21
    5006:	20 f0       	brcs	.+8      	; 0x5010 <__udivmodsi4_ep>
    5008:	a2 1b       	sub	r26, r18
    500a:	b3 0b       	sbc	r27, r19
    500c:	e4 0b       	sbc	r30, r20
    500e:	f5 0b       	sbc	r31, r21

00005010 <__udivmodsi4_ep>:
    5010:	66 1f       	adc	r22, r22
    5012:	77 1f       	adc	r23, r23
    5014:	88 1f       	adc	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	1a 94       	dec	r1
    501a:	69 f7       	brne	.-38     	; 0x4ff6 <__udivmodsi4_loop>
    501c:	60 95       	com	r22
    501e:	70 95       	com	r23
    5020:	80 95       	com	r24
    5022:	90 95       	com	r25
    5024:	9b 01       	movw	r18, r22
    5026:	ac 01       	movw	r20, r24
    5028:	bd 01       	movw	r22, r26
    502a:	cf 01       	movw	r24, r30
    502c:	08 95       	ret

0000502e <__prologue_saves__>:
    502e:	2f 92       	push	r2
    5030:	3f 92       	push	r3
    5032:	4f 92       	push	r4
    5034:	5f 92       	push	r5
    5036:	6f 92       	push	r6
    5038:	7f 92       	push	r7
    503a:	8f 92       	push	r8
    503c:	9f 92       	push	r9
    503e:	af 92       	push	r10
    5040:	bf 92       	push	r11
    5042:	cf 92       	push	r12
    5044:	df 92       	push	r13
    5046:	ef 92       	push	r14
    5048:	ff 92       	push	r15
    504a:	0f 93       	push	r16
    504c:	1f 93       	push	r17
    504e:	cf 93       	push	r28
    5050:	df 93       	push	r29
    5052:	cd b7       	in	r28, 0x3d	; 61
    5054:	de b7       	in	r29, 0x3e	; 62
    5056:	ca 1b       	sub	r28, r26
    5058:	db 0b       	sbc	r29, r27
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	f8 94       	cli
    505e:	de bf       	out	0x3e, r29	; 62
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	cd bf       	out	0x3d, r28	; 61
    5064:	09 94       	ijmp

00005066 <__epilogue_restores__>:
    5066:	2a 88       	ldd	r2, Y+18	; 0x12
    5068:	39 88       	ldd	r3, Y+17	; 0x11
    506a:	48 88       	ldd	r4, Y+16	; 0x10
    506c:	5f 84       	ldd	r5, Y+15	; 0x0f
    506e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5070:	7d 84       	ldd	r7, Y+13	; 0x0d
    5072:	8c 84       	ldd	r8, Y+12	; 0x0c
    5074:	9b 84       	ldd	r9, Y+11	; 0x0b
    5076:	aa 84       	ldd	r10, Y+10	; 0x0a
    5078:	b9 84       	ldd	r11, Y+9	; 0x09
    507a:	c8 84       	ldd	r12, Y+8	; 0x08
    507c:	df 80       	ldd	r13, Y+7	; 0x07
    507e:	ee 80       	ldd	r14, Y+6	; 0x06
    5080:	fd 80       	ldd	r15, Y+5	; 0x05
    5082:	0c 81       	ldd	r16, Y+4	; 0x04
    5084:	1b 81       	ldd	r17, Y+3	; 0x03
    5086:	aa 81       	ldd	r26, Y+2	; 0x02
    5088:	b9 81       	ldd	r27, Y+1	; 0x01
    508a:	ce 0f       	add	r28, r30
    508c:	d1 1d       	adc	r29, r1
    508e:	0f b6       	in	r0, 0x3f	; 63
    5090:	f8 94       	cli
    5092:	de bf       	out	0x3e, r29	; 62
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	cd bf       	out	0x3d, r28	; 61
    5098:	ed 01       	movw	r28, r26
    509a:	08 95       	ret

0000509c <itoa>:
    509c:	fb 01       	movw	r30, r22
    509e:	9f 01       	movw	r18, r30
    50a0:	e8 94       	clt
    50a2:	42 30       	cpi	r20, 0x02	; 2
    50a4:	c4 f0       	brlt	.+48     	; 0x50d6 <itoa+0x3a>
    50a6:	45 32       	cpi	r20, 0x25	; 37
    50a8:	b4 f4       	brge	.+44     	; 0x50d6 <itoa+0x3a>
    50aa:	4a 30       	cpi	r20, 0x0A	; 10
    50ac:	29 f4       	brne	.+10     	; 0x50b8 <itoa+0x1c>
    50ae:	97 fb       	bst	r25, 7
    50b0:	1e f4       	brtc	.+6      	; 0x50b8 <itoa+0x1c>
    50b2:	90 95       	com	r25
    50b4:	81 95       	neg	r24
    50b6:	9f 4f       	sbci	r25, 0xFF	; 255
    50b8:	64 2f       	mov	r22, r20
    50ba:	77 27       	eor	r23, r23
    50bc:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__udivmodhi4>
    50c0:	80 5d       	subi	r24, 0xD0	; 208
    50c2:	8a 33       	cpi	r24, 0x3A	; 58
    50c4:	0c f0       	brlt	.+2      	; 0x50c8 <itoa+0x2c>
    50c6:	89 5d       	subi	r24, 0xD9	; 217
    50c8:	81 93       	st	Z+, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	00 97       	sbiw	r24, 0x00	; 0
    50ce:	a1 f7       	brne	.-24     	; 0x50b8 <itoa+0x1c>
    50d0:	16 f4       	brtc	.+4      	; 0x50d6 <itoa+0x3a>
    50d2:	5d e2       	ldi	r21, 0x2D	; 45
    50d4:	51 93       	st	Z+, r21
    50d6:	10 82       	st	Z, r1
    50d8:	c9 01       	movw	r24, r18
    50da:	0c 94 93 2a 	jmp	0x5526	; 0x5526 <strrev>

000050de <snprintf>:
    50de:	ae e0       	ldi	r26, 0x0E	; 14
    50e0:	b0 e0       	ldi	r27, 0x00	; 0
    50e2:	e5 e7       	ldi	r30, 0x75	; 117
    50e4:	f8 e2       	ldi	r31, 0x28	; 40
    50e6:	0c 94 25 28 	jmp	0x504a	; 0x504a <__prologue_saves__+0x1c>
    50ea:	0d 89       	ldd	r16, Y+21	; 0x15
    50ec:	1e 89       	ldd	r17, Y+22	; 0x16
    50ee:	8f 89       	ldd	r24, Y+23	; 0x17
    50f0:	98 8d       	ldd	r25, Y+24	; 0x18
    50f2:	97 ff       	sbrs	r25, 7
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <snprintf+0x1c>
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	90 e8       	ldi	r25, 0x80	; 128
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	9e 83       	std	Y+6, r25	; 0x06
    50fe:	8d 83       	std	Y+5, r24	; 0x05
    5100:	1a 83       	std	Y+2, r17	; 0x02
    5102:	09 83       	std	Y+1, r16	; 0x01
    5104:	86 e0       	ldi	r24, 0x06	; 6
    5106:	8c 83       	std	Y+4, r24	; 0x04
    5108:	9e 01       	movw	r18, r28
    510a:	25 5e       	subi	r18, 0xE5	; 229
    510c:	3f 4f       	sbci	r19, 0xFF	; 255
    510e:	ce 01       	movw	r24, r28
    5110:	01 96       	adiw	r24, 0x01	; 1
    5112:	69 8d       	ldd	r22, Y+25	; 0x19
    5114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5116:	a9 01       	movw	r20, r18
    5118:	0e 94 a0 28 	call	0x5140	; 0x5140 <vfprintf>
    511c:	4d 81       	ldd	r20, Y+5	; 0x05
    511e:	5e 81       	ldd	r21, Y+6	; 0x06
    5120:	57 fd       	sbrc	r21, 7
    5122:	0a c0       	rjmp	.+20     	; 0x5138 <snprintf+0x5a>
    5124:	2f 81       	ldd	r18, Y+7	; 0x07
    5126:	38 85       	ldd	r19, Y+8	; 0x08
    5128:	42 17       	cp	r20, r18
    512a:	53 07       	cpc	r21, r19
    512c:	0c f4       	brge	.+2      	; 0x5130 <snprintf+0x52>
    512e:	9a 01       	movw	r18, r20
    5130:	02 0f       	add	r16, r18
    5132:	13 1f       	adc	r17, r19
    5134:	f8 01       	movw	r30, r16
    5136:	10 82       	st	Z, r1
    5138:	2e 96       	adiw	r28, 0x0e	; 14
    513a:	e4 e0       	ldi	r30, 0x04	; 4
    513c:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__epilogue_restores__+0x1c>

00005140 <vfprintf>:
    5140:	ab e0       	ldi	r26, 0x0B	; 11
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	e6 ea       	ldi	r30, 0xA6	; 166
    5146:	f8 e2       	ldi	r31, 0x28	; 40
    5148:	0c 94 17 28 	jmp	0x502e	; 0x502e <__prologue_saves__>
    514c:	3c 01       	movw	r6, r24
    514e:	2b 01       	movw	r4, r22
    5150:	5a 01       	movw	r10, r20
    5152:	fc 01       	movw	r30, r24
    5154:	17 82       	std	Z+7, r1	; 0x07
    5156:	16 82       	std	Z+6, r1	; 0x06
    5158:	83 81       	ldd	r24, Z+3	; 0x03
    515a:	81 fd       	sbrc	r24, 1
    515c:	03 c0       	rjmp	.+6      	; 0x5164 <vfprintf+0x24>
    515e:	6f ef       	ldi	r22, 0xFF	; 255
    5160:	7f ef       	ldi	r23, 0xFF	; 255
    5162:	c6 c1       	rjmp	.+908    	; 0x54f0 <vfprintf+0x3b0>
    5164:	9a e0       	ldi	r25, 0x0A	; 10
    5166:	89 2e       	mov	r8, r25
    5168:	1e 01       	movw	r2, r28
    516a:	08 94       	sec
    516c:	21 1c       	adc	r2, r1
    516e:	31 1c       	adc	r3, r1
    5170:	f3 01       	movw	r30, r6
    5172:	23 81       	ldd	r18, Z+3	; 0x03
    5174:	f2 01       	movw	r30, r4
    5176:	23 fd       	sbrc	r18, 3
    5178:	85 91       	lpm	r24, Z+
    517a:	23 ff       	sbrs	r18, 3
    517c:	81 91       	ld	r24, Z+
    517e:	2f 01       	movw	r4, r30
    5180:	88 23       	and	r24, r24
    5182:	09 f4       	brne	.+2      	; 0x5186 <vfprintf+0x46>
    5184:	b2 c1       	rjmp	.+868    	; 0x54ea <vfprintf+0x3aa>
    5186:	85 32       	cpi	r24, 0x25	; 37
    5188:	39 f4       	brne	.+14     	; 0x5198 <vfprintf+0x58>
    518a:	23 fd       	sbrc	r18, 3
    518c:	85 91       	lpm	r24, Z+
    518e:	23 ff       	sbrs	r18, 3
    5190:	81 91       	ld	r24, Z+
    5192:	2f 01       	movw	r4, r30
    5194:	85 32       	cpi	r24, 0x25	; 37
    5196:	29 f4       	brne	.+10     	; 0x51a2 <vfprintf+0x62>
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	b3 01       	movw	r22, r6
    519c:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    51a0:	e7 cf       	rjmp	.-50     	; 0x5170 <vfprintf+0x30>
    51a2:	98 2f       	mov	r25, r24
    51a4:	ff 24       	eor	r15, r15
    51a6:	ee 24       	eor	r14, r14
    51a8:	99 24       	eor	r9, r9
    51aa:	ff e1       	ldi	r31, 0x1F	; 31
    51ac:	ff 15       	cp	r31, r15
    51ae:	d0 f0       	brcs	.+52     	; 0x51e4 <vfprintf+0xa4>
    51b0:	9b 32       	cpi	r25, 0x2B	; 43
    51b2:	69 f0       	breq	.+26     	; 0x51ce <vfprintf+0x8e>
    51b4:	9c 32       	cpi	r25, 0x2C	; 44
    51b6:	28 f4       	brcc	.+10     	; 0x51c2 <vfprintf+0x82>
    51b8:	90 32       	cpi	r25, 0x20	; 32
    51ba:	59 f0       	breq	.+22     	; 0x51d2 <vfprintf+0x92>
    51bc:	93 32       	cpi	r25, 0x23	; 35
    51be:	91 f4       	brne	.+36     	; 0x51e4 <vfprintf+0xa4>
    51c0:	0e c0       	rjmp	.+28     	; 0x51de <vfprintf+0x9e>
    51c2:	9d 32       	cpi	r25, 0x2D	; 45
    51c4:	49 f0       	breq	.+18     	; 0x51d8 <vfprintf+0x98>
    51c6:	90 33       	cpi	r25, 0x30	; 48
    51c8:	69 f4       	brne	.+26     	; 0x51e4 <vfprintf+0xa4>
    51ca:	41 e0       	ldi	r20, 0x01	; 1
    51cc:	24 c0       	rjmp	.+72     	; 0x5216 <vfprintf+0xd6>
    51ce:	52 e0       	ldi	r21, 0x02	; 2
    51d0:	f5 2a       	or	r15, r21
    51d2:	84 e0       	ldi	r24, 0x04	; 4
    51d4:	f8 2a       	or	r15, r24
    51d6:	28 c0       	rjmp	.+80     	; 0x5228 <vfprintf+0xe8>
    51d8:	98 e0       	ldi	r25, 0x08	; 8
    51da:	f9 2a       	or	r15, r25
    51dc:	25 c0       	rjmp	.+74     	; 0x5228 <vfprintf+0xe8>
    51de:	e0 e1       	ldi	r30, 0x10	; 16
    51e0:	fe 2a       	or	r15, r30
    51e2:	22 c0       	rjmp	.+68     	; 0x5228 <vfprintf+0xe8>
    51e4:	f7 fc       	sbrc	r15, 7
    51e6:	29 c0       	rjmp	.+82     	; 0x523a <vfprintf+0xfa>
    51e8:	89 2f       	mov	r24, r25
    51ea:	80 53       	subi	r24, 0x30	; 48
    51ec:	8a 30       	cpi	r24, 0x0A	; 10
    51ee:	70 f4       	brcc	.+28     	; 0x520c <vfprintf+0xcc>
    51f0:	f6 fe       	sbrs	r15, 6
    51f2:	05 c0       	rjmp	.+10     	; 0x51fe <vfprintf+0xbe>
    51f4:	98 9c       	mul	r9, r8
    51f6:	90 2c       	mov	r9, r0
    51f8:	11 24       	eor	r1, r1
    51fa:	98 0e       	add	r9, r24
    51fc:	15 c0       	rjmp	.+42     	; 0x5228 <vfprintf+0xe8>
    51fe:	e8 9c       	mul	r14, r8
    5200:	e0 2c       	mov	r14, r0
    5202:	11 24       	eor	r1, r1
    5204:	e8 0e       	add	r14, r24
    5206:	f0 e2       	ldi	r31, 0x20	; 32
    5208:	ff 2a       	or	r15, r31
    520a:	0e c0       	rjmp	.+28     	; 0x5228 <vfprintf+0xe8>
    520c:	9e 32       	cpi	r25, 0x2E	; 46
    520e:	29 f4       	brne	.+10     	; 0x521a <vfprintf+0xda>
    5210:	f6 fc       	sbrc	r15, 6
    5212:	6b c1       	rjmp	.+726    	; 0x54ea <vfprintf+0x3aa>
    5214:	40 e4       	ldi	r20, 0x40	; 64
    5216:	f4 2a       	or	r15, r20
    5218:	07 c0       	rjmp	.+14     	; 0x5228 <vfprintf+0xe8>
    521a:	9c 36       	cpi	r25, 0x6C	; 108
    521c:	19 f4       	brne	.+6      	; 0x5224 <vfprintf+0xe4>
    521e:	50 e8       	ldi	r21, 0x80	; 128
    5220:	f5 2a       	or	r15, r21
    5222:	02 c0       	rjmp	.+4      	; 0x5228 <vfprintf+0xe8>
    5224:	98 36       	cpi	r25, 0x68	; 104
    5226:	49 f4       	brne	.+18     	; 0x523a <vfprintf+0xfa>
    5228:	f2 01       	movw	r30, r4
    522a:	23 fd       	sbrc	r18, 3
    522c:	95 91       	lpm	r25, Z+
    522e:	23 ff       	sbrs	r18, 3
    5230:	91 91       	ld	r25, Z+
    5232:	2f 01       	movw	r4, r30
    5234:	99 23       	and	r25, r25
    5236:	09 f0       	breq	.+2      	; 0x523a <vfprintf+0xfa>
    5238:	b8 cf       	rjmp	.-144    	; 0x51aa <vfprintf+0x6a>
    523a:	89 2f       	mov	r24, r25
    523c:	85 54       	subi	r24, 0x45	; 69
    523e:	83 30       	cpi	r24, 0x03	; 3
    5240:	18 f0       	brcs	.+6      	; 0x5248 <vfprintf+0x108>
    5242:	80 52       	subi	r24, 0x20	; 32
    5244:	83 30       	cpi	r24, 0x03	; 3
    5246:	38 f4       	brcc	.+14     	; 0x5256 <vfprintf+0x116>
    5248:	44 e0       	ldi	r20, 0x04	; 4
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	a4 0e       	add	r10, r20
    524e:	b5 1e       	adc	r11, r21
    5250:	5f e3       	ldi	r21, 0x3F	; 63
    5252:	59 83       	std	Y+1, r21	; 0x01
    5254:	0f c0       	rjmp	.+30     	; 0x5274 <vfprintf+0x134>
    5256:	93 36       	cpi	r25, 0x63	; 99
    5258:	31 f0       	breq	.+12     	; 0x5266 <vfprintf+0x126>
    525a:	93 37       	cpi	r25, 0x73	; 115
    525c:	79 f0       	breq	.+30     	; 0x527c <vfprintf+0x13c>
    525e:	93 35       	cpi	r25, 0x53	; 83
    5260:	09 f0       	breq	.+2      	; 0x5264 <vfprintf+0x124>
    5262:	56 c0       	rjmp	.+172    	; 0x5310 <vfprintf+0x1d0>
    5264:	20 c0       	rjmp	.+64     	; 0x52a6 <vfprintf+0x166>
    5266:	f5 01       	movw	r30, r10
    5268:	80 81       	ld	r24, Z
    526a:	89 83       	std	Y+1, r24	; 0x01
    526c:	42 e0       	ldi	r20, 0x02	; 2
    526e:	50 e0       	ldi	r21, 0x00	; 0
    5270:	a4 0e       	add	r10, r20
    5272:	b5 1e       	adc	r11, r21
    5274:	61 01       	movw	r12, r2
    5276:	01 e0       	ldi	r16, 0x01	; 1
    5278:	10 e0       	ldi	r17, 0x00	; 0
    527a:	12 c0       	rjmp	.+36     	; 0x52a0 <vfprintf+0x160>
    527c:	f5 01       	movw	r30, r10
    527e:	c0 80       	ld	r12, Z
    5280:	d1 80       	ldd	r13, Z+1	; 0x01
    5282:	f6 fc       	sbrc	r15, 6
    5284:	03 c0       	rjmp	.+6      	; 0x528c <vfprintf+0x14c>
    5286:	6f ef       	ldi	r22, 0xFF	; 255
    5288:	7f ef       	ldi	r23, 0xFF	; 255
    528a:	02 c0       	rjmp	.+4      	; 0x5290 <vfprintf+0x150>
    528c:	69 2d       	mov	r22, r9
    528e:	70 e0       	ldi	r23, 0x00	; 0
    5290:	42 e0       	ldi	r20, 0x02	; 2
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	a4 0e       	add	r10, r20
    5296:	b5 1e       	adc	r11, r21
    5298:	c6 01       	movw	r24, r12
    529a:	0e 94 88 2a 	call	0x5510	; 0x5510 <strnlen>
    529e:	8c 01       	movw	r16, r24
    52a0:	5f e7       	ldi	r21, 0x7F	; 127
    52a2:	f5 22       	and	r15, r21
    52a4:	14 c0       	rjmp	.+40     	; 0x52ce <vfprintf+0x18e>
    52a6:	f5 01       	movw	r30, r10
    52a8:	c0 80       	ld	r12, Z
    52aa:	d1 80       	ldd	r13, Z+1	; 0x01
    52ac:	f6 fc       	sbrc	r15, 6
    52ae:	03 c0       	rjmp	.+6      	; 0x52b6 <vfprintf+0x176>
    52b0:	6f ef       	ldi	r22, 0xFF	; 255
    52b2:	7f ef       	ldi	r23, 0xFF	; 255
    52b4:	02 c0       	rjmp	.+4      	; 0x52ba <vfprintf+0x17a>
    52b6:	69 2d       	mov	r22, r9
    52b8:	70 e0       	ldi	r23, 0x00	; 0
    52ba:	42 e0       	ldi	r20, 0x02	; 2
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	a4 0e       	add	r10, r20
    52c0:	b5 1e       	adc	r11, r21
    52c2:	c6 01       	movw	r24, r12
    52c4:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <strnlen_P>
    52c8:	8c 01       	movw	r16, r24
    52ca:	50 e8       	ldi	r21, 0x80	; 128
    52cc:	f5 2a       	or	r15, r21
    52ce:	f3 fe       	sbrs	r15, 3
    52d0:	07 c0       	rjmp	.+14     	; 0x52e0 <vfprintf+0x1a0>
    52d2:	1a c0       	rjmp	.+52     	; 0x5308 <vfprintf+0x1c8>
    52d4:	80 e2       	ldi	r24, 0x20	; 32
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	b3 01       	movw	r22, r6
    52da:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    52de:	ea 94       	dec	r14
    52e0:	8e 2d       	mov	r24, r14
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	08 17       	cp	r16, r24
    52e6:	19 07       	cpc	r17, r25
    52e8:	a8 f3       	brcs	.-22     	; 0x52d4 <vfprintf+0x194>
    52ea:	0e c0       	rjmp	.+28     	; 0x5308 <vfprintf+0x1c8>
    52ec:	f6 01       	movw	r30, r12
    52ee:	f7 fc       	sbrc	r15, 7
    52f0:	85 91       	lpm	r24, Z+
    52f2:	f7 fe       	sbrs	r15, 7
    52f4:	81 91       	ld	r24, Z+
    52f6:	6f 01       	movw	r12, r30
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	b3 01       	movw	r22, r6
    52fc:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    5300:	e1 10       	cpse	r14, r1
    5302:	ea 94       	dec	r14
    5304:	01 50       	subi	r16, 0x01	; 1
    5306:	10 40       	sbci	r17, 0x00	; 0
    5308:	01 15       	cp	r16, r1
    530a:	11 05       	cpc	r17, r1
    530c:	79 f7       	brne	.-34     	; 0x52ec <vfprintf+0x1ac>
    530e:	ea c0       	rjmp	.+468    	; 0x54e4 <vfprintf+0x3a4>
    5310:	94 36       	cpi	r25, 0x64	; 100
    5312:	11 f0       	breq	.+4      	; 0x5318 <vfprintf+0x1d8>
    5314:	99 36       	cpi	r25, 0x69	; 105
    5316:	69 f5       	brne	.+90     	; 0x5372 <vfprintf+0x232>
    5318:	f7 fe       	sbrs	r15, 7
    531a:	08 c0       	rjmp	.+16     	; 0x532c <vfprintf+0x1ec>
    531c:	f5 01       	movw	r30, r10
    531e:	20 81       	ld	r18, Z
    5320:	31 81       	ldd	r19, Z+1	; 0x01
    5322:	42 81       	ldd	r20, Z+2	; 0x02
    5324:	53 81       	ldd	r21, Z+3	; 0x03
    5326:	84 e0       	ldi	r24, 0x04	; 4
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	0a c0       	rjmp	.+20     	; 0x5340 <vfprintf+0x200>
    532c:	f5 01       	movw	r30, r10
    532e:	80 81       	ld	r24, Z
    5330:	91 81       	ldd	r25, Z+1	; 0x01
    5332:	9c 01       	movw	r18, r24
    5334:	44 27       	eor	r20, r20
    5336:	37 fd       	sbrc	r19, 7
    5338:	40 95       	com	r20
    533a:	54 2f       	mov	r21, r20
    533c:	82 e0       	ldi	r24, 0x02	; 2
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	a8 0e       	add	r10, r24
    5342:	b9 1e       	adc	r11, r25
    5344:	9f e6       	ldi	r25, 0x6F	; 111
    5346:	f9 22       	and	r15, r25
    5348:	57 ff       	sbrs	r21, 7
    534a:	09 c0       	rjmp	.+18     	; 0x535e <vfprintf+0x21e>
    534c:	50 95       	com	r21
    534e:	40 95       	com	r20
    5350:	30 95       	com	r19
    5352:	21 95       	neg	r18
    5354:	3f 4f       	sbci	r19, 0xFF	; 255
    5356:	4f 4f       	sbci	r20, 0xFF	; 255
    5358:	5f 4f       	sbci	r21, 0xFF	; 255
    535a:	e0 e8       	ldi	r30, 0x80	; 128
    535c:	fe 2a       	or	r15, r30
    535e:	ca 01       	movw	r24, r20
    5360:	b9 01       	movw	r22, r18
    5362:	a1 01       	movw	r20, r2
    5364:	2a e0       	ldi	r18, 0x0A	; 10
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	0e 94 cf 2a 	call	0x559e	; 0x559e <__ultoa_invert>
    536c:	d8 2e       	mov	r13, r24
    536e:	d2 18       	sub	r13, r2
    5370:	40 c0       	rjmp	.+128    	; 0x53f2 <vfprintf+0x2b2>
    5372:	95 37       	cpi	r25, 0x75	; 117
    5374:	29 f4       	brne	.+10     	; 0x5380 <vfprintf+0x240>
    5376:	1f 2d       	mov	r17, r15
    5378:	1f 7e       	andi	r17, 0xEF	; 239
    537a:	2a e0       	ldi	r18, 0x0A	; 10
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	1d c0       	rjmp	.+58     	; 0x53ba <vfprintf+0x27a>
    5380:	1f 2d       	mov	r17, r15
    5382:	19 7f       	andi	r17, 0xF9	; 249
    5384:	9f 36       	cpi	r25, 0x6F	; 111
    5386:	61 f0       	breq	.+24     	; 0x53a0 <vfprintf+0x260>
    5388:	90 37       	cpi	r25, 0x70	; 112
    538a:	20 f4       	brcc	.+8      	; 0x5394 <vfprintf+0x254>
    538c:	98 35       	cpi	r25, 0x58	; 88
    538e:	09 f0       	breq	.+2      	; 0x5392 <vfprintf+0x252>
    5390:	ac c0       	rjmp	.+344    	; 0x54ea <vfprintf+0x3aa>
    5392:	0f c0       	rjmp	.+30     	; 0x53b2 <vfprintf+0x272>
    5394:	90 37       	cpi	r25, 0x70	; 112
    5396:	39 f0       	breq	.+14     	; 0x53a6 <vfprintf+0x266>
    5398:	98 37       	cpi	r25, 0x78	; 120
    539a:	09 f0       	breq	.+2      	; 0x539e <vfprintf+0x25e>
    539c:	a6 c0       	rjmp	.+332    	; 0x54ea <vfprintf+0x3aa>
    539e:	04 c0       	rjmp	.+8      	; 0x53a8 <vfprintf+0x268>
    53a0:	28 e0       	ldi	r18, 0x08	; 8
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	0a c0       	rjmp	.+20     	; 0x53ba <vfprintf+0x27a>
    53a6:	10 61       	ori	r17, 0x10	; 16
    53a8:	14 fd       	sbrc	r17, 4
    53aa:	14 60       	ori	r17, 0x04	; 4
    53ac:	20 e1       	ldi	r18, 0x10	; 16
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	04 c0       	rjmp	.+8      	; 0x53ba <vfprintf+0x27a>
    53b2:	14 fd       	sbrc	r17, 4
    53b4:	16 60       	ori	r17, 0x06	; 6
    53b6:	20 e1       	ldi	r18, 0x10	; 16
    53b8:	32 e0       	ldi	r19, 0x02	; 2
    53ba:	17 ff       	sbrs	r17, 7
    53bc:	08 c0       	rjmp	.+16     	; 0x53ce <vfprintf+0x28e>
    53be:	f5 01       	movw	r30, r10
    53c0:	60 81       	ld	r22, Z
    53c2:	71 81       	ldd	r23, Z+1	; 0x01
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	93 81       	ldd	r25, Z+3	; 0x03
    53c8:	44 e0       	ldi	r20, 0x04	; 4
    53ca:	50 e0       	ldi	r21, 0x00	; 0
    53cc:	08 c0       	rjmp	.+16     	; 0x53de <vfprintf+0x29e>
    53ce:	f5 01       	movw	r30, r10
    53d0:	80 81       	ld	r24, Z
    53d2:	91 81       	ldd	r25, Z+1	; 0x01
    53d4:	bc 01       	movw	r22, r24
    53d6:	80 e0       	ldi	r24, 0x00	; 0
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	42 e0       	ldi	r20, 0x02	; 2
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	a4 0e       	add	r10, r20
    53e0:	b5 1e       	adc	r11, r21
    53e2:	a1 01       	movw	r20, r2
    53e4:	0e 94 cf 2a 	call	0x559e	; 0x559e <__ultoa_invert>
    53e8:	d8 2e       	mov	r13, r24
    53ea:	d2 18       	sub	r13, r2
    53ec:	8f e7       	ldi	r24, 0x7F	; 127
    53ee:	f8 2e       	mov	r15, r24
    53f0:	f1 22       	and	r15, r17
    53f2:	f6 fe       	sbrs	r15, 6
    53f4:	0b c0       	rjmp	.+22     	; 0x540c <vfprintf+0x2cc>
    53f6:	5e ef       	ldi	r21, 0xFE	; 254
    53f8:	f5 22       	and	r15, r21
    53fa:	d9 14       	cp	r13, r9
    53fc:	38 f4       	brcc	.+14     	; 0x540c <vfprintf+0x2cc>
    53fe:	f4 fe       	sbrs	r15, 4
    5400:	07 c0       	rjmp	.+14     	; 0x5410 <vfprintf+0x2d0>
    5402:	f2 fc       	sbrc	r15, 2
    5404:	05 c0       	rjmp	.+10     	; 0x5410 <vfprintf+0x2d0>
    5406:	8f ee       	ldi	r24, 0xEF	; 239
    5408:	f8 22       	and	r15, r24
    540a:	02 c0       	rjmp	.+4      	; 0x5410 <vfprintf+0x2d0>
    540c:	1d 2d       	mov	r17, r13
    540e:	01 c0       	rjmp	.+2      	; 0x5412 <vfprintf+0x2d2>
    5410:	19 2d       	mov	r17, r9
    5412:	f4 fe       	sbrs	r15, 4
    5414:	0d c0       	rjmp	.+26     	; 0x5430 <vfprintf+0x2f0>
    5416:	fe 01       	movw	r30, r28
    5418:	ed 0d       	add	r30, r13
    541a:	f1 1d       	adc	r31, r1
    541c:	80 81       	ld	r24, Z
    541e:	80 33       	cpi	r24, 0x30	; 48
    5420:	19 f4       	brne	.+6      	; 0x5428 <vfprintf+0x2e8>
    5422:	99 ee       	ldi	r25, 0xE9	; 233
    5424:	f9 22       	and	r15, r25
    5426:	08 c0       	rjmp	.+16     	; 0x5438 <vfprintf+0x2f8>
    5428:	1f 5f       	subi	r17, 0xFF	; 255
    542a:	f2 fe       	sbrs	r15, 2
    542c:	05 c0       	rjmp	.+10     	; 0x5438 <vfprintf+0x2f8>
    542e:	03 c0       	rjmp	.+6      	; 0x5436 <vfprintf+0x2f6>
    5430:	8f 2d       	mov	r24, r15
    5432:	86 78       	andi	r24, 0x86	; 134
    5434:	09 f0       	breq	.+2      	; 0x5438 <vfprintf+0x2f8>
    5436:	1f 5f       	subi	r17, 0xFF	; 255
    5438:	0f 2d       	mov	r16, r15
    543a:	f3 fc       	sbrc	r15, 3
    543c:	14 c0       	rjmp	.+40     	; 0x5466 <vfprintf+0x326>
    543e:	f0 fe       	sbrs	r15, 0
    5440:	0f c0       	rjmp	.+30     	; 0x5460 <vfprintf+0x320>
    5442:	1e 15       	cp	r17, r14
    5444:	10 f0       	brcs	.+4      	; 0x544a <vfprintf+0x30a>
    5446:	9d 2c       	mov	r9, r13
    5448:	0b c0       	rjmp	.+22     	; 0x5460 <vfprintf+0x320>
    544a:	9d 2c       	mov	r9, r13
    544c:	9e 0c       	add	r9, r14
    544e:	91 1a       	sub	r9, r17
    5450:	1e 2d       	mov	r17, r14
    5452:	06 c0       	rjmp	.+12     	; 0x5460 <vfprintf+0x320>
    5454:	80 e2       	ldi	r24, 0x20	; 32
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	b3 01       	movw	r22, r6
    545a:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    545e:	1f 5f       	subi	r17, 0xFF	; 255
    5460:	1e 15       	cp	r17, r14
    5462:	c0 f3       	brcs	.-16     	; 0x5454 <vfprintf+0x314>
    5464:	04 c0       	rjmp	.+8      	; 0x546e <vfprintf+0x32e>
    5466:	1e 15       	cp	r17, r14
    5468:	10 f4       	brcc	.+4      	; 0x546e <vfprintf+0x32e>
    546a:	e1 1a       	sub	r14, r17
    546c:	01 c0       	rjmp	.+2      	; 0x5470 <vfprintf+0x330>
    546e:	ee 24       	eor	r14, r14
    5470:	04 ff       	sbrs	r16, 4
    5472:	0f c0       	rjmp	.+30     	; 0x5492 <vfprintf+0x352>
    5474:	80 e3       	ldi	r24, 0x30	; 48
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	b3 01       	movw	r22, r6
    547a:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    547e:	02 ff       	sbrs	r16, 2
    5480:	1d c0       	rjmp	.+58     	; 0x54bc <vfprintf+0x37c>
    5482:	01 fd       	sbrc	r16, 1
    5484:	03 c0       	rjmp	.+6      	; 0x548c <vfprintf+0x34c>
    5486:	88 e7       	ldi	r24, 0x78	; 120
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	0e c0       	rjmp	.+28     	; 0x54a8 <vfprintf+0x368>
    548c:	88 e5       	ldi	r24, 0x58	; 88
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	0b c0       	rjmp	.+22     	; 0x54a8 <vfprintf+0x368>
    5492:	80 2f       	mov	r24, r16
    5494:	86 78       	andi	r24, 0x86	; 134
    5496:	91 f0       	breq	.+36     	; 0x54bc <vfprintf+0x37c>
    5498:	01 ff       	sbrs	r16, 1
    549a:	02 c0       	rjmp	.+4      	; 0x54a0 <vfprintf+0x360>
    549c:	8b e2       	ldi	r24, 0x2B	; 43
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <vfprintf+0x362>
    54a0:	80 e2       	ldi	r24, 0x20	; 32
    54a2:	f7 fc       	sbrc	r15, 7
    54a4:	8d e2       	ldi	r24, 0x2D	; 45
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	b3 01       	movw	r22, r6
    54aa:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    54ae:	06 c0       	rjmp	.+12     	; 0x54bc <vfprintf+0x37c>
    54b0:	80 e3       	ldi	r24, 0x30	; 48
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	b3 01       	movw	r22, r6
    54b6:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    54ba:	9a 94       	dec	r9
    54bc:	d9 14       	cp	r13, r9
    54be:	c0 f3       	brcs	.-16     	; 0x54b0 <vfprintf+0x370>
    54c0:	da 94       	dec	r13
    54c2:	f1 01       	movw	r30, r2
    54c4:	ed 0d       	add	r30, r13
    54c6:	f1 1d       	adc	r31, r1
    54c8:	80 81       	ld	r24, Z
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	b3 01       	movw	r22, r6
    54ce:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    54d2:	dd 20       	and	r13, r13
    54d4:	a9 f7       	brne	.-22     	; 0x54c0 <vfprintf+0x380>
    54d6:	06 c0       	rjmp	.+12     	; 0x54e4 <vfprintf+0x3a4>
    54d8:	80 e2       	ldi	r24, 0x20	; 32
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	b3 01       	movw	r22, r6
    54de:	0e 94 a3 2a 	call	0x5546	; 0x5546 <fputc>
    54e2:	ea 94       	dec	r14
    54e4:	ee 20       	and	r14, r14
    54e6:	c1 f7       	brne	.-16     	; 0x54d8 <vfprintf+0x398>
    54e8:	43 ce       	rjmp	.-890    	; 0x5170 <vfprintf+0x30>
    54ea:	f3 01       	movw	r30, r6
    54ec:	66 81       	ldd	r22, Z+6	; 0x06
    54ee:	77 81       	ldd	r23, Z+7	; 0x07
    54f0:	cb 01       	movw	r24, r22
    54f2:	2b 96       	adiw	r28, 0x0b	; 11
    54f4:	e2 e1       	ldi	r30, 0x12	; 18
    54f6:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__epilogue_restores__>

000054fa <strnlen_P>:
    54fa:	fc 01       	movw	r30, r24
    54fc:	05 90       	lpm	r0, Z+
    54fe:	61 50       	subi	r22, 0x01	; 1
    5500:	70 40       	sbci	r23, 0x00	; 0
    5502:	01 10       	cpse	r0, r1
    5504:	d8 f7       	brcc	.-10     	; 0x54fc <strnlen_P+0x2>
    5506:	80 95       	com	r24
    5508:	90 95       	com	r25
    550a:	8e 0f       	add	r24, r30
    550c:	9f 1f       	adc	r25, r31
    550e:	08 95       	ret

00005510 <strnlen>:
    5510:	fc 01       	movw	r30, r24
    5512:	61 50       	subi	r22, 0x01	; 1
    5514:	70 40       	sbci	r23, 0x00	; 0
    5516:	01 90       	ld	r0, Z+
    5518:	01 10       	cpse	r0, r1
    551a:	d8 f7       	brcc	.-10     	; 0x5512 <strnlen+0x2>
    551c:	80 95       	com	r24
    551e:	90 95       	com	r25
    5520:	8e 0f       	add	r24, r30
    5522:	9f 1f       	adc	r25, r31
    5524:	08 95       	ret

00005526 <strrev>:
    5526:	dc 01       	movw	r26, r24
    5528:	fc 01       	movw	r30, r24
    552a:	67 2f       	mov	r22, r23
    552c:	71 91       	ld	r23, Z+
    552e:	77 23       	and	r23, r23
    5530:	e1 f7       	brne	.-8      	; 0x552a <strrev+0x4>
    5532:	32 97       	sbiw	r30, 0x02	; 2
    5534:	04 c0       	rjmp	.+8      	; 0x553e <strrev+0x18>
    5536:	7c 91       	ld	r23, X
    5538:	6d 93       	st	X+, r22
    553a:	70 83       	st	Z, r23
    553c:	62 91       	ld	r22, -Z
    553e:	ae 17       	cp	r26, r30
    5540:	bf 07       	cpc	r27, r31
    5542:	c8 f3       	brcs	.-14     	; 0x5536 <strrev+0x10>
    5544:	08 95       	ret

00005546 <fputc>:
    5546:	0f 93       	push	r16
    5548:	1f 93       	push	r17
    554a:	cf 93       	push	r28
    554c:	df 93       	push	r29
    554e:	8c 01       	movw	r16, r24
    5550:	eb 01       	movw	r28, r22
    5552:	8b 81       	ldd	r24, Y+3	; 0x03
    5554:	81 ff       	sbrs	r24, 1
    5556:	1b c0       	rjmp	.+54     	; 0x558e <fputc+0x48>
    5558:	82 ff       	sbrs	r24, 2
    555a:	0d c0       	rjmp	.+26     	; 0x5576 <fputc+0x30>
    555c:	2e 81       	ldd	r18, Y+6	; 0x06
    555e:	3f 81       	ldd	r19, Y+7	; 0x07
    5560:	8c 81       	ldd	r24, Y+4	; 0x04
    5562:	9d 81       	ldd	r25, Y+5	; 0x05
    5564:	28 17       	cp	r18, r24
    5566:	39 07       	cpc	r19, r25
    5568:	64 f4       	brge	.+24     	; 0x5582 <fputc+0x3c>
    556a:	e8 81       	ld	r30, Y
    556c:	f9 81       	ldd	r31, Y+1	; 0x01
    556e:	01 93       	st	Z+, r16
    5570:	f9 83       	std	Y+1, r31	; 0x01
    5572:	e8 83       	st	Y, r30
    5574:	06 c0       	rjmp	.+12     	; 0x5582 <fputc+0x3c>
    5576:	e8 85       	ldd	r30, Y+8	; 0x08
    5578:	f9 85       	ldd	r31, Y+9	; 0x09
    557a:	80 2f       	mov	r24, r16
    557c:	09 95       	icall
    557e:	89 2b       	or	r24, r25
    5580:	31 f4       	brne	.+12     	; 0x558e <fputc+0x48>
    5582:	8e 81       	ldd	r24, Y+6	; 0x06
    5584:	9f 81       	ldd	r25, Y+7	; 0x07
    5586:	01 96       	adiw	r24, 0x01	; 1
    5588:	9f 83       	std	Y+7, r25	; 0x07
    558a:	8e 83       	std	Y+6, r24	; 0x06
    558c:	02 c0       	rjmp	.+4      	; 0x5592 <fputc+0x4c>
    558e:	0f ef       	ldi	r16, 0xFF	; 255
    5590:	1f ef       	ldi	r17, 0xFF	; 255
    5592:	c8 01       	movw	r24, r16
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
    5598:	1f 91       	pop	r17
    559a:	0f 91       	pop	r16
    559c:	08 95       	ret

0000559e <__ultoa_invert>:
    559e:	fa 01       	movw	r30, r20
    55a0:	aa 27       	eor	r26, r26
    55a2:	28 30       	cpi	r18, 0x08	; 8
    55a4:	51 f1       	breq	.+84     	; 0x55fa <__ultoa_invert+0x5c>
    55a6:	20 31       	cpi	r18, 0x10	; 16
    55a8:	81 f1       	breq	.+96     	; 0x560a <__ultoa_invert+0x6c>
    55aa:	e8 94       	clt
    55ac:	6f 93       	push	r22
    55ae:	6e 7f       	andi	r22, 0xFE	; 254
    55b0:	6e 5f       	subi	r22, 0xFE	; 254
    55b2:	7f 4f       	sbci	r23, 0xFF	; 255
    55b4:	8f 4f       	sbci	r24, 0xFF	; 255
    55b6:	9f 4f       	sbci	r25, 0xFF	; 255
    55b8:	af 4f       	sbci	r26, 0xFF	; 255
    55ba:	b1 e0       	ldi	r27, 0x01	; 1
    55bc:	3e d0       	rcall	.+124    	; 0x563a <__ultoa_invert+0x9c>
    55be:	b4 e0       	ldi	r27, 0x04	; 4
    55c0:	3c d0       	rcall	.+120    	; 0x563a <__ultoa_invert+0x9c>
    55c2:	67 0f       	add	r22, r23
    55c4:	78 1f       	adc	r23, r24
    55c6:	89 1f       	adc	r24, r25
    55c8:	9a 1f       	adc	r25, r26
    55ca:	a1 1d       	adc	r26, r1
    55cc:	68 0f       	add	r22, r24
    55ce:	79 1f       	adc	r23, r25
    55d0:	8a 1f       	adc	r24, r26
    55d2:	91 1d       	adc	r25, r1
    55d4:	a1 1d       	adc	r26, r1
    55d6:	6a 0f       	add	r22, r26
    55d8:	71 1d       	adc	r23, r1
    55da:	81 1d       	adc	r24, r1
    55dc:	91 1d       	adc	r25, r1
    55de:	a1 1d       	adc	r26, r1
    55e0:	20 d0       	rcall	.+64     	; 0x5622 <__ultoa_invert+0x84>
    55e2:	09 f4       	brne	.+2      	; 0x55e6 <__ultoa_invert+0x48>
    55e4:	68 94       	set
    55e6:	3f 91       	pop	r19
    55e8:	2a e0       	ldi	r18, 0x0A	; 10
    55ea:	26 9f       	mul	r18, r22
    55ec:	11 24       	eor	r1, r1
    55ee:	30 19       	sub	r19, r0
    55f0:	30 5d       	subi	r19, 0xD0	; 208
    55f2:	31 93       	st	Z+, r19
    55f4:	de f6       	brtc	.-74     	; 0x55ac <__ultoa_invert+0xe>
    55f6:	cf 01       	movw	r24, r30
    55f8:	08 95       	ret
    55fa:	46 2f       	mov	r20, r22
    55fc:	47 70       	andi	r20, 0x07	; 7
    55fe:	40 5d       	subi	r20, 0xD0	; 208
    5600:	41 93       	st	Z+, r20
    5602:	b3 e0       	ldi	r27, 0x03	; 3
    5604:	0f d0       	rcall	.+30     	; 0x5624 <__ultoa_invert+0x86>
    5606:	c9 f7       	brne	.-14     	; 0x55fa <__ultoa_invert+0x5c>
    5608:	f6 cf       	rjmp	.-20     	; 0x55f6 <__ultoa_invert+0x58>
    560a:	46 2f       	mov	r20, r22
    560c:	4f 70       	andi	r20, 0x0F	; 15
    560e:	40 5d       	subi	r20, 0xD0	; 208
    5610:	4a 33       	cpi	r20, 0x3A	; 58
    5612:	18 f0       	brcs	.+6      	; 0x561a <__ultoa_invert+0x7c>
    5614:	49 5d       	subi	r20, 0xD9	; 217
    5616:	31 fd       	sbrc	r19, 1
    5618:	40 52       	subi	r20, 0x20	; 32
    561a:	41 93       	st	Z+, r20
    561c:	02 d0       	rcall	.+4      	; 0x5622 <__ultoa_invert+0x84>
    561e:	a9 f7       	brne	.-22     	; 0x560a <__ultoa_invert+0x6c>
    5620:	ea cf       	rjmp	.-44     	; 0x55f6 <__ultoa_invert+0x58>
    5622:	b4 e0       	ldi	r27, 0x04	; 4
    5624:	a6 95       	lsr	r26
    5626:	97 95       	ror	r25
    5628:	87 95       	ror	r24
    562a:	77 95       	ror	r23
    562c:	67 95       	ror	r22
    562e:	ba 95       	dec	r27
    5630:	c9 f7       	brne	.-14     	; 0x5624 <__ultoa_invert+0x86>
    5632:	00 97       	sbiw	r24, 0x00	; 0
    5634:	61 05       	cpc	r22, r1
    5636:	71 05       	cpc	r23, r1
    5638:	08 95       	ret
    563a:	9b 01       	movw	r18, r22
    563c:	ac 01       	movw	r20, r24
    563e:	0a 2e       	mov	r0, r26
    5640:	06 94       	lsr	r0
    5642:	57 95       	ror	r21
    5644:	47 95       	ror	r20
    5646:	37 95       	ror	r19
    5648:	27 95       	ror	r18
    564a:	ba 95       	dec	r27
    564c:	c9 f7       	brne	.-14     	; 0x5640 <__ultoa_invert+0xa2>
    564e:	62 0f       	add	r22, r18
    5650:	73 1f       	adc	r23, r19
    5652:	84 1f       	adc	r24, r20
    5654:	95 1f       	adc	r25, r21
    5656:	a0 1d       	adc	r26, r0
    5658:	08 95       	ret

0000565a <_exit>:
    565a:	f8 94       	cli

0000565c <__stop_program>:
    565c:	ff cf       	rjmp	.-2      	; 0x565c <__stop_program>
